
[I2C]SHT31_TempHumid_Sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007eac  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000468  08007fc0  08007fc0  00017fc0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008428  08008428  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  08008428  08008428  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008428  08008428  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008428  08008428  00018428  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800842c  0800842c  0001842c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08008430  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c0  200001e0  08008610  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003a0  08008610  000203a0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000130dc  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002d44  00000000  00000000  000332e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001078  00000000  00000000  00036030  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f00  00000000  00000000  000370a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017973  00000000  00000000  00037fa8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001229a  00000000  00000000  0004f91b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00076dee  00000000  00000000  00061bb5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d89a3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000514c  00000000  00000000  000d8a20  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	08007fa4 	.word	0x08007fa4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	08007fa4 	.word	0x08007fa4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	; 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000b44:	f1a2 0201 	sub.w	r2, r2, #1
 8000b48:	d1ed      	bne.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000cf6:	2afd      	cmp	r2, #253	; 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	; 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	; 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	; 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <__aeabi_f2iz>:
 8000f44:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f48:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f4c:	d30f      	bcc.n	8000f6e <__aeabi_f2iz+0x2a>
 8000f4e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000f52:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f56:	d90d      	bls.n	8000f74 <__aeabi_f2iz+0x30>
 8000f58:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f5c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f60:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000f64:	fa23 f002 	lsr.w	r0, r3, r2
 8000f68:	bf18      	it	ne
 8000f6a:	4240      	negne	r0, r0
 8000f6c:	4770      	bx	lr
 8000f6e:	f04f 0000 	mov.w	r0, #0
 8000f72:	4770      	bx	lr
 8000f74:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000f78:	d101      	bne.n	8000f7e <__aeabi_f2iz+0x3a>
 8000f7a:	0242      	lsls	r2, r0, #9
 8000f7c:	d105      	bne.n	8000f8a <__aeabi_f2iz+0x46>
 8000f7e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000f82:	bf08      	it	eq
 8000f84:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000f88:	4770      	bx	lr
 8000f8a:	f04f 0000 	mov.w	r0, #0
 8000f8e:	4770      	bx	lr

08000f90 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f96:	4b10      	ldr	r3, [pc, #64]	; (8000fd8 <MX_DMA_Init+0x48>)
 8000f98:	695b      	ldr	r3, [r3, #20]
 8000f9a:	4a0f      	ldr	r2, [pc, #60]	; (8000fd8 <MX_DMA_Init+0x48>)
 8000f9c:	f043 0301 	orr.w	r3, r3, #1
 8000fa0:	6153      	str	r3, [r2, #20]
 8000fa2:	4b0d      	ldr	r3, [pc, #52]	; (8000fd8 <MX_DMA_Init+0x48>)
 8000fa4:	695b      	ldr	r3, [r3, #20]
 8000fa6:	f003 0301 	and.w	r3, r3, #1
 8000faa:	607b      	str	r3, [r7, #4]
 8000fac:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 1, 0);
 8000fae:	2200      	movs	r2, #0
 8000fb0:	2101      	movs	r1, #1
 8000fb2:	2010      	movs	r0, #16
 8000fb4:	f001 f9ab 	bl	800230e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000fb8:	2010      	movs	r0, #16
 8000fba:	f001 f9c4 	bl	8002346 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 1, 0);
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	2101      	movs	r1, #1
 8000fc2:	2011      	movs	r0, #17
 8000fc4:	f001 f9a3 	bl	800230e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000fc8:	2011      	movs	r0, #17
 8000fca:	f001 f9bc 	bl	8002346 <HAL_NVIC_EnableIRQ>

}
 8000fce:	bf00      	nop
 8000fd0:	3708      	adds	r7, #8
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	40021000 	.word	0x40021000

08000fdc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b088      	sub	sp, #32
 8000fe0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe2:	f107 0310 	add.w	r3, r7, #16
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	601a      	str	r2, [r3, #0]
 8000fea:	605a      	str	r2, [r3, #4]
 8000fec:	609a      	str	r2, [r3, #8]
 8000fee:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ff0:	4b28      	ldr	r3, [pc, #160]	; (8001094 <MX_GPIO_Init+0xb8>)
 8000ff2:	699b      	ldr	r3, [r3, #24]
 8000ff4:	4a27      	ldr	r2, [pc, #156]	; (8001094 <MX_GPIO_Init+0xb8>)
 8000ff6:	f043 0320 	orr.w	r3, r3, #32
 8000ffa:	6193      	str	r3, [r2, #24]
 8000ffc:	4b25      	ldr	r3, [pc, #148]	; (8001094 <MX_GPIO_Init+0xb8>)
 8000ffe:	699b      	ldr	r3, [r3, #24]
 8001000:	f003 0320 	and.w	r3, r3, #32
 8001004:	60fb      	str	r3, [r7, #12]
 8001006:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001008:	4b22      	ldr	r3, [pc, #136]	; (8001094 <MX_GPIO_Init+0xb8>)
 800100a:	699b      	ldr	r3, [r3, #24]
 800100c:	4a21      	ldr	r2, [pc, #132]	; (8001094 <MX_GPIO_Init+0xb8>)
 800100e:	f043 0304 	orr.w	r3, r3, #4
 8001012:	6193      	str	r3, [r2, #24]
 8001014:	4b1f      	ldr	r3, [pc, #124]	; (8001094 <MX_GPIO_Init+0xb8>)
 8001016:	699b      	ldr	r3, [r3, #24]
 8001018:	f003 0304 	and.w	r3, r3, #4
 800101c:	60bb      	str	r3, [r7, #8]
 800101e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001020:	4b1c      	ldr	r3, [pc, #112]	; (8001094 <MX_GPIO_Init+0xb8>)
 8001022:	699b      	ldr	r3, [r3, #24]
 8001024:	4a1b      	ldr	r2, [pc, #108]	; (8001094 <MX_GPIO_Init+0xb8>)
 8001026:	f043 0308 	orr.w	r3, r3, #8
 800102a:	6193      	str	r3, [r2, #24]
 800102c:	4b19      	ldr	r3, [pc, #100]	; (8001094 <MX_GPIO_Init+0xb8>)
 800102e:	699b      	ldr	r3, [r3, #24]
 8001030:	f003 0308 	and.w	r3, r3, #8
 8001034:	607b      	str	r3, [r7, #4]
 8001036:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, USER_LED_1_Pin|USER_LED_4_Pin, GPIO_PIN_RESET);
 8001038:	2200      	movs	r2, #0
 800103a:	f44f 7190 	mov.w	r1, #288	; 0x120
 800103e:	4816      	ldr	r0, [pc, #88]	; (8001098 <MX_GPIO_Init+0xbc>)
 8001040:	f001 fccc 	bl	80029dc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = BT_UP_Pin|BT_CENTER_Pin|BT_DOWN_Pin;
 8001044:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8001048:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800104a:	4b14      	ldr	r3, [pc, #80]	; (800109c <MX_GPIO_Init+0xc0>)
 800104c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800104e:	2301      	movs	r3, #1
 8001050:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001052:	f107 0310 	add.w	r3, r7, #16
 8001056:	4619      	mov	r1, r3
 8001058:	4811      	ldr	r0, [pc, #68]	; (80010a0 <MX_GPIO_Init+0xc4>)
 800105a:	f001 fb65 	bl	8002728 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = USER_LED_1_Pin|USER_LED_4_Pin;
 800105e:	f44f 7390 	mov.w	r3, #288	; 0x120
 8001062:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001064:	2301      	movs	r3, #1
 8001066:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001068:	2300      	movs	r3, #0
 800106a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800106c:	2302      	movs	r3, #2
 800106e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001070:	f107 0310 	add.w	r3, r7, #16
 8001074:	4619      	mov	r1, r3
 8001076:	4808      	ldr	r0, [pc, #32]	; (8001098 <MX_GPIO_Init+0xbc>)
 8001078:	f001 fb56 	bl	8002728 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 2, 0);
 800107c:	2200      	movs	r2, #0
 800107e:	2102      	movs	r1, #2
 8001080:	2017      	movs	r0, #23
 8001082:	f001 f944 	bl	800230e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001086:	2017      	movs	r0, #23
 8001088:	f001 f95d 	bl	8002346 <HAL_NVIC_EnableIRQ>

}
 800108c:	bf00      	nop
 800108e:	3720      	adds	r7, #32
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	40021000 	.word	0x40021000
 8001098:	40010c00 	.word	0x40010c00
 800109c:	10210000 	.word	0x10210000
 80010a0:	40010800 	.word	0x40010800

080010a4 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80010a4:	b598      	push	{r3, r4, r7, lr}
 80010a6:	af00      	add	r7, sp, #0
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 80010a8:	f001 f84a 	bl	8002140 <HAL_Init>
    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 80010ac:	f000 f8b0 	bl	8001210 <SystemClock_Config>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 80010b0:	f7ff ff94 	bl	8000fdc <MX_GPIO_Init>
    MX_DMA_Init();
 80010b4:	f7ff ff6c 	bl	8000f90 <MX_DMA_Init>
    MX_USART2_UART_Init();
 80010b8:	f000 ff3e 	bl	8001f38 <MX_USART2_UART_Init>
    /* USER CODE BEGIN 2 */
    vIWDG_Init(&hiwdg, WATCHDOG_TIME);
 80010bc:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 80010c0:	4845      	ldr	r0, [pc, #276]	; (80011d8 <main+0x134>)
 80010c2:	f000 f9a7 	bl	8001414 <vIWDG_Init>
    I2C_Init();
 80010c6:	f000 fa27 	bl	8001518 <I2C_Init>
    __RETARGET_INIT(DEBUG_USART);
 80010ca:	4844      	ldr	r0, [pc, #272]	; (80011dc <main+0x138>)
 80010cc:	f000 fd02 	bl	8001ad4 <RetargetInit>
    __PRINT_RESET_CAUSE();
 80010d0:	f000 f90c 	bl	80012ec <resetCauseGet>
 80010d4:	4603      	mov	r3, r0
 80010d6:	4618      	mov	r0, r3
 80010d8:	f000 f94e 	bl	8001378 <resetCauseGetName>
 80010dc:	4603      	mov	r3, r0
 80010de:	4618      	mov	r0, r3
 80010e0:	f004 ff7a 	bl	8005fd8 <iprintf>
 80010e4:	483e      	ldr	r0, [pc, #248]	; (80011e0 <main+0x13c>)
 80010e6:	f004 ffeb 	bl	80060c0 <puts>
    __MY_OFF_ALL_LED();
 80010ea:	2201      	movs	r2, #1
 80010ec:	2120      	movs	r1, #32
 80010ee:	483d      	ldr	r0, [pc, #244]	; (80011e4 <main+0x140>)
 80010f0:	f001 fc74 	bl	80029dc <HAL_GPIO_WritePin>
 80010f4:	2201      	movs	r2, #1
 80010f6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010fa:	483b      	ldr	r0, [pc, #236]	; (80011e8 <main+0x144>)
 80010fc:	f001 fc6e 	bl	80029dc <HAL_GPIO_WritePin>
 8001100:	2201      	movs	r2, #1
 8001102:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001106:	4838      	ldr	r0, [pc, #224]	; (80011e8 <main+0x144>)
 8001108:	f001 fc68 	bl	80029dc <HAL_GPIO_WritePin>
 800110c:	2201      	movs	r2, #1
 800110e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001112:	4834      	ldr	r0, [pc, #208]	; (80011e4 <main+0x140>)
 8001114:	f001 fc62 	bl	80029dc <HAL_GPIO_WritePin>

    /* USER CODE END 2 */
    /* Infinite loop */
    /* USER CODE BEGIN WHILE */
    prev_time_blinkled = HAL_GetTick();
 8001118:	f001 f83a 	bl	8002190 <HAL_GetTick>
 800111c:	4602      	mov	r2, r0
 800111e:	4b33      	ldr	r3, [pc, #204]	; (80011ec <main+0x148>)
 8001120:	601a      	str	r2, [r3, #0]
    prev_time_read_sensor = HAL_GetTick();
 8001122:	f001 f835 	bl	8002190 <HAL_GetTick>
 8001126:	4602      	mov	r2, r0
 8001128:	4b31      	ldr	r3, [pc, #196]	; (80011f0 <main+0x14c>)
 800112a:	601a      	str	r2, [r3, #0]
    while (1) {
        now_tick = HAL_GetTick();
 800112c:	f001 f830 	bl	8002190 <HAL_GetTick>
 8001130:	4602      	mov	r2, r0
 8001132:	4b30      	ldr	r3, [pc, #192]	; (80011f4 <main+0x150>)
 8001134:	601a      	str	r2, [r3, #0]
        /* Task blink led 500ms */
        if (now_tick - prev_time_blinkled >= BLINK_LED_FREQ) {
 8001136:	4b2f      	ldr	r3, [pc, #188]	; (80011f4 <main+0x150>)
 8001138:	681a      	ldr	r2, [r3, #0]
 800113a:	4b2c      	ldr	r3, [pc, #176]	; (80011ec <main+0x148>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	1ad3      	subs	r3, r2, r3
 8001140:	2bb0      	cmp	r3, #176	; 0xb0
 8001142:	d908      	bls.n	8001156 <main+0xb2>
            prev_time_blinkled = now_tick;
 8001144:	4b2b      	ldr	r3, [pc, #172]	; (80011f4 <main+0x150>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a28      	ldr	r2, [pc, #160]	; (80011ec <main+0x148>)
 800114a:	6013      	str	r3, [r2, #0]
            __MY_TOGGLE_LED(LED_4);
 800114c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001150:	4824      	ldr	r0, [pc, #144]	; (80011e4 <main+0x140>)
 8001152:	f001 fc5b 	bl	8002a0c <HAL_GPIO_TogglePin>
        }

        /* Task read sensor 1000ms */
        if (now_tick - prev_time_read_sensor >= SHT3x_READ_FREQ) {
 8001156:	4b27      	ldr	r3, [pc, #156]	; (80011f4 <main+0x150>)
 8001158:	681a      	ldr	r2, [r3, #0]
 800115a:	4b25      	ldr	r3, [pc, #148]	; (80011f0 <main+0x14c>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	1ad3      	subs	r3, r2, r3
 8001160:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001164:	d333      	bcc.n	80011ce <main+0x12a>
            prev_time_read_sensor = now_tick;
 8001166:	4b23      	ldr	r3, [pc, #140]	; (80011f4 <main+0x150>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4a21      	ldr	r2, [pc, #132]	; (80011f0 <main+0x14c>)
 800116c:	6013      	str	r3, [r2, #0]
            newline;
 800116e:	481c      	ldr	r0, [pc, #112]	; (80011e0 <main+0x13c>)
 8001170:	f004 ffa6 	bl	80060c0 <puts>
            __PRINT_TIME_STAMP();
 8001174:	f001 f80c 	bl	8002190 <HAL_GetTick>
 8001178:	4603      	mov	r3, r0
 800117a:	4618      	mov	r0, r3
 800117c:	f000 f982 	bl	8001484 <vTimeStamp>
            __MY_TOGGLE_LED(LED_1);
 8001180:	2120      	movs	r1, #32
 8001182:	4818      	ldr	r0, [pc, #96]	; (80011e4 <main+0x140>)
 8001184:	f001 fc42 	bl	8002a0c <HAL_GPIO_TogglePin>

            /* SHT3x data read */
            SHT3x_SendCommand(cmd);
 8001188:	481b      	ldr	r0, [pc, #108]	; (80011f8 <main+0x154>)
 800118a:	f000 fbfe 	bl	800198a <SHT3x_SendCommand>
            SHT3x_ReadData(sht3x_raw_data);
 800118e:	481b      	ldr	r0, [pc, #108]	; (80011fc <main+0x158>)
 8001190:	f000 fc17 	bl	80019c2 <SHT3x_ReadData>
            if (SHT3x_CRCCheck(sht3x_raw_data) == SHT3x_OK) {
 8001194:	4819      	ldr	r0, [pc, #100]	; (80011fc <main+0x158>)
 8001196:	f000 fc61 	bl	8001a5c <SHT3x_CRCCheck>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d113      	bne.n	80011c8 <main+0x124>
                printf("CRC Correct\r\n");
 80011a0:	4817      	ldr	r0, [pc, #92]	; (8001200 <main+0x15c>)
 80011a2:	f004 ff8d 	bl	80060c0 <puts>
                SHT3x_calculateTemp(sht3x_raw_data, &temp);
 80011a6:	4917      	ldr	r1, [pc, #92]	; (8001204 <main+0x160>)
 80011a8:	4814      	ldr	r0, [pc, #80]	; (80011fc <main+0x158>)
 80011aa:	f000 fc25 	bl	80019f8 <SHT3x_calculateTemp>
                printf("%2.2f\r\n", temp);
 80011ae:	4b15      	ldr	r3, [pc, #84]	; (8001204 <main+0x160>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4618      	mov	r0, r3
 80011b4:	f7ff f938 	bl	8000428 <__aeabi_f2d>
 80011b8:	4603      	mov	r3, r0
 80011ba:	460c      	mov	r4, r1
 80011bc:	461a      	mov	r2, r3
 80011be:	4623      	mov	r3, r4
 80011c0:	4811      	ldr	r0, [pc, #68]	; (8001208 <main+0x164>)
 80011c2:	f004 ff09 	bl	8005fd8 <iprintf>
 80011c6:	e002      	b.n	80011ce <main+0x12a>
            } else {
                printf("CRC InCorrect\r\n");
 80011c8:	4810      	ldr	r0, [pc, #64]	; (800120c <main+0x168>)
 80011ca:	f004 ff79 	bl	80060c0 <puts>
        }

        /* USER CODE END WHILE */
        /* USER CODE BEGIN 3 */

        HAL_IWDG_Refresh(&hiwdg);
 80011ce:	4802      	ldr	r0, [pc, #8]	; (80011d8 <main+0x134>)
 80011d0:	f002 ff46 	bl	8004060 <HAL_IWDG_Refresh>
        now_tick = HAL_GetTick();
 80011d4:	e7aa      	b.n	800112c <main+0x88>
 80011d6:	bf00      	nop
 80011d8:	20000270 	.word	0x20000270
 80011dc:	20000358 	.word	0x20000358
 80011e0:	08007fc0 	.word	0x08007fc0
 80011e4:	40010c00 	.word	0x40010c00
 80011e8:	40010800 	.word	0x40010800
 80011ec:	200001fc 	.word	0x200001fc
 80011f0:	20000200 	.word	0x20000200
 80011f4:	20000288 	.word	0x20000288
 80011f8:	20000000 	.word	0x20000000
 80011fc:	20000204 	.word	0x20000204
 8001200:	08007fc4 	.word	0x08007fc4
 8001204:	2000020c 	.word	0x2000020c
 8001208:	08007fd4 	.word	0x08007fd4
 800120c:	08007fdc 	.word	0x08007fdc

08001210 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001210:	b580      	push	{r7, lr}
 8001212:	b090      	sub	sp, #64	; 0x40
 8001214:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001216:	f107 0318 	add.w	r3, r7, #24
 800121a:	2228      	movs	r2, #40	; 0x28
 800121c:	2100      	movs	r1, #0
 800121e:	4618      	mov	r0, r3
 8001220:	f004 fa82 	bl	8005728 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001224:	1d3b      	adds	r3, r7, #4
 8001226:	2200      	movs	r2, #0
 8001228:	601a      	str	r2, [r3, #0]
 800122a:	605a      	str	r2, [r3, #4]
 800122c:	609a      	str	r2, [r3, #8]
 800122e:	60da      	str	r2, [r3, #12]
 8001230:	611a      	str	r2, [r3, #16]

    /** Initializes the RCC Oscillators according to the specified parameters
     * in the RCC_OscInitTypeDef structure.
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI
 8001232:	2309      	movs	r3, #9
 8001234:	61bb      	str	r3, [r7, #24]
            | RCC_OSCILLATORTYPE_HSE;
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001236:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800123a:	61fb      	str	r3, [r7, #28]
    RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800123c:	2300      	movs	r3, #0
 800123e:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001240:	2301      	movs	r3, #1
 8001242:	62bb      	str	r3, [r7, #40]	; 0x28
    RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001244:	2301      	movs	r3, #1
 8001246:	633b      	str	r3, [r7, #48]	; 0x30
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001248:	2302      	movs	r3, #2
 800124a:	637b      	str	r3, [r7, #52]	; 0x34
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800124c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001250:	63bb      	str	r3, [r7, #56]	; 0x38
    RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001252:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001256:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001258:	f107 0318 	add.w	r3, r7, #24
 800125c:	4618      	mov	r0, r3
 800125e:	f002 ff0f 	bl	8004080 <HAL_RCC_OscConfig>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d003      	beq.n	8001270 <SystemClock_Config+0x60>
        _Error_Handler(__FILE__, __LINE__);
 8001268:	21b3      	movs	r1, #179	; 0xb3
 800126a:	480f      	ldr	r0, [pc, #60]	; (80012a8 <SystemClock_Config+0x98>)
 800126c:	f000 f830 	bl	80012d0 <_Error_Handler>
    }
    /** Initializes the CPU, AHB and APB buses clocks
     */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001270:	230f      	movs	r3, #15
 8001272:	607b      	str	r3, [r7, #4]
            | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001274:	2302      	movs	r3, #2
 8001276:	60bb      	str	r3, [r7, #8]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001278:	2300      	movs	r3, #0
 800127a:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800127c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001280:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001282:	2300      	movs	r3, #0
 8001284:	617b      	str	r3, [r7, #20]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8001286:	1d3b      	adds	r3, r7, #4
 8001288:	2102      	movs	r1, #2
 800128a:	4618      	mov	r0, r3
 800128c:	f003 f978 	bl	8004580 <HAL_RCC_ClockConfig>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d003      	beq.n	800129e <SystemClock_Config+0x8e>
        _Error_Handler(__FILE__, __LINE__);
 8001296:	21bf      	movs	r1, #191	; 0xbf
 8001298:	4803      	ldr	r0, [pc, #12]	; (80012a8 <SystemClock_Config+0x98>)
 800129a:	f000 f819 	bl	80012d0 <_Error_Handler>
    }
}
 800129e:	bf00      	nop
 80012a0:	3740      	adds	r7, #64	; 0x40
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	08007fec 	.word	0x08007fec

080012ac <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
    /* USER CODE BEGIN Callback 0 */

    /* USER CODE END Callback 0 */
    if (htim->Instance == TIM4) {
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a04      	ldr	r2, [pc, #16]	; (80012cc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d101      	bne.n	80012c2 <HAL_TIM_PeriodElapsedCallback+0x16>
        HAL_IncTick();
 80012be:	f000 ff55 	bl	800216c <HAL_IncTick>
    }
    /* USER CODE BEGIN Callback 1 */

    /* USER CODE END Callback 1 */
}
 80012c2:	bf00      	nop
 80012c4:	3708      	adds	r7, #8
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	40000800 	.word	0x40000800

080012d0 <_Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void _Error_Handler(char *file, int line) {
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
 80012d8:	6039      	str	r1, [r7, #0]
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    while (1) {
        printf("\r\nError file %s line %d", file, line);
 80012da:	683a      	ldr	r2, [r7, #0]
 80012dc:	6879      	ldr	r1, [r7, #4]
 80012de:	4802      	ldr	r0, [pc, #8]	; (80012e8 <_Error_Handler+0x18>)
 80012e0:	f004 fe7a 	bl	8005fd8 <iprintf>
 80012e4:	e7f9      	b.n	80012da <_Error_Handler+0xa>
 80012e6:	bf00      	nop
 80012e8:	08008000 	.word	0x08008000

080012ec <resetCauseGet>:
	}
}
#endif /* !configLL_UART */

reset_cause_t resetCauseGet(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b083      	sub	sp, #12
 80012f0:	af00      	add	r7, sp, #0
	reset_cause_t reset_cause;

	if (__HAL_RCC_GET_FLAG(RCC_FLAG_LPWRRST))
 80012f2:	4b1f      	ldr	r3, [pc, #124]	; (8001370 <resetCauseGet+0x84>)
 80012f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	da02      	bge.n	8001300 <resetCauseGet+0x14>
	{
		reset_cause = eRESET_CAUSE_LOW_POWER_RESET;
 80012fa:	2301      	movs	r3, #1
 80012fc:	71fb      	strb	r3, [r7, #7]
 80012fe:	e02e      	b.n	800135e <resetCauseGet+0x72>
	}
	else if (__HAL_RCC_GET_FLAG(RCC_FLAG_WWDGRST))
 8001300:	4b1b      	ldr	r3, [pc, #108]	; (8001370 <resetCauseGet+0x84>)
 8001302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001304:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001308:	2b00      	cmp	r3, #0
 800130a:	d002      	beq.n	8001312 <resetCauseGet+0x26>
	{
		reset_cause = eRESET_CAUSE_WINDOW_WATCHDOG_RESET;
 800130c:	2302      	movs	r3, #2
 800130e:	71fb      	strb	r3, [r7, #7]
 8001310:	e025      	b.n	800135e <resetCauseGet+0x72>
	}
	else if (__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST))
 8001312:	4b17      	ldr	r3, [pc, #92]	; (8001370 <resetCauseGet+0x84>)
 8001314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001316:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800131a:	2b00      	cmp	r3, #0
 800131c:	d002      	beq.n	8001324 <resetCauseGet+0x38>
	{
		reset_cause = eRESET_CAUSE_INDEPENDENT_WATCHDOG_RESET;
 800131e:	2303      	movs	r3, #3
 8001320:	71fb      	strb	r3, [r7, #7]
 8001322:	e01c      	b.n	800135e <resetCauseGet+0x72>
	}
	else if (__HAL_RCC_GET_FLAG(RCC_FLAG_SFTRST))
 8001324:	4b12      	ldr	r3, [pc, #72]	; (8001370 <resetCauseGet+0x84>)
 8001326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001328:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800132c:	2b00      	cmp	r3, #0
 800132e:	d002      	beq.n	8001336 <resetCauseGet+0x4a>
	{
		reset_cause = eRESET_CAUSE_SOFTWARE_RESET; // This reset is induced by calling the ARM CMSIS `NVIC_SystemReset()` function!
 8001330:	2304      	movs	r3, #4
 8001332:	71fb      	strb	r3, [r7, #7]
 8001334:	e013      	b.n	800135e <resetCauseGet+0x72>
	}
	else if (__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST))
 8001336:	4b0e      	ldr	r3, [pc, #56]	; (8001370 <resetCauseGet+0x84>)
 8001338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800133a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800133e:	2b00      	cmp	r3, #0
 8001340:	d002      	beq.n	8001348 <resetCauseGet+0x5c>
	{
		reset_cause = eRESET_CAUSE_POWER_ON_POWER_DOWN_RESET;
 8001342:	2305      	movs	r3, #5
 8001344:	71fb      	strb	r3, [r7, #7]
 8001346:	e00a      	b.n	800135e <resetCauseGet+0x72>
	}
	else if (__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST))
 8001348:	4b09      	ldr	r3, [pc, #36]	; (8001370 <resetCauseGet+0x84>)
 800134a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800134c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001350:	2b00      	cmp	r3, #0
 8001352:	d002      	beq.n	800135a <resetCauseGet+0x6e>
	{
		reset_cause = eRESET_CAUSE_EXTERNAL_RESET_PIN_RESET;
 8001354:	2306      	movs	r3, #6
 8001356:	71fb      	strb	r3, [r7, #7]
 8001358:	e001      	b.n	800135e <resetCauseGet+0x72>
     {
     reset_cause = eRESET_CAUSE_BROWNOUT_RESET;
     } */
	else
	{
		reset_cause = eRESET_CAUSE_UNKNOWN;
 800135a:	2300      	movs	r3, #0
 800135c:	71fb      	strb	r3, [r7, #7]
	}

	// Clear all the reset flags or else they will remain set during future resets until system power is fully removed.
	__HAL_RCC_CLEAR_RESET_FLAGS();
 800135e:	4b05      	ldr	r3, [pc, #20]	; (8001374 <resetCauseGet+0x88>)
 8001360:	2201      	movs	r2, #1
 8001362:	601a      	str	r2, [r3, #0]

	return reset_cause;
 8001364:	79fb      	ldrb	r3, [r7, #7]
}
 8001366:	4618      	mov	r0, r3
 8001368:	370c      	adds	r7, #12
 800136a:	46bd      	mov	sp, r7
 800136c:	bc80      	pop	{r7}
 800136e:	4770      	bx	lr
 8001370:	40021000 	.word	0x40021000
 8001374:	424204e0 	.word	0x424204e0

08001378 <resetCauseGetName>:

const char *resetCauseGetName(reset_cause_t reset_cause)
{
 8001378:	b480      	push	{r7}
 800137a:	b085      	sub	sp, #20
 800137c:	af00      	add	r7, sp, #0
 800137e:	4603      	mov	r3, r0
 8001380:	71fb      	strb	r3, [r7, #7]
	const char *reset_cause_name = "TBD";
 8001382:	4b1b      	ldr	r3, [pc, #108]	; (80013f0 <resetCauseGetName+0x78>)
 8001384:	60fb      	str	r3, [r7, #12]

	switch (reset_cause)
 8001386:	79fb      	ldrb	r3, [r7, #7]
 8001388:	2b07      	cmp	r3, #7
 800138a:	d82b      	bhi.n	80013e4 <resetCauseGetName+0x6c>
 800138c:	a201      	add	r2, pc, #4	; (adr r2, 8001394 <resetCauseGetName+0x1c>)
 800138e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001392:	bf00      	nop
 8001394:	080013b5 	.word	0x080013b5
 8001398:	080013bb 	.word	0x080013bb
 800139c:	080013c1 	.word	0x080013c1
 80013a0:	080013c7 	.word	0x080013c7
 80013a4:	080013cd 	.word	0x080013cd
 80013a8:	080013d3 	.word	0x080013d3
 80013ac:	080013d9 	.word	0x080013d9
 80013b0:	080013df 	.word	0x080013df
	{
	case eRESET_CAUSE_UNKNOWN:
		reset_cause_name = "UNKNOWN";
 80013b4:	4b0f      	ldr	r3, [pc, #60]	; (80013f4 <resetCauseGetName+0x7c>)
 80013b6:	60fb      	str	r3, [r7, #12]
		break;
 80013b8:	e014      	b.n	80013e4 <resetCauseGetName+0x6c>
	case eRESET_CAUSE_LOW_POWER_RESET:
		reset_cause_name = "LOW_POWER_RESET";
 80013ba:	4b0f      	ldr	r3, [pc, #60]	; (80013f8 <resetCauseGetName+0x80>)
 80013bc:	60fb      	str	r3, [r7, #12]
		break;
 80013be:	e011      	b.n	80013e4 <resetCauseGetName+0x6c>
	case eRESET_CAUSE_WINDOW_WATCHDOG_RESET:
		reset_cause_name = "WINDOW_WATCHDOG_RESET";
 80013c0:	4b0e      	ldr	r3, [pc, #56]	; (80013fc <resetCauseGetName+0x84>)
 80013c2:	60fb      	str	r3, [r7, #12]
		break;
 80013c4:	e00e      	b.n	80013e4 <resetCauseGetName+0x6c>
	case eRESET_CAUSE_INDEPENDENT_WATCHDOG_RESET:
		reset_cause_name = "INDEPENDENT_WATCHDOG_RESET";
 80013c6:	4b0e      	ldr	r3, [pc, #56]	; (8001400 <resetCauseGetName+0x88>)
 80013c8:	60fb      	str	r3, [r7, #12]
		break;
 80013ca:	e00b      	b.n	80013e4 <resetCauseGetName+0x6c>
	case eRESET_CAUSE_SOFTWARE_RESET:
		reset_cause_name = "SOFTWARE_RESET";
 80013cc:	4b0d      	ldr	r3, [pc, #52]	; (8001404 <resetCauseGetName+0x8c>)
 80013ce:	60fb      	str	r3, [r7, #12]
		break;
 80013d0:	e008      	b.n	80013e4 <resetCauseGetName+0x6c>
	case eRESET_CAUSE_POWER_ON_POWER_DOWN_RESET:
		reset_cause_name = "POWER-ON_RESET (POR) / POWER-DOWN_RESET (PDR)";
 80013d2:	4b0d      	ldr	r3, [pc, #52]	; (8001408 <resetCauseGetName+0x90>)
 80013d4:	60fb      	str	r3, [r7, #12]
		break;
 80013d6:	e005      	b.n	80013e4 <resetCauseGetName+0x6c>
	case eRESET_CAUSE_EXTERNAL_RESET_PIN_RESET:
		reset_cause_name = "EXTERNAL_RESET_PIN_RESET";
 80013d8:	4b0c      	ldr	r3, [pc, #48]	; (800140c <resetCauseGetName+0x94>)
 80013da:	60fb      	str	r3, [r7, #12]
		break;
 80013dc:	e002      	b.n	80013e4 <resetCauseGetName+0x6c>
	case eRESET_CAUSE_BROWNOUT_RESET:
		reset_cause_name = "BROWNOUT_RESET (BOR)";
 80013de:	4b0c      	ldr	r3, [pc, #48]	; (8001410 <resetCauseGetName+0x98>)
 80013e0:	60fb      	str	r3, [r7, #12]
		break;
 80013e2:	bf00      	nop
	}
	return reset_cause_name;
 80013e4:	68fb      	ldr	r3, [r7, #12]
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	3714      	adds	r7, #20
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bc80      	pop	{r7}
 80013ee:	4770      	bx	lr
 80013f0:	08008018 	.word	0x08008018
 80013f4:	0800801c 	.word	0x0800801c
 80013f8:	08008024 	.word	0x08008024
 80013fc:	08008034 	.word	0x08008034
 8001400:	0800804c 	.word	0x0800804c
 8001404:	08008068 	.word	0x08008068
 8001408:	08008078 	.word	0x08008078
 800140c:	080080a8 	.word	0x080080a8
 8001410:	080080c4 	.word	0x080080c4

08001414 <vIWDG_Init>:

void vIWDG_Init(IWDG_HandleTypeDef *hiwdg, uint32_t millis)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b084      	sub	sp, #16
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
 800141c:	6039      	str	r1, [r7, #0]
	uint32_t iwdg_timeout_millis = millis;
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	60fb      	str	r3, [r7, #12]

	/* Select INDEPENDENT_WATCHDOG */
	hiwdg->Instance = IWDG;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	4a13      	ldr	r2, [pc, #76]	; (8001474 <vIWDG_Init+0x60>)
 8001426:	601a      	str	r2, [r3, #0]
	/* Use prescaler LSI/128 */
	hiwdg->Init.Prescaler = IWDG_PRESCALER_128;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2205      	movs	r2, #5
 800142c:	605a      	str	r2, [r3, #4]
	hiwdg->Init.Reload = (int)(IWDG_RESOLUTION * ((float)iwdg_timeout_millis / PRESCALER_128_UPPER_LIMIT));
 800142e:	68f8      	ldr	r0, [r7, #12]
 8001430:	f7ff fbe0 	bl	8000bf4 <__aeabi_ui2f>
 8001434:	4603      	mov	r3, r0
 8001436:	4910      	ldr	r1, [pc, #64]	; (8001478 <vIWDG_Init+0x64>)
 8001438:	4618      	mov	r0, r3
 800143a:	f7ff fce7 	bl	8000e0c <__aeabi_fdiv>
 800143e:	4603      	mov	r3, r0
 8001440:	490e      	ldr	r1, [pc, #56]	; (800147c <vIWDG_Init+0x68>)
 8001442:	4618      	mov	r0, r3
 8001444:	f7ff fc2e 	bl	8000ca4 <__aeabi_fmul>
 8001448:	4603      	mov	r3, r0
 800144a:	4618      	mov	r0, r3
 800144c:	f7ff fd7a 	bl	8000f44 <__aeabi_f2iz>
 8001450:	4603      	mov	r3, r0
 8001452:	461a      	mov	r2, r3
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	609a      	str	r2, [r3, #8]

	if (HAL_IWDG_Init(hiwdg) != HAL_OK)
 8001458:	6878      	ldr	r0, [r7, #4]
 800145a:	f002 fdc8 	bl	8003fee <HAL_IWDG_Init>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d003      	beq.n	800146c <vIWDG_Init+0x58>
	{
		_Error_Handler(__FILE__, __LINE__);
 8001464:	217f      	movs	r1, #127	; 0x7f
 8001466:	4806      	ldr	r0, [pc, #24]	; (8001480 <vIWDG_Init+0x6c>)
 8001468:	f7ff ff32 	bl	80012d0 <_Error_Handler>
	}
}
 800146c:	bf00      	nop
 800146e:	3710      	adds	r7, #16
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	40003000 	.word	0x40003000
 8001478:	464ccc00 	.word	0x464ccc00
 800147c:	457ff000 	.word	0x457ff000
 8001480:	080080dc 	.word	0x080080dc

08001484 <vTimeStamp>:
	}
	/* USER CODE END Error_Handler_Debug */
}

void vTimeStamp(uint32_t now_tick)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b088      	sub	sp, #32
 8001488:	af02      	add	r7, sp, #8
 800148a:	6078      	str	r0, [r7, #4]
	uint8_t second, minute, hour;
	uint32_t millis_second, now_second;

	/* ex: 450235ms => now_second = 450 */
	now_second = now_tick / 1000;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	4a1f      	ldr	r2, [pc, #124]	; (800150c <vTimeStamp+0x88>)
 8001490:	fba2 2303 	umull	r2, r3, r2, r3
 8001494:	099b      	lsrs	r3, r3, #6
 8001496:	613b      	str	r3, [r7, #16]
	/* ex: 450235ms => millis_second = 235 */
	millis_second = now_tick - now_second * 1000;
 8001498:	693b      	ldr	r3, [r7, #16]
 800149a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800149e:	fb02 f303 	mul.w	r3, r2, r3
 80014a2:	687a      	ldr	r2, [r7, #4]
 80014a4:	1ad3      	subs	r3, r2, r3
 80014a6:	60fb      	str	r3, [r7, #12]
	/* ex: 450235ms => 450/60 = 7 */
	minute = now_second / 60;
 80014a8:	693b      	ldr	r3, [r7, #16]
 80014aa:	4a19      	ldr	r2, [pc, #100]	; (8001510 <vTimeStamp+0x8c>)
 80014ac:	fba2 2303 	umull	r2, r3, r2, r3
 80014b0:	095b      	lsrs	r3, r3, #5
 80014b2:	75fb      	strb	r3, [r7, #23]
	/* ex: 450235ms => 450 - 7*60 = 30 */
	second = now_second - minute * 60;
 80014b4:	693b      	ldr	r3, [r7, #16]
 80014b6:	b2da      	uxtb	r2, r3
 80014b8:	7dfb      	ldrb	r3, [r7, #23]
 80014ba:	4619      	mov	r1, r3
 80014bc:	0109      	lsls	r1, r1, #4
 80014be:	1acb      	subs	r3, r1, r3
 80014c0:	009b      	lsls	r3, r3, #2
 80014c2:	b2db      	uxtb	r3, r3
 80014c4:	1ad3      	subs	r3, r2, r3
 80014c6:	72fb      	strb	r3, [r7, #11]
	if (minute > 60)
 80014c8:	7dfb      	ldrb	r3, [r7, #23]
 80014ca:	2b3c      	cmp	r3, #60	; 0x3c
 80014cc:	d90f      	bls.n	80014ee <vTimeStamp+0x6a>
	{
		hour = minute / 60;
 80014ce:	7dfb      	ldrb	r3, [r7, #23]
 80014d0:	4a0f      	ldr	r2, [pc, #60]	; (8001510 <vTimeStamp+0x8c>)
 80014d2:	fba2 2303 	umull	r2, r3, r2, r3
 80014d6:	095b      	lsrs	r3, r3, #5
 80014d8:	75bb      	strb	r3, [r7, #22]
		minute = minute - hour * 60;
 80014da:	7dbb      	ldrb	r3, [r7, #22]
 80014dc:	461a      	mov	r2, r3
 80014de:	011b      	lsls	r3, r3, #4
 80014e0:	1ad3      	subs	r3, r2, r3
 80014e2:	009b      	lsls	r3, r3, #2
 80014e4:	b2da      	uxtb	r2, r3
 80014e6:	7dfb      	ldrb	r3, [r7, #23]
 80014e8:	4413      	add	r3, r2
 80014ea:	75fb      	strb	r3, [r7, #23]
 80014ec:	e001      	b.n	80014f2 <vTimeStamp+0x6e>
	}
	else
	{
		hour = 0;
 80014ee:	2300      	movs	r3, #0
 80014f0:	75bb      	strb	r3, [r7, #22]
	}

#if (defined(PRINT_DEBUG))
	printf("[%02d:%02d:%02d.%03ld]\r\n", hour, minute, second, millis_second);
 80014f2:	7db9      	ldrb	r1, [r7, #22]
 80014f4:	7dfa      	ldrb	r2, [r7, #23]
 80014f6:	7af8      	ldrb	r0, [r7, #11]
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	9300      	str	r3, [sp, #0]
 80014fc:	4603      	mov	r3, r0
 80014fe:	4805      	ldr	r0, [pc, #20]	; (8001514 <vTimeStamp+0x90>)
 8001500:	f004 fd6a 	bl	8005fd8 <iprintf>
#endif
	return;
 8001504:	bf00      	nop
}
 8001506:	3718      	adds	r7, #24
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}
 800150c:	10624dd3 	.word	0x10624dd3
 8001510:	88888889 	.word	0x88888889
 8001514:	0800810c 	.word	0x0800810c

08001518 <I2C_Init>:
#include "retarget.h"

static void delay_ms(uint32_t ms);

void I2C_Init(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b084      	sub	sp, #16
 800151c:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800151e:	463b      	mov	r3, r7
 8001520:	2200      	movs	r2, #0
 8001522:	601a      	str	r2, [r3, #0]
 8001524:	605a      	str	r2, [r3, #4]
 8001526:	609a      	str	r2, [r3, #8]
 8001528:	60da      	str	r2, [r3, #12]

    /* Clock Port B Enable - IOPBEN bit = 1 */
    RCC->APB2ENR |= (1 << 3);
 800152a:	4b0f      	ldr	r3, [pc, #60]	; (8001568 <I2C_Init+0x50>)
 800152c:	699b      	ldr	r3, [r3, #24]
 800152e:	4a0e      	ldr	r2, [pc, #56]	; (8001568 <I2C_Init+0x50>)
 8001530:	f043 0308 	orr.w	r3, r3, #8
 8001534:	6193      	str	r3, [r2, #24]

    GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_7;
 8001536:	23c0      	movs	r3, #192	; 0xc0
 8001538:	603b      	str	r3, [r7, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800153a:	2301      	movs	r3, #1
 800153c:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800153e:	2303      	movs	r3, #3
 8001540:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001542:	463b      	mov	r3, r7
 8001544:	4619      	mov	r1, r3
 8001546:	4809      	ldr	r0, [pc, #36]	; (800156c <I2C_Init+0x54>)
 8001548:	f001 f8ee 	bl	8002728 <HAL_GPIO_Init>
    I2C_SCL_SET;
 800154c:	4b07      	ldr	r3, [pc, #28]	; (800156c <I2C_Init+0x54>)
 800154e:	2240      	movs	r2, #64	; 0x40
 8001550:	611a      	str	r2, [r3, #16]
    I2C_SDA_SET;
 8001552:	4b06      	ldr	r3, [pc, #24]	; (800156c <I2C_Init+0x54>)
 8001554:	691b      	ldr	r3, [r3, #16]
 8001556:	4a05      	ldr	r2, [pc, #20]	; (800156c <I2C_Init+0x54>)
 8001558:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800155c:	6113      	str	r3, [r2, #16]
}
 800155e:	bf00      	nop
 8001560:	3710      	adds	r7, #16
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	40021000 	.word	0x40021000
 800156c:	40010c00 	.word	0x40010c00

08001570 <I2C_Start>:

void I2C_Start(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0
    I2C_SDA_OUT();
 8001574:	4b12      	ldr	r3, [pc, #72]	; (80015c0 <I2C_Start+0x50>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a11      	ldr	r2, [pc, #68]	; (80015c0 <I2C_Start+0x50>)
 800157a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800157e:	6013      	str	r3, [r2, #0]
 8001580:	4b0f      	ldr	r3, [pc, #60]	; (80015c0 <I2C_Start+0x50>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a0e      	ldr	r2, [pc, #56]	; (80015c0 <I2C_Start+0x50>)
 8001586:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 800158a:	6013      	str	r3, [r2, #0]
    I2C_SCL_SET;
 800158c:	4b0c      	ldr	r3, [pc, #48]	; (80015c0 <I2C_Start+0x50>)
 800158e:	2240      	movs	r2, #64	; 0x40
 8001590:	611a      	str	r2, [r3, #16]
    I2C_SDA_SET;
 8001592:	4b0b      	ldr	r3, [pc, #44]	; (80015c0 <I2C_Start+0x50>)
 8001594:	691b      	ldr	r3, [r3, #16]
 8001596:	4a0a      	ldr	r2, [pc, #40]	; (80015c0 <I2C_Start+0x50>)
 8001598:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800159c:	6113      	str	r3, [r2, #16]
    delay_ms(4);
 800159e:	2004      	movs	r0, #4
 80015a0:	f000 f9da 	bl	8001958 <delay_ms>
    I2C_SDA_RESET;
 80015a4:	4b06      	ldr	r3, [pc, #24]	; (80015c0 <I2C_Start+0x50>)
 80015a6:	695b      	ldr	r3, [r3, #20]
 80015a8:	4a05      	ldr	r2, [pc, #20]	; (80015c0 <I2C_Start+0x50>)
 80015aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015ae:	6153      	str	r3, [r2, #20]
    delay_ms(4);
 80015b0:	2004      	movs	r0, #4
 80015b2:	f000 f9d1 	bl	8001958 <delay_ms>
    I2C_SCL_RESET;
 80015b6:	4b02      	ldr	r3, [pc, #8]	; (80015c0 <I2C_Start+0x50>)
 80015b8:	2240      	movs	r2, #64	; 0x40
 80015ba:	615a      	str	r2, [r3, #20]
}
 80015bc:	bf00      	nop
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	40010c00 	.word	0x40010c00

080015c4 <I2C_Stop>:

void I2C_Stop(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0
    I2C_SDA_OUT();
 80015c8:	4b12      	ldr	r3, [pc, #72]	; (8001614 <I2C_Stop+0x50>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a11      	ldr	r2, [pc, #68]	; (8001614 <I2C_Stop+0x50>)
 80015ce:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80015d2:	6013      	str	r3, [r2, #0]
 80015d4:	4b0f      	ldr	r3, [pc, #60]	; (8001614 <I2C_Stop+0x50>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a0e      	ldr	r2, [pc, #56]	; (8001614 <I2C_Stop+0x50>)
 80015da:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 80015de:	6013      	str	r3, [r2, #0]
    I2C_SCL_RESET;
 80015e0:	4b0c      	ldr	r3, [pc, #48]	; (8001614 <I2C_Stop+0x50>)
 80015e2:	2240      	movs	r2, #64	; 0x40
 80015e4:	615a      	str	r2, [r3, #20]
    I2C_SDA_RESET;
 80015e6:	4b0b      	ldr	r3, [pc, #44]	; (8001614 <I2C_Stop+0x50>)
 80015e8:	695b      	ldr	r3, [r3, #20]
 80015ea:	4a0a      	ldr	r2, [pc, #40]	; (8001614 <I2C_Stop+0x50>)
 80015ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015f0:	6153      	str	r3, [r2, #20]
    delay_ms(4);
 80015f2:	2004      	movs	r0, #4
 80015f4:	f000 f9b0 	bl	8001958 <delay_ms>
    I2C_SDA_SET;
 80015f8:	4b06      	ldr	r3, [pc, #24]	; (8001614 <I2C_Stop+0x50>)
 80015fa:	691b      	ldr	r3, [r3, #16]
 80015fc:	4a05      	ldr	r2, [pc, #20]	; (8001614 <I2C_Stop+0x50>)
 80015fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001602:	6113      	str	r3, [r2, #16]
    I2C_SCL_SET;
 8001604:	4b03      	ldr	r3, [pc, #12]	; (8001614 <I2C_Stop+0x50>)
 8001606:	2240      	movs	r2, #64	; 0x40
 8001608:	611a      	str	r2, [r3, #16]
    delay_ms(4);
 800160a:	2004      	movs	r0, #4
 800160c:	f000 f9a4 	bl	8001958 <delay_ms>
}
 8001610:	bf00      	nop
 8001612:	bd80      	pop	{r7, pc}
 8001614:	40010c00 	.word	0x40010c00

08001618 <I2C_Send_Byte>:

void I2C_Send_Byte(uint8_t txd)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b084      	sub	sp, #16
 800161c:	af00      	add	r7, sp, #0
 800161e:	4603      	mov	r3, r0
 8001620:	71fb      	strb	r3, [r7, #7]
    int i = 0;
 8001622:	2300      	movs	r3, #0
 8001624:	60fb      	str	r3, [r7, #12]
    I2C_SDA_OUT();
 8001626:	4b1f      	ldr	r3, [pc, #124]	; (80016a4 <I2C_Send_Byte+0x8c>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a1e      	ldr	r2, [pc, #120]	; (80016a4 <I2C_Send_Byte+0x8c>)
 800162c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001630:	6013      	str	r3, [r2, #0]
 8001632:	4b1c      	ldr	r3, [pc, #112]	; (80016a4 <I2C_Send_Byte+0x8c>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4a1b      	ldr	r2, [pc, #108]	; (80016a4 <I2C_Send_Byte+0x8c>)
 8001638:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 800163c:	6013      	str	r3, [r2, #0]
    I2C_SCL_RESET;
 800163e:	4b19      	ldr	r3, [pc, #100]	; (80016a4 <I2C_Send_Byte+0x8c>)
 8001640:	2240      	movs	r2, #64	; 0x40
 8001642:	615a      	str	r2, [r3, #20]
    for (i = 0; i < 8; i++)
 8001644:	2300      	movs	r3, #0
 8001646:	60fb      	str	r3, [r7, #12]
 8001648:	e024      	b.n	8001694 <I2C_Send_Byte+0x7c>
    {
        uint8_t send_bit = (txd & 0x80) >> 7;
 800164a:	79fb      	ldrb	r3, [r7, #7]
 800164c:	09db      	lsrs	r3, r3, #7
 800164e:	72fb      	strb	r3, [r7, #11]
        if (send_bit == 1)
 8001650:	7afb      	ldrb	r3, [r7, #11]
 8001652:	2b01      	cmp	r3, #1
 8001654:	d106      	bne.n	8001664 <I2C_Send_Byte+0x4c>
        {
            I2C_SDA_SET;
 8001656:	4b13      	ldr	r3, [pc, #76]	; (80016a4 <I2C_Send_Byte+0x8c>)
 8001658:	691b      	ldr	r3, [r3, #16]
 800165a:	4a12      	ldr	r2, [pc, #72]	; (80016a4 <I2C_Send_Byte+0x8c>)
 800165c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001660:	6113      	str	r3, [r2, #16]
 8001662:	e005      	b.n	8001670 <I2C_Send_Byte+0x58>
        }
        else
        {
            I2C_SDA_RESET;
 8001664:	4b0f      	ldr	r3, [pc, #60]	; (80016a4 <I2C_Send_Byte+0x8c>)
 8001666:	695b      	ldr	r3, [r3, #20]
 8001668:	4a0e      	ldr	r2, [pc, #56]	; (80016a4 <I2C_Send_Byte+0x8c>)
 800166a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800166e:	6153      	str	r3, [r2, #20]
        }
        txd <<= 1;
 8001670:	79fb      	ldrb	r3, [r7, #7]
 8001672:	005b      	lsls	r3, r3, #1
 8001674:	71fb      	strb	r3, [r7, #7]
        delay_ms(2);
 8001676:	2002      	movs	r0, #2
 8001678:	f000 f96e 	bl	8001958 <delay_ms>
        I2C_SCL_SET;
 800167c:	4b09      	ldr	r3, [pc, #36]	; (80016a4 <I2C_Send_Byte+0x8c>)
 800167e:	2240      	movs	r2, #64	; 0x40
 8001680:	611a      	str	r2, [r3, #16]
        delay_ms(2);
 8001682:	2002      	movs	r0, #2
 8001684:	f000 f968 	bl	8001958 <delay_ms>
        I2C_SCL_RESET;
 8001688:	4b06      	ldr	r3, [pc, #24]	; (80016a4 <I2C_Send_Byte+0x8c>)
 800168a:	2240      	movs	r2, #64	; 0x40
 800168c:	615a      	str	r2, [r3, #20]
    for (i = 0; i < 8; i++)
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	3301      	adds	r3, #1
 8001692:	60fb      	str	r3, [r7, #12]
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	2b07      	cmp	r3, #7
 8001698:	ddd7      	ble.n	800164a <I2C_Send_Byte+0x32>
    }
}
 800169a:	bf00      	nop
 800169c:	3710      	adds	r7, #16
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	40010c00 	.word	0x40010c00

080016a8 <I2C_SendACK>:

void I2C_SendACK(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	af00      	add	r7, sp, #0
    I2C_SCL_RESET;
 80016ac:	4b11      	ldr	r3, [pc, #68]	; (80016f4 <I2C_SendACK+0x4c>)
 80016ae:	2240      	movs	r2, #64	; 0x40
 80016b0:	615a      	str	r2, [r3, #20]
    I2C_SDA_OUT();
 80016b2:	4b10      	ldr	r3, [pc, #64]	; (80016f4 <I2C_SendACK+0x4c>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4a0f      	ldr	r2, [pc, #60]	; (80016f4 <I2C_SendACK+0x4c>)
 80016b8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80016bc:	6013      	str	r3, [r2, #0]
 80016be:	4b0d      	ldr	r3, [pc, #52]	; (80016f4 <I2C_SendACK+0x4c>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4a0c      	ldr	r2, [pc, #48]	; (80016f4 <I2C_SendACK+0x4c>)
 80016c4:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 80016c8:	6013      	str	r3, [r2, #0]
    I2C_SDA_RESET;
 80016ca:	4b0a      	ldr	r3, [pc, #40]	; (80016f4 <I2C_SendACK+0x4c>)
 80016cc:	695b      	ldr	r3, [r3, #20]
 80016ce:	4a09      	ldr	r2, [pc, #36]	; (80016f4 <I2C_SendACK+0x4c>)
 80016d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016d4:	6153      	str	r3, [r2, #20]
    delay_ms(2);
 80016d6:	2002      	movs	r0, #2
 80016d8:	f000 f93e 	bl	8001958 <delay_ms>
    I2C_SCL_SET;
 80016dc:	4b05      	ldr	r3, [pc, #20]	; (80016f4 <I2C_SendACK+0x4c>)
 80016de:	2240      	movs	r2, #64	; 0x40
 80016e0:	611a      	str	r2, [r3, #16]
    delay_ms(2);
 80016e2:	2002      	movs	r0, #2
 80016e4:	f000 f938 	bl	8001958 <delay_ms>
    I2C_SCL_RESET;
 80016e8:	4b02      	ldr	r3, [pc, #8]	; (80016f4 <I2C_SendACK+0x4c>)
 80016ea:	2240      	movs	r2, #64	; 0x40
 80016ec:	615a      	str	r2, [r3, #20]
}
 80016ee:	bf00      	nop
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	40010c00 	.word	0x40010c00

080016f8 <I2C_SendNACK>:

void I2C_SendNACK(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0
    I2C_SCL_RESET;
 80016fc:	4b11      	ldr	r3, [pc, #68]	; (8001744 <I2C_SendNACK+0x4c>)
 80016fe:	2240      	movs	r2, #64	; 0x40
 8001700:	615a      	str	r2, [r3, #20]
    I2C_SDA_OUT();
 8001702:	4b10      	ldr	r3, [pc, #64]	; (8001744 <I2C_SendNACK+0x4c>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4a0f      	ldr	r2, [pc, #60]	; (8001744 <I2C_SendNACK+0x4c>)
 8001708:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800170c:	6013      	str	r3, [r2, #0]
 800170e:	4b0d      	ldr	r3, [pc, #52]	; (8001744 <I2C_SendNACK+0x4c>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4a0c      	ldr	r2, [pc, #48]	; (8001744 <I2C_SendNACK+0x4c>)
 8001714:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 8001718:	6013      	str	r3, [r2, #0]
    I2C_SDA_SET;
 800171a:	4b0a      	ldr	r3, [pc, #40]	; (8001744 <I2C_SendNACK+0x4c>)
 800171c:	691b      	ldr	r3, [r3, #16]
 800171e:	4a09      	ldr	r2, [pc, #36]	; (8001744 <I2C_SendNACK+0x4c>)
 8001720:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001724:	6113      	str	r3, [r2, #16]
    delay_ms(2);
 8001726:	2002      	movs	r0, #2
 8001728:	f000 f916 	bl	8001958 <delay_ms>
    I2C_SCL_SET;
 800172c:	4b05      	ldr	r3, [pc, #20]	; (8001744 <I2C_SendNACK+0x4c>)
 800172e:	2240      	movs	r2, #64	; 0x40
 8001730:	611a      	str	r2, [r3, #16]
    delay_ms(2);
 8001732:	2002      	movs	r0, #2
 8001734:	f000 f910 	bl	8001958 <delay_ms>
    I2C_SCL_RESET;
 8001738:	4b02      	ldr	r3, [pc, #8]	; (8001744 <I2C_SendNACK+0x4c>)
 800173a:	2240      	movs	r2, #64	; 0x40
 800173c:	615a      	str	r2, [r3, #20]
}
 800173e:	bf00      	nop
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	40010c00 	.word	0x40010c00

08001748 <I2C_Read_Byte>:

uint8_t I2C_Read_Byte(unsigned char ack)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b084      	sub	sp, #16
 800174c:	af00      	add	r7, sp, #0
 800174e:	4603      	mov	r3, r0
 8001750:	71fb      	strb	r3, [r7, #7]
    int i = 0;
 8001752:	2300      	movs	r3, #0
 8001754:	60fb      	str	r3, [r7, #12]
    uint8_t rec = 0;
 8001756:	2300      	movs	r3, #0
 8001758:	72fb      	strb	r3, [r7, #11]
    I2C_SDA_IN();
 800175a:	4b1d      	ldr	r3, [pc, #116]	; (80017d0 <I2C_Read_Byte+0x88>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4a1c      	ldr	r2, [pc, #112]	; (80017d0 <I2C_Read_Byte+0x88>)
 8001760:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001764:	6013      	str	r3, [r2, #0]
 8001766:	4b1a      	ldr	r3, [pc, #104]	; (80017d0 <I2C_Read_Byte+0x88>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4a19      	ldr	r2, [pc, #100]	; (80017d0 <I2C_Read_Byte+0x88>)
 800176c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001770:	6013      	str	r3, [r2, #0]
    for (i = 0; i < 8; i++)
 8001772:	2300      	movs	r3, #0
 8001774:	60fb      	str	r3, [r7, #12]
 8001776:	e01a      	b.n	80017ae <I2C_Read_Byte+0x66>
    {
        I2C_SCL_RESET;
 8001778:	4b15      	ldr	r3, [pc, #84]	; (80017d0 <I2C_Read_Byte+0x88>)
 800177a:	2240      	movs	r2, #64	; 0x40
 800177c:	615a      	str	r2, [r3, #20]
        delay_ms(2);
 800177e:	2002      	movs	r0, #2
 8001780:	f000 f8ea 	bl	8001958 <delay_ms>
        I2C_SCL_SET;
 8001784:	4b12      	ldr	r3, [pc, #72]	; (80017d0 <I2C_Read_Byte+0x88>)
 8001786:	2240      	movs	r2, #64	; 0x40
 8001788:	611a      	str	r2, [r3, #16]
        delay_ms(2);
 800178a:	2002      	movs	r0, #2
 800178c:	f000 f8e4 	bl	8001958 <delay_ms>
        rec <<= 1;
 8001790:	7afb      	ldrb	r3, [r7, #11]
 8001792:	005b      	lsls	r3, r3, #1
 8001794:	72fb      	strb	r3, [r7, #11]
        if (I2C_SDA_READ)
 8001796:	4b0e      	ldr	r3, [pc, #56]	; (80017d0 <I2C_Read_Byte+0x88>)
 8001798:	689b      	ldr	r3, [r3, #8]
 800179a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d002      	beq.n	80017a8 <I2C_Read_Byte+0x60>
        {
            rec++;
 80017a2:	7afb      	ldrb	r3, [r7, #11]
 80017a4:	3301      	adds	r3, #1
 80017a6:	72fb      	strb	r3, [r7, #11]
    for (i = 0; i < 8; i++)
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	3301      	adds	r3, #1
 80017ac:	60fb      	str	r3, [r7, #12]
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	2b07      	cmp	r3, #7
 80017b2:	dde1      	ble.n	8001778 <I2C_Read_Byte+0x30>
        }
    }
    if (!ack)
 80017b4:	79fb      	ldrb	r3, [r7, #7]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d102      	bne.n	80017c0 <I2C_Read_Byte+0x78>
    {
        I2C_SendACK();
 80017ba:	f7ff ff75 	bl	80016a8 <I2C_SendACK>
 80017be:	e001      	b.n	80017c4 <I2C_Read_Byte+0x7c>
    }
    else
    {
        I2C_SendNACK();
 80017c0:	f7ff ff9a 	bl	80016f8 <I2C_SendNACK>
    }
    return rec;
 80017c4:	7afb      	ldrb	r3, [r7, #11]
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	3710      	adds	r7, #16
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	40010c00 	.word	0x40010c00

080017d4 <I2C_Wait_Ack>:

uint8_t I2C_Wait_Ack(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af00      	add	r7, sp, #0
    uint8_t time = 0;
 80017da:	2300      	movs	r3, #0
 80017dc:	71fb      	strb	r3, [r7, #7]
    I2C_SDA_IN();
 80017de:	4b16      	ldr	r3, [pc, #88]	; (8001838 <I2C_Wait_Ack+0x64>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4a15      	ldr	r2, [pc, #84]	; (8001838 <I2C_Wait_Ack+0x64>)
 80017e4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80017e8:	6013      	str	r3, [r2, #0]
 80017ea:	4b13      	ldr	r3, [pc, #76]	; (8001838 <I2C_Wait_Ack+0x64>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4a12      	ldr	r2, [pc, #72]	; (8001838 <I2C_Wait_Ack+0x64>)
 80017f0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80017f4:	6013      	str	r3, [r2, #0]
    I2C_SDA_SET;
 80017f6:	4b10      	ldr	r3, [pc, #64]	; (8001838 <I2C_Wait_Ack+0x64>)
 80017f8:	691b      	ldr	r3, [r3, #16]
 80017fa:	4a0f      	ldr	r2, [pc, #60]	; (8001838 <I2C_Wait_Ack+0x64>)
 80017fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001800:	6113      	str	r3, [r2, #16]
    delay_ms(1);
 8001802:	2001      	movs	r0, #1
 8001804:	f000 f8a8 	bl	8001958 <delay_ms>
    I2C_SCL_SET;
 8001808:	4b0b      	ldr	r3, [pc, #44]	; (8001838 <I2C_Wait_Ack+0x64>)
 800180a:	2240      	movs	r2, #64	; 0x40
 800180c:	611a      	str	r2, [r3, #16]
    delay_ms(1);
 800180e:	2001      	movs	r0, #1
 8001810:	f000 f8a2 	bl	8001958 <delay_ms>
    while (I2C_SDA_READ)
 8001814:	e002      	b.n	800181c <I2C_Wait_Ack+0x48>
    {
        time++;
 8001816:	79fb      	ldrb	r3, [r7, #7]
 8001818:	3301      	adds	r3, #1
 800181a:	71fb      	strb	r3, [r7, #7]
    while (I2C_SDA_READ)
 800181c:	4b06      	ldr	r3, [pc, #24]	; (8001838 <I2C_Wait_Ack+0x64>)
 800181e:	689b      	ldr	r3, [r3, #8]
 8001820:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001824:	2b00      	cmp	r3, #0
 8001826:	d1f6      	bne.n	8001816 <I2C_Wait_Ack+0x42>
            printf("I2C Bus Timout\r\n");
            I2C_Stop();
            return 0; /* Return 0 to avoid application halt */
        }
    }
    I2C_SCL_RESET;
 8001828:	4b03      	ldr	r3, [pc, #12]	; (8001838 <I2C_Wait_Ack+0x64>)
 800182a:	2240      	movs	r2, #64	; 0x40
 800182c:	615a      	str	r2, [r3, #20]
    return 0;
 800182e:	2300      	movs	r3, #0
}
 8001830:	4618      	mov	r0, r3
 8001832:	3708      	adds	r7, #8
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}
 8001838:	40010c00 	.word	0x40010c00

0800183c <I2C_Write>:
    I2C_Stop();
    delay_ms(2);
}

uint8_t I2C_Write(uint8_t addr, uint8_t reg, uint8_t data)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
 8001842:	4603      	mov	r3, r0
 8001844:	71fb      	strb	r3, [r7, #7]
 8001846:	460b      	mov	r3, r1
 8001848:	71bb      	strb	r3, [r7, #6]
 800184a:	4613      	mov	r3, r2
 800184c:	717b      	strb	r3, [r7, #5]
    I2C_Start();
 800184e:	f7ff fe8f 	bl	8001570 <I2C_Start>

    I2C_Send_Byte(addr | 0);
 8001852:	79fb      	ldrb	r3, [r7, #7]
 8001854:	4618      	mov	r0, r3
 8001856:	f7ff fedf 	bl	8001618 <I2C_Send_Byte>
    if (I2C_Wait_Ack())
 800185a:	f7ff ffbb 	bl	80017d4 <I2C_Wait_Ack>
 800185e:	4603      	mov	r3, r0
 8001860:	2b00      	cmp	r3, #0
 8001862:	d003      	beq.n	800186c <I2C_Write+0x30>
    {
        I2C_Stop();
 8001864:	f7ff feae 	bl	80015c4 <I2C_Stop>
        return 1;
 8001868:	2301      	movs	r3, #1
 800186a:	e01f      	b.n	80018ac <I2C_Write+0x70>
    }
    I2C_Send_Byte(reg);
 800186c:	79bb      	ldrb	r3, [r7, #6]
 800186e:	4618      	mov	r0, r3
 8001870:	f7ff fed2 	bl	8001618 <I2C_Send_Byte>
    if (I2C_Wait_Ack())
 8001874:	f7ff ffae 	bl	80017d4 <I2C_Wait_Ack>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d003      	beq.n	8001886 <I2C_Write+0x4a>
    {
        I2C_Stop();
 800187e:	f7ff fea1 	bl	80015c4 <I2C_Stop>
        return 1;
 8001882:	2301      	movs	r3, #1
 8001884:	e012      	b.n	80018ac <I2C_Write+0x70>
    }
    I2C_Send_Byte(data);
 8001886:	797b      	ldrb	r3, [r7, #5]
 8001888:	4618      	mov	r0, r3
 800188a:	f7ff fec5 	bl	8001618 <I2C_Send_Byte>
    if (I2C_Wait_Ack())
 800188e:	f7ff ffa1 	bl	80017d4 <I2C_Wait_Ack>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d003      	beq.n	80018a0 <I2C_Write+0x64>
    {
        I2C_Stop();
 8001898:	f7ff fe94 	bl	80015c4 <I2C_Stop>
        return 1;
 800189c:	2301      	movs	r3, #1
 800189e:	e005      	b.n	80018ac <I2C_Write+0x70>
    }

    I2C_Stop();
 80018a0:	f7ff fe90 	bl	80015c4 <I2C_Stop>
    delay_ms(2);
 80018a4:	2002      	movs	r0, #2
 80018a6:	f000 f857 	bl	8001958 <delay_ms>
    return 0;
 80018aa:	2300      	movs	r3, #0
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	3708      	adds	r7, #8
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}

080018b4 <I2C_ReadMulti>:
    delay_ms(2);
    return reg;
}

uint8_t I2C_ReadMulti(uint8_t addr, uint8_t reg, uint8_t len, uint8_t *buf)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	603b      	str	r3, [r7, #0]
 80018bc:	4603      	mov	r3, r0
 80018be:	71fb      	strb	r3, [r7, #7]
 80018c0:	460b      	mov	r3, r1
 80018c2:	71bb      	strb	r3, [r7, #6]
 80018c4:	4613      	mov	r3, r2
 80018c6:	717b      	strb	r3, [r7, #5]
    I2C_Start();
 80018c8:	f7ff fe52 	bl	8001570 <I2C_Start>
    I2C_Send_Byte(addr | 0);
 80018cc:	79fb      	ldrb	r3, [r7, #7]
 80018ce:	4618      	mov	r0, r3
 80018d0:	f7ff fea2 	bl	8001618 <I2C_Send_Byte>
    while (I2C_Wait_Ack())
 80018d4:	bf00      	nop
 80018d6:	f7ff ff7d 	bl	80017d4 <I2C_Wait_Ack>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d1fa      	bne.n	80018d6 <I2C_ReadMulti+0x22>
        ;
    I2C_Send_Byte(reg);
 80018e0:	79bb      	ldrb	r3, [r7, #6]
 80018e2:	4618      	mov	r0, r3
 80018e4:	f7ff fe98 	bl	8001618 <I2C_Send_Byte>
    while (I2C_Wait_Ack())
 80018e8:	bf00      	nop
 80018ea:	f7ff ff73 	bl	80017d4 <I2C_Wait_Ack>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d1fa      	bne.n	80018ea <I2C_ReadMulti+0x36>
        ;

    I2C_Start();
 80018f4:	f7ff fe3c 	bl	8001570 <I2C_Start>
    I2C_Send_Byte(addr | 1);
 80018f8:	79fb      	ldrb	r3, [r7, #7]
 80018fa:	f043 0301 	orr.w	r3, r3, #1
 80018fe:	b2db      	uxtb	r3, r3
 8001900:	4618      	mov	r0, r3
 8001902:	f7ff fe89 	bl	8001618 <I2C_Send_Byte>
    while (I2C_Wait_Ack())
 8001906:	bf00      	nop
 8001908:	f7ff ff64 	bl	80017d4 <I2C_Wait_Ack>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	d1fa      	bne.n	8001908 <I2C_ReadMulti+0x54>
        ;

    while (len)
 8001912:	e017      	b.n	8001944 <I2C_ReadMulti+0x90>
    {
        if (len == 1)
 8001914:	797b      	ldrb	r3, [r7, #5]
 8001916:	2b01      	cmp	r3, #1
 8001918:	d107      	bne.n	800192a <I2C_ReadMulti+0x76>
            *buf = I2C_Read_Byte(1);
 800191a:	2001      	movs	r0, #1
 800191c:	f7ff ff14 	bl	8001748 <I2C_Read_Byte>
 8001920:	4603      	mov	r3, r0
 8001922:	461a      	mov	r2, r3
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	701a      	strb	r2, [r3, #0]
 8001928:	e006      	b.n	8001938 <I2C_ReadMulti+0x84>
        else
            *buf = I2C_Read_Byte(0);
 800192a:	2000      	movs	r0, #0
 800192c:	f7ff ff0c 	bl	8001748 <I2C_Read_Byte>
 8001930:	4603      	mov	r3, r0
 8001932:	461a      	mov	r2, r3
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	701a      	strb	r2, [r3, #0]
        len--;
 8001938:	797b      	ldrb	r3, [r7, #5]
 800193a:	3b01      	subs	r3, #1
 800193c:	717b      	strb	r3, [r7, #5]
        buf++;
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	3301      	adds	r3, #1
 8001942:	603b      	str	r3, [r7, #0]
    while (len)
 8001944:	797b      	ldrb	r3, [r7, #5]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d1e4      	bne.n	8001914 <I2C_ReadMulti+0x60>
    }

    I2C_Stop();
 800194a:	f7ff fe3b 	bl	80015c4 <I2C_Stop>
    return 0;
 800194e:	2300      	movs	r3, #0
}
 8001950:	4618      	mov	r0, r3
 8001952:	3708      	adds	r7, #8
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}

08001958 <delay_ms>:
    I2C_Stop();
    return 0;
}

static void delay_ms(uint32_t ms)
{
 8001958:	b480      	push	{r7}
 800195a:	b085      	sub	sp, #20
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
    volatile uint32_t delay = 1000 * ms;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001966:	fb02 f303 	mul.w	r3, r2, r3
 800196a:	60fb      	str	r3, [r7, #12]
    while (delay--)
 800196c:	e003      	b.n	8001976 <delay_ms+0x1e>
    {
        __NOP();
 800196e:	bf00      	nop
        __NOP();
 8001970:	bf00      	nop
        __NOP();
 8001972:	bf00      	nop
        __NOP();
 8001974:	bf00      	nop
    while (delay--)
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	1e5a      	subs	r2, r3, #1
 800197a:	60fa      	str	r2, [r7, #12]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d1f6      	bne.n	800196e <delay_ms+0x16>
    }
}
 8001980:	bf00      	nop
 8001982:	3714      	adds	r7, #20
 8001984:	46bd      	mov	sp, r7
 8001986:	bc80      	pop	{r7}
 8001988:	4770      	bx	lr

0800198a <SHT3x_SendCommand>:
 * @param hi2c 
 * @param command 
 * @return SHT3x_StatusTypeDef 
 */
SHT3x_StatusTypeDef SHT3x_SendCommand(uint8_t *command)
{
 800198a:	b580      	push	{r7, lr}
 800198c:	b084      	sub	sp, #16
 800198e:	af00      	add	r7, sp, #0
 8001990:	6078      	str	r0, [r7, #4]
    uint8_t msb_cmd, lsb_cmd, i2c_status;
    msb_cmd = *command;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	781b      	ldrb	r3, [r3, #0]
 8001996:	73fb      	strb	r3, [r7, #15]
    lsb_cmd = *(command + 1);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	785b      	ldrb	r3, [r3, #1]
 800199c:	73bb      	strb	r3, [r7, #14]
    i2c_status = I2C_Write(SHT3x_I2C_ADDRESS_A, msb_cmd, lsb_cmd);
 800199e:	7bba      	ldrb	r2, [r7, #14]
 80019a0:	7bfb      	ldrb	r3, [r7, #15]
 80019a2:	4619      	mov	r1, r3
 80019a4:	2088      	movs	r0, #136	; 0x88
 80019a6:	f7ff ff49 	bl	800183c <I2C_Write>
 80019aa:	4603      	mov	r3, r0
 80019ac:	737b      	strb	r3, [r7, #13]
    if (i2c_status == 0)
 80019ae:	7b7b      	ldrb	r3, [r7, #13]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d101      	bne.n	80019b8 <SHT3x_SendCommand+0x2e>
    {
        return SHT3x_OK;
 80019b4:	2300      	movs	r3, #0
 80019b6:	e000      	b.n	80019ba <SHT3x_SendCommand+0x30>
    }
    else
    {
        return SHT3x_FAILED;
 80019b8:	2301      	movs	r3, #1
    }
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	3710      	adds	r7, #16
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}

080019c2 <SHT3x_ReadData>:
 * @param hi2c 
 * @param data_buffer 
 * @return SHT3x_StatusTypeDef 
 */
SHT3x_StatusTypeDef SHT3x_ReadData(uint8_t *data_buffer)
{
 80019c2:	b580      	push	{r7, lr}
 80019c4:	b084      	sub	sp, #16
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	6078      	str	r0, [r7, #4]
    uint8_t i2c_status;
    memset(data_buffer, 0, 6);
 80019ca:	2206      	movs	r2, #6
 80019cc:	2100      	movs	r1, #0
 80019ce:	6878      	ldr	r0, [r7, #4]
 80019d0:	f003 feaa 	bl	8005728 <memset>
    i2c_status = I2C_ReadMulti(SHT3x_I2C_ADDRESS_A, 0x00, SHT3x_DATA_LENGTH, data_buffer);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2206      	movs	r2, #6
 80019d8:	2100      	movs	r1, #0
 80019da:	2088      	movs	r0, #136	; 0x88
 80019dc:	f7ff ff6a 	bl	80018b4 <I2C_ReadMulti>
 80019e0:	4603      	mov	r3, r0
 80019e2:	73fb      	strb	r3, [r7, #15]
    if (i2c_status == 0)
 80019e4:	7bfb      	ldrb	r3, [r7, #15]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d101      	bne.n	80019ee <SHT3x_ReadData+0x2c>
    {
        return SHT3x_OK;
 80019ea:	2300      	movs	r3, #0
 80019ec:	e000      	b.n	80019f0 <SHT3x_ReadData+0x2e>
    }
    else
    {
        return SHT3x_FAILED;
 80019ee:	2301      	movs	r3, #1
    }
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	3710      	adds	r7, #16
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}

080019f8 <SHT3x_calculateTemp>:
 * 
 * @param raw_data_buffer 
 * @param temp_buffer 
 */
void SHT3x_calculateTemp(uint8_t *raw_data_buffer, float *temp_buffer)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b084      	sub	sp, #16
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
 8001a00:	6039      	str	r1, [r7, #0]
    uint16_t raw_temp = (uint16_t)((*raw_data_buffer << 8) | *(raw_data_buffer + 1));
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	781b      	ldrb	r3, [r3, #0]
 8001a06:	021b      	lsls	r3, r3, #8
 8001a08:	b21a      	sxth	r2, r3
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	3301      	adds	r3, #1
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	b21b      	sxth	r3, r3
 8001a12:	4313      	orrs	r3, r2
 8001a14:	b21b      	sxth	r3, r3
 8001a16:	81fb      	strh	r3, [r7, #14]
    *temp_buffer = (-45 + 175 * ((float)raw_temp / 65535));
 8001a18:	89fb      	ldrh	r3, [r7, #14]
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f7ff f8ea 	bl	8000bf4 <__aeabi_ui2f>
 8001a20:	4603      	mov	r3, r0
 8001a22:	490b      	ldr	r1, [pc, #44]	; (8001a50 <SHT3x_calculateTemp+0x58>)
 8001a24:	4618      	mov	r0, r3
 8001a26:	f7ff f9f1 	bl	8000e0c <__aeabi_fdiv>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	4909      	ldr	r1, [pc, #36]	; (8001a54 <SHT3x_calculateTemp+0x5c>)
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f7ff f938 	bl	8000ca4 <__aeabi_fmul>
 8001a34:	4603      	mov	r3, r0
 8001a36:	4908      	ldr	r1, [pc, #32]	; (8001a58 <SHT3x_calculateTemp+0x60>)
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f7ff f829 	bl	8000a90 <__aeabi_fsub>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	461a      	mov	r2, r3
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	601a      	str	r2, [r3, #0]
}
 8001a46:	bf00      	nop
 8001a48:	3710      	adds	r7, #16
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	477fff00 	.word	0x477fff00
 8001a54:	432f0000 	.word	0x432f0000
 8001a58:	42340000 	.word	0x42340000

08001a5c <SHT3x_CRCCheck>:
 * 
 * @param raw_data_buffer 
 * @return SHT3x_StatusTypeDef 
 */
SHT3x_StatusTypeDef SHT3x_CRCCheck(uint8_t *raw_data_buffer)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b085      	sub	sp, #20
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
    uint8_t bit;
    uint8_t crc = 0xFF; // calculated checksum
 8001a64:	23ff      	movs	r3, #255	; 0xff
 8001a66:	73bb      	strb	r3, [r7, #14]
    uint8_t byteCtr;    // byte counter

    // calculates 8-Bit checksum with given polynomial
    for (byteCtr = 0; byteCtr < 2; byteCtr++)
 8001a68:	2300      	movs	r3, #0
 8001a6a:	737b      	strb	r3, [r7, #13]
 8001a6c:	e021      	b.n	8001ab2 <SHT3x_CRCCheck+0x56>
    {
        crc ^= (raw_data_buffer[byteCtr]);
 8001a6e:	7b7b      	ldrb	r3, [r7, #13]
 8001a70:	687a      	ldr	r2, [r7, #4]
 8001a72:	4413      	add	r3, r2
 8001a74:	781a      	ldrb	r2, [r3, #0]
 8001a76:	7bbb      	ldrb	r3, [r7, #14]
 8001a78:	4053      	eors	r3, r2
 8001a7a:	73bb      	strb	r3, [r7, #14]
        for (bit = 8; bit > 0; --bit)
 8001a7c:	2308      	movs	r3, #8
 8001a7e:	73fb      	strb	r3, [r7, #15]
 8001a80:	e011      	b.n	8001aa6 <SHT3x_CRCCheck+0x4a>
        {
            if (crc & 0x80)
 8001a82:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	da07      	bge.n	8001a9a <SHT3x_CRCCheck+0x3e>
            {
                crc = (crc << 1) ^ CRC_POLYNOMIAL;
 8001a8a:	7bbb      	ldrb	r3, [r7, #14]
 8001a8c:	005b      	lsls	r3, r3, #1
 8001a8e:	b25b      	sxtb	r3, r3
 8001a90:	f083 0331 	eor.w	r3, r3, #49	; 0x31
 8001a94:	b25b      	sxtb	r3, r3
 8001a96:	73bb      	strb	r3, [r7, #14]
 8001a98:	e002      	b.n	8001aa0 <SHT3x_CRCCheck+0x44>
            }
            else
            {
                crc = (crc << 1);
 8001a9a:	7bbb      	ldrb	r3, [r7, #14]
 8001a9c:	005b      	lsls	r3, r3, #1
 8001a9e:	73bb      	strb	r3, [r7, #14]
        for (bit = 8; bit > 0; --bit)
 8001aa0:	7bfb      	ldrb	r3, [r7, #15]
 8001aa2:	3b01      	subs	r3, #1
 8001aa4:	73fb      	strb	r3, [r7, #15]
 8001aa6:	7bfb      	ldrb	r3, [r7, #15]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d1ea      	bne.n	8001a82 <SHT3x_CRCCheck+0x26>
    for (byteCtr = 0; byteCtr < 2; byteCtr++)
 8001aac:	7b7b      	ldrb	r3, [r7, #13]
 8001aae:	3301      	adds	r3, #1
 8001ab0:	737b      	strb	r3, [r7, #13]
 8001ab2:	7b7b      	ldrb	r3, [r7, #13]
 8001ab4:	2b01      	cmp	r3, #1
 8001ab6:	d9da      	bls.n	8001a6e <SHT3x_CRCCheck+0x12>
            }
        }
    }

    if (crc != *(raw_data_buffer + 2))
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	3302      	adds	r3, #2
 8001abc:	781b      	ldrb	r3, [r3, #0]
 8001abe:	7bba      	ldrb	r2, [r7, #14]
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	d001      	beq.n	8001ac8 <SHT3x_CRCCheck+0x6c>
        return SHT3x_FAILED;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	e000      	b.n	8001aca <SHT3x_CRCCheck+0x6e>
    else
        return SHT3x_OK;
 8001ac8:	2300      	movs	r3, #0
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	3714      	adds	r7, #20
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bc80      	pop	{r7}
 8001ad2:	4770      	bx	lr

08001ad4 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8001adc:	4a07      	ldr	r2, [pc, #28]	; (8001afc <RetargetInit+0x28>)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8001ae2:	4b07      	ldr	r3, [pc, #28]	; (8001b00 <RetargetInit+0x2c>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	6898      	ldr	r0, [r3, #8]
 8001ae8:	2300      	movs	r3, #0
 8001aea:	2202      	movs	r2, #2
 8001aec:	2100      	movs	r1, #0
 8001aee:	f004 faef 	bl	80060d0 <setvbuf>
}
 8001af2:	bf00      	nop
 8001af4:	3708      	adds	r7, #8
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	2000028c 	.word	0x2000028c
 8001b00:	20000010 	.word	0x20000010

08001b04 <_isatty>:

int _isatty(int fd) {
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b082      	sub	sp, #8
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	db04      	blt.n	8001b1c <_isatty+0x18>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2b02      	cmp	r3, #2
 8001b16:	dc01      	bgt.n	8001b1c <_isatty+0x18>
    return 1;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	e005      	b.n	8001b28 <_isatty+0x24>

  errno = EBADF;
 8001b1c:	f003 fdda 	bl	80056d4 <__errno>
 8001b20:	4602      	mov	r2, r0
 8001b22:	2309      	movs	r3, #9
 8001b24:	6013      	str	r3, [r2, #0]
  return 0;
 8001b26:	2300      	movs	r3, #0
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	3708      	adds	r7, #8
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}

08001b30 <_write>:

int _write(int fd, char* ptr, int len) {
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b086      	sub	sp, #24
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	60f8      	str	r0, [r7, #12]
 8001b38:	60b9      	str	r1, [r7, #8]
 8001b3a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	2b01      	cmp	r3, #1
 8001b40:	d002      	beq.n	8001b48 <_write+0x18>
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	2b02      	cmp	r3, #2
 8001b46:	d111      	bne.n	8001b6c <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8001b48:	4b0e      	ldr	r3, [pc, #56]	; (8001b84 <_write+0x54>)
 8001b4a:	6818      	ldr	r0, [r3, #0]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	b29a      	uxth	r2, r3
 8001b50:	f04f 33ff 	mov.w	r3, #4294967295
 8001b54:	68b9      	ldr	r1, [r7, #8]
 8001b56:	f003 f924 	bl	8004da2 <HAL_UART_Transmit>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8001b5e:	7dfb      	ldrb	r3, [r7, #23]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d101      	bne.n	8001b68 <_write+0x38>
      return len;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	e008      	b.n	8001b7a <_write+0x4a>
    else
      return EIO;
 8001b68:	2305      	movs	r3, #5
 8001b6a:	e006      	b.n	8001b7a <_write+0x4a>
  }
  errno = EBADF;
 8001b6c:	f003 fdb2 	bl	80056d4 <__errno>
 8001b70:	4602      	mov	r2, r0
 8001b72:	2309      	movs	r3, #9
 8001b74:	6013      	str	r3, [r2, #0]
  return -1;
 8001b76:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3718      	adds	r7, #24
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	2000028c 	.word	0x2000028c

08001b88 <_close>:

int _close(int fd) {
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	db04      	blt.n	8001ba0 <_close+0x18>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2b02      	cmp	r3, #2
 8001b9a:	dc01      	bgt.n	8001ba0 <_close+0x18>
    return 0;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	e006      	b.n	8001bae <_close+0x26>

  errno = EBADF;
 8001ba0:	f003 fd98 	bl	80056d4 <__errno>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	2309      	movs	r3, #9
 8001ba8:	6013      	str	r3, [r2, #0]
  return -1;
 8001baa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	3708      	adds	r7, #8
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}

08001bb6 <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8001bb6:	b580      	push	{r7, lr}
 8001bb8:	b084      	sub	sp, #16
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	60f8      	str	r0, [r7, #12]
 8001bbe:	60b9      	str	r1, [r7, #8]
 8001bc0:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8001bc2:	f003 fd87 	bl	80056d4 <__errno>
 8001bc6:	4602      	mov	r2, r0
 8001bc8:	2309      	movs	r3, #9
 8001bca:	6013      	str	r3, [r2, #0]
  return -1;
 8001bcc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	3710      	adds	r7, #16
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}

08001bd8 <_read>:

int _read(int fd, char* ptr, int len) {
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b086      	sub	sp, #24
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	60f8      	str	r0, [r7, #12]
 8001be0:	60b9      	str	r1, [r7, #8]
 8001be2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d110      	bne.n	8001c0c <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8001bea:	4b0e      	ldr	r3, [pc, #56]	; (8001c24 <_read+0x4c>)
 8001bec:	6818      	ldr	r0, [r3, #0]
 8001bee:	f04f 33ff 	mov.w	r3, #4294967295
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	68b9      	ldr	r1, [r7, #8]
 8001bf6:	f003 f96d 	bl	8004ed4 <HAL_UART_Receive>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8001bfe:	7dfb      	ldrb	r3, [r7, #23]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d101      	bne.n	8001c08 <_read+0x30>
      return 1;
 8001c04:	2301      	movs	r3, #1
 8001c06:	e008      	b.n	8001c1a <_read+0x42>
    else
      return EIO;
 8001c08:	2305      	movs	r3, #5
 8001c0a:	e006      	b.n	8001c1a <_read+0x42>
  }
  errno = EBADF;
 8001c0c:	f003 fd62 	bl	80056d4 <__errno>
 8001c10:	4602      	mov	r2, r0
 8001c12:	2309      	movs	r3, #9
 8001c14:	6013      	str	r3, [r2, #0]
  return -1;
 8001c16:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3718      	adds	r7, #24
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	2000028c 	.word	0x2000028c

08001c28 <_fstat>:

int _fstat(int fd, struct stat* st) {
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b082      	sub	sp, #8
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
 8001c30:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	db08      	blt.n	8001c4a <_fstat+0x22>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2b02      	cmp	r3, #2
 8001c3c:	dc05      	bgt.n	8001c4a <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c44:	605a      	str	r2, [r3, #4]
    return 0;
 8001c46:	2300      	movs	r3, #0
 8001c48:	e005      	b.n	8001c56 <_fstat+0x2e>
  }

  errno = EBADF;
 8001c4a:	f003 fd43 	bl	80056d4 <__errno>
 8001c4e:	4602      	mov	r2, r0
 8001c50:	2309      	movs	r3, #9
 8001c52:	6013      	str	r3, [r2, #0]
  return 0;
 8001c54:	2300      	movs	r3, #0
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	3708      	adds	r7, #8
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
	...

08001c60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b084      	sub	sp, #16
 8001c64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001c66:	4b19      	ldr	r3, [pc, #100]	; (8001ccc <HAL_MspInit+0x6c>)
 8001c68:	699b      	ldr	r3, [r3, #24]
 8001c6a:	4a18      	ldr	r2, [pc, #96]	; (8001ccc <HAL_MspInit+0x6c>)
 8001c6c:	f043 0301 	orr.w	r3, r3, #1
 8001c70:	6193      	str	r3, [r2, #24]
 8001c72:	4b16      	ldr	r3, [pc, #88]	; (8001ccc <HAL_MspInit+0x6c>)
 8001c74:	699b      	ldr	r3, [r3, #24]
 8001c76:	f003 0301 	and.w	r3, r3, #1
 8001c7a:	60bb      	str	r3, [r7, #8]
 8001c7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c7e:	4b13      	ldr	r3, [pc, #76]	; (8001ccc <HAL_MspInit+0x6c>)
 8001c80:	69db      	ldr	r3, [r3, #28]
 8001c82:	4a12      	ldr	r2, [pc, #72]	; (8001ccc <HAL_MspInit+0x6c>)
 8001c84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c88:	61d3      	str	r3, [r2, #28]
 8001c8a:	4b10      	ldr	r3, [pc, #64]	; (8001ccc <HAL_MspInit+0x6c>)
 8001c8c:	69db      	ldr	r3, [r3, #28]
 8001c8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c92:	607b      	str	r3, [r7, #4]
 8001c94:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001c96:	2200      	movs	r2, #0
 8001c98:	2100      	movs	r1, #0
 8001c9a:	2005      	movs	r0, #5
 8001c9c:	f000 fb37 	bl	800230e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001ca0:	2005      	movs	r0, #5
 8001ca2:	f000 fb50 	bl	8002346 <HAL_NVIC_EnableIRQ>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001ca6:	4b0a      	ldr	r3, [pc, #40]	; (8001cd0 <HAL_MspInit+0x70>)
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	60fb      	str	r3, [r7, #12]
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001cb2:	60fb      	str	r3, [r7, #12]
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001cba:	60fb      	str	r3, [r7, #12]
 8001cbc:	4a04      	ldr	r2, [pc, #16]	; (8001cd0 <HAL_MspInit+0x70>)
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cc2:	bf00      	nop
 8001cc4:	3710      	adds	r7, #16
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	40021000 	.word	0x40021000
 8001cd0:	40010000 	.word	0x40010000

08001cd4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b08c      	sub	sp, #48	; 0x30
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	6879      	ldr	r1, [r7, #4]
 8001ce8:	201e      	movs	r0, #30
 8001cea:	f000 fb10 	bl	800230e <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001cee:	201e      	movs	r0, #30
 8001cf0:	f000 fb29 	bl	8002346 <HAL_NVIC_EnableIRQ>
  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8001cf4:	4b1f      	ldr	r3, [pc, #124]	; (8001d74 <HAL_InitTick+0xa0>)
 8001cf6:	69db      	ldr	r3, [r3, #28]
 8001cf8:	4a1e      	ldr	r2, [pc, #120]	; (8001d74 <HAL_InitTick+0xa0>)
 8001cfa:	f043 0304 	orr.w	r3, r3, #4
 8001cfe:	61d3      	str	r3, [r2, #28]
 8001d00:	4b1c      	ldr	r3, [pc, #112]	; (8001d74 <HAL_InitTick+0xa0>)
 8001d02:	69db      	ldr	r3, [r3, #28]
 8001d04:	f003 0304 	and.w	r3, r3, #4
 8001d08:	60fb      	str	r3, [r7, #12]
 8001d0a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001d0c:	f107 0210 	add.w	r2, r7, #16
 8001d10:	f107 0314 	add.w	r3, r7, #20
 8001d14:	4611      	mov	r1, r2
 8001d16:	4618      	mov	r0, r3
 8001d18:	f002 fdb0 	bl	800487c <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001d1c:	f002 fd86 	bl	800482c <HAL_RCC_GetPCLK1Freq>
 8001d20:	4603      	mov	r3, r0
 8001d22:	005b      	lsls	r3, r3, #1
 8001d24:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001d26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d28:	4a13      	ldr	r2, [pc, #76]	; (8001d78 <HAL_InitTick+0xa4>)
 8001d2a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d2e:	0c9b      	lsrs	r3, r3, #18
 8001d30:	3b01      	subs	r3, #1
 8001d32:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8001d34:	4b11      	ldr	r3, [pc, #68]	; (8001d7c <HAL_InitTick+0xa8>)
 8001d36:	4a12      	ldr	r2, [pc, #72]	; (8001d80 <HAL_InitTick+0xac>)
 8001d38:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000 / 1000) - 1;
 8001d3a:	4b10      	ldr	r3, [pc, #64]	; (8001d7c <HAL_InitTick+0xa8>)
 8001d3c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001d40:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8001d42:	4a0e      	ldr	r2, [pc, #56]	; (8001d7c <HAL_InitTick+0xa8>)
 8001d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d46:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8001d48:	4b0c      	ldr	r3, [pc, #48]	; (8001d7c <HAL_InitTick+0xa8>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d4e:	4b0b      	ldr	r3, [pc, #44]	; (8001d7c <HAL_InitTick+0xa8>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8001d54:	4809      	ldr	r0, [pc, #36]	; (8001d7c <HAL_InitTick+0xa8>)
 8001d56:	f002 fddf 	bl	8004918 <HAL_TIM_Base_Init>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d104      	bne.n	8001d6a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 8001d60:	4806      	ldr	r0, [pc, #24]	; (8001d7c <HAL_InitTick+0xa8>)
 8001d62:	f002 fe0d 	bl	8004980 <HAL_TIM_Base_Start_IT>
 8001d66:	4603      	mov	r3, r0
 8001d68:	e000      	b.n	8001d6c <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	3730      	adds	r7, #48	; 0x30
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	40021000 	.word	0x40021000
 8001d78:	431bde83 	.word	0x431bde83
 8001d7c:	20000290 	.word	0x20000290
 8001d80:	40000800 	.word	0x40000800

08001d84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d84:	b480      	push	{r7}
 8001d86:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001d88:	bf00      	nop
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bc80      	pop	{r7}
 8001d8e:	4770      	bx	lr

08001d90 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d90:	b480      	push	{r7}
 8001d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d94:	e7fe      	b.n	8001d94 <HardFault_Handler+0x4>

08001d96 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d96:	b480      	push	{r7}
 8001d98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d9a:	e7fe      	b.n	8001d9a <MemManage_Handler+0x4>

08001d9c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001da0:	e7fe      	b.n	8001da0 <BusFault_Handler+0x4>

08001da2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001da2:	b480      	push	{r7}
 8001da4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001da6:	e7fe      	b.n	8001da6 <UsageFault_Handler+0x4>

08001da8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001da8:	b480      	push	{r7}
 8001daa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001dac:	bf00      	nop
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bc80      	pop	{r7}
 8001db2:	4770      	bx	lr

08001db4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001db4:	b480      	push	{r7}
 8001db6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001db8:	bf00      	nop
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bc80      	pop	{r7}
 8001dbe:	4770      	bx	lr

08001dc0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001dc4:	bf00      	nop
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bc80      	pop	{r7}
 8001dca:	4770      	bx	lr

08001dcc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	af00      	add	r7, sp, #0

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001dd0:	bf00      	nop
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bc80      	pop	{r7}
 8001dd6:	4770      	bx	lr

08001dd8 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001ddc:	bf00      	nop
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bc80      	pop	{r7}
 8001de2:	4770      	bx	lr

08001de4 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001de8:	4802      	ldr	r0, [pc, #8]	; (8001df4 <DMA1_Channel6_IRQHandler+0x10>)
 8001dea:	f000 fb8b 	bl	8002504 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001dee:	bf00      	nop
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	200002d0 	.word	0x200002d0

08001df8 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001dfc:	4802      	ldr	r0, [pc, #8]	; (8001e08 <DMA1_Channel7_IRQHandler+0x10>)
 8001dfe:	f000 fb81 	bl	8002504 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8001e02:	bf00      	nop
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	20000314 	.word	0x20000314

08001e0c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001e10:	2040      	movs	r0, #64	; 0x40
 8001e12:	f000 fe13 	bl	8002a3c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001e16:	2080      	movs	r0, #128	; 0x80
 8001e18:	f000 fe10 	bl	8002a3c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001e1c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001e20:	f000 fe0c 	bl	8002a3c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001e24:	bf00      	nop
 8001e26:	bd80      	pop	{r7, pc}

08001e28 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001e2c:	4802      	ldr	r0, [pc, #8]	; (8001e38 <TIM4_IRQHandler+0x10>)
 8001e2e:	f002 fdca 	bl	80049c6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001e32:	bf00      	nop
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	20000290 	.word	0x20000290

08001e3c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001e40:	4802      	ldr	r0, [pc, #8]	; (8001e4c <I2C1_EV_IRQHandler+0x10>)
 8001e42:	f000 fe1d 	bl	8002a80 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001e46:	bf00      	nop
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	2000021c 	.word	0x2000021c

08001e50 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001e54:	4802      	ldr	r0, [pc, #8]	; (8001e60 <USART2_IRQHandler+0x10>)
 8001e56:	f003 f8e3 	bl	8005020 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001e5a:	bf00      	nop
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	20000358 	.word	0x20000358

08001e64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b086      	sub	sp, #24
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e6c:	4a14      	ldr	r2, [pc, #80]	; (8001ec0 <_sbrk+0x5c>)
 8001e6e:	4b15      	ldr	r3, [pc, #84]	; (8001ec4 <_sbrk+0x60>)
 8001e70:	1ad3      	subs	r3, r2, r3
 8001e72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e78:	4b13      	ldr	r3, [pc, #76]	; (8001ec8 <_sbrk+0x64>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d102      	bne.n	8001e86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e80:	4b11      	ldr	r3, [pc, #68]	; (8001ec8 <_sbrk+0x64>)
 8001e82:	4a12      	ldr	r2, [pc, #72]	; (8001ecc <_sbrk+0x68>)
 8001e84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e86:	4b10      	ldr	r3, [pc, #64]	; (8001ec8 <_sbrk+0x64>)
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	4413      	add	r3, r2
 8001e8e:	693a      	ldr	r2, [r7, #16]
 8001e90:	429a      	cmp	r2, r3
 8001e92:	d207      	bcs.n	8001ea4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e94:	f003 fc1e 	bl	80056d4 <__errno>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	230c      	movs	r3, #12
 8001e9c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001e9e:	f04f 33ff 	mov.w	r3, #4294967295
 8001ea2:	e009      	b.n	8001eb8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ea4:	4b08      	ldr	r3, [pc, #32]	; (8001ec8 <_sbrk+0x64>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001eaa:	4b07      	ldr	r3, [pc, #28]	; (8001ec8 <_sbrk+0x64>)
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	4413      	add	r3, r2
 8001eb2:	4a05      	ldr	r2, [pc, #20]	; (8001ec8 <_sbrk+0x64>)
 8001eb4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	3718      	adds	r7, #24
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}
 8001ec0:	20005000 	.word	0x20005000
 8001ec4:	00000400 	.word	0x00000400
 8001ec8:	20000210 	.word	0x20000210
 8001ecc:	200003a0 	.word	0x200003a0

08001ed0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001ed4:	4b15      	ldr	r3, [pc, #84]	; (8001f2c <SystemInit+0x5c>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a14      	ldr	r2, [pc, #80]	; (8001f2c <SystemInit+0x5c>)
 8001eda:	f043 0301 	orr.w	r3, r3, #1
 8001ede:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001ee0:	4b12      	ldr	r3, [pc, #72]	; (8001f2c <SystemInit+0x5c>)
 8001ee2:	685a      	ldr	r2, [r3, #4]
 8001ee4:	4911      	ldr	r1, [pc, #68]	; (8001f2c <SystemInit+0x5c>)
 8001ee6:	4b12      	ldr	r3, [pc, #72]	; (8001f30 <SystemInit+0x60>)
 8001ee8:	4013      	ands	r3, r2
 8001eea:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001eec:	4b0f      	ldr	r3, [pc, #60]	; (8001f2c <SystemInit+0x5c>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a0e      	ldr	r2, [pc, #56]	; (8001f2c <SystemInit+0x5c>)
 8001ef2:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001ef6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001efa:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001efc:	4b0b      	ldr	r3, [pc, #44]	; (8001f2c <SystemInit+0x5c>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a0a      	ldr	r2, [pc, #40]	; (8001f2c <SystemInit+0x5c>)
 8001f02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f06:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001f08:	4b08      	ldr	r3, [pc, #32]	; (8001f2c <SystemInit+0x5c>)
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	4a07      	ldr	r2, [pc, #28]	; (8001f2c <SystemInit+0x5c>)
 8001f0e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001f12:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001f14:	4b05      	ldr	r3, [pc, #20]	; (8001f2c <SystemInit+0x5c>)
 8001f16:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001f1a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001f1c:	4b05      	ldr	r3, [pc, #20]	; (8001f34 <SystemInit+0x64>)
 8001f1e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001f22:	609a      	str	r2, [r3, #8]
#endif 
}
 8001f24:	bf00      	nop
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bc80      	pop	{r7}
 8001f2a:	4770      	bx	lr
 8001f2c:	40021000 	.word	0x40021000
 8001f30:	f8ff0000 	.word	0xf8ff0000
 8001f34:	e000ed00 	.word	0xe000ed00

08001f38 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8001f3c:	4b12      	ldr	r3, [pc, #72]	; (8001f88 <MX_USART2_UART_Init+0x50>)
 8001f3e:	4a13      	ldr	r2, [pc, #76]	; (8001f8c <MX_USART2_UART_Init+0x54>)
 8001f40:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001f42:	4b11      	ldr	r3, [pc, #68]	; (8001f88 <MX_USART2_UART_Init+0x50>)
 8001f44:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f48:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001f4a:	4b0f      	ldr	r3, [pc, #60]	; (8001f88 <MX_USART2_UART_Init+0x50>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001f50:	4b0d      	ldr	r3, [pc, #52]	; (8001f88 <MX_USART2_UART_Init+0x50>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001f56:	4b0c      	ldr	r3, [pc, #48]	; (8001f88 <MX_USART2_UART_Init+0x50>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001f5c:	4b0a      	ldr	r3, [pc, #40]	; (8001f88 <MX_USART2_UART_Init+0x50>)
 8001f5e:	220c      	movs	r2, #12
 8001f60:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f62:	4b09      	ldr	r3, [pc, #36]	; (8001f88 <MX_USART2_UART_Init+0x50>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f68:	4b07      	ldr	r3, [pc, #28]	; (8001f88 <MX_USART2_UART_Init+0x50>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001f6e:	4806      	ldr	r0, [pc, #24]	; (8001f88 <MX_USART2_UART_Init+0x50>)
 8001f70:	f002 feca 	bl	8004d08 <HAL_UART_Init>
 8001f74:	4603      	mov	r3, r0
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d003      	beq.n	8001f82 <MX_USART2_UART_Init+0x4a>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001f7a:	212e      	movs	r1, #46	; 0x2e
 8001f7c:	4804      	ldr	r0, [pc, #16]	; (8001f90 <MX_USART2_UART_Init+0x58>)
 8001f7e:	f7ff f9a7 	bl	80012d0 <_Error_Handler>
  }

}
 8001f82:	bf00      	nop
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	20000358 	.word	0x20000358
 8001f8c:	40004400 	.word	0x40004400
 8001f90:	08008128 	.word	0x08008128

08001f94 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b088      	sub	sp, #32
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f9c:	f107 0310 	add.w	r3, r7, #16
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	601a      	str	r2, [r3, #0]
 8001fa4:	605a      	str	r2, [r3, #4]
 8001fa6:	609a      	str	r2, [r3, #8]
 8001fa8:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a49      	ldr	r2, [pc, #292]	; (80020d4 <HAL_UART_MspInit+0x140>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	f040 808a 	bne.w	80020ca <HAL_UART_MspInit+0x136>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001fb6:	4b48      	ldr	r3, [pc, #288]	; (80020d8 <HAL_UART_MspInit+0x144>)
 8001fb8:	69db      	ldr	r3, [r3, #28]
 8001fba:	4a47      	ldr	r2, [pc, #284]	; (80020d8 <HAL_UART_MspInit+0x144>)
 8001fbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fc0:	61d3      	str	r3, [r2, #28]
 8001fc2:	4b45      	ldr	r3, [pc, #276]	; (80020d8 <HAL_UART_MspInit+0x144>)
 8001fc4:	69db      	ldr	r3, [r3, #28]
 8001fc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fca:	60fb      	str	r3, [r7, #12]
 8001fcc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fce:	4b42      	ldr	r3, [pc, #264]	; (80020d8 <HAL_UART_MspInit+0x144>)
 8001fd0:	699b      	ldr	r3, [r3, #24]
 8001fd2:	4a41      	ldr	r2, [pc, #260]	; (80020d8 <HAL_UART_MspInit+0x144>)
 8001fd4:	f043 0304 	orr.w	r3, r3, #4
 8001fd8:	6193      	str	r3, [r2, #24]
 8001fda:	4b3f      	ldr	r3, [pc, #252]	; (80020d8 <HAL_UART_MspInit+0x144>)
 8001fdc:	699b      	ldr	r3, [r3, #24]
 8001fde:	f003 0304 	and.w	r3, r3, #4
 8001fe2:	60bb      	str	r3, [r7, #8]
 8001fe4:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001fe6:	2304      	movs	r3, #4
 8001fe8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fea:	2302      	movs	r3, #2
 8001fec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001fee:	2303      	movs	r3, #3
 8001ff0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ff2:	f107 0310 	add.w	r3, r7, #16
 8001ff6:	4619      	mov	r1, r3
 8001ff8:	4838      	ldr	r0, [pc, #224]	; (80020dc <HAL_UART_MspInit+0x148>)
 8001ffa:	f000 fb95 	bl	8002728 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001ffe:	2308      	movs	r3, #8
 8002000:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002002:	2300      	movs	r3, #0
 8002004:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002006:	2300      	movs	r3, #0
 8002008:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800200a:	f107 0310 	add.w	r3, r7, #16
 800200e:	4619      	mov	r1, r3
 8002010:	4832      	ldr	r0, [pc, #200]	; (80020dc <HAL_UART_MspInit+0x148>)
 8002012:	f000 fb89 	bl	8002728 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8002016:	4b32      	ldr	r3, [pc, #200]	; (80020e0 <HAL_UART_MspInit+0x14c>)
 8002018:	4a32      	ldr	r2, [pc, #200]	; (80020e4 <HAL_UART_MspInit+0x150>)
 800201a:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800201c:	4b30      	ldr	r3, [pc, #192]	; (80020e0 <HAL_UART_MspInit+0x14c>)
 800201e:	2200      	movs	r2, #0
 8002020:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002022:	4b2f      	ldr	r3, [pc, #188]	; (80020e0 <HAL_UART_MspInit+0x14c>)
 8002024:	2200      	movs	r2, #0
 8002026:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002028:	4b2d      	ldr	r3, [pc, #180]	; (80020e0 <HAL_UART_MspInit+0x14c>)
 800202a:	2280      	movs	r2, #128	; 0x80
 800202c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800202e:	4b2c      	ldr	r3, [pc, #176]	; (80020e0 <HAL_UART_MspInit+0x14c>)
 8002030:	2200      	movs	r2, #0
 8002032:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002034:	4b2a      	ldr	r3, [pc, #168]	; (80020e0 <HAL_UART_MspInit+0x14c>)
 8002036:	2200      	movs	r2, #0
 8002038:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 800203a:	4b29      	ldr	r3, [pc, #164]	; (80020e0 <HAL_UART_MspInit+0x14c>)
 800203c:	2220      	movs	r2, #32
 800203e:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002040:	4b27      	ldr	r3, [pc, #156]	; (80020e0 <HAL_UART_MspInit+0x14c>)
 8002042:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8002046:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002048:	4825      	ldr	r0, [pc, #148]	; (80020e0 <HAL_UART_MspInit+0x14c>)
 800204a:	f000 f98b 	bl	8002364 <HAL_DMA_Init>
 800204e:	4603      	mov	r3, r0
 8002050:	2b00      	cmp	r3, #0
 8002052:	d003      	beq.n	800205c <HAL_UART_MspInit+0xc8>
    {
      _Error_Handler(__FILE__, __LINE__);
 8002054:	215a      	movs	r1, #90	; 0x5a
 8002056:	4824      	ldr	r0, [pc, #144]	; (80020e8 <HAL_UART_MspInit+0x154>)
 8002058:	f7ff f93a 	bl	80012d0 <_Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	4a20      	ldr	r2, [pc, #128]	; (80020e0 <HAL_UART_MspInit+0x14c>)
 8002060:	635a      	str	r2, [r3, #52]	; 0x34
 8002062:	4a1f      	ldr	r2, [pc, #124]	; (80020e0 <HAL_UART_MspInit+0x14c>)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8002068:	4b20      	ldr	r3, [pc, #128]	; (80020ec <HAL_UART_MspInit+0x158>)
 800206a:	4a21      	ldr	r2, [pc, #132]	; (80020f0 <HAL_UART_MspInit+0x15c>)
 800206c:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800206e:	4b1f      	ldr	r3, [pc, #124]	; (80020ec <HAL_UART_MspInit+0x158>)
 8002070:	2210      	movs	r2, #16
 8002072:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002074:	4b1d      	ldr	r3, [pc, #116]	; (80020ec <HAL_UART_MspInit+0x158>)
 8002076:	2200      	movs	r2, #0
 8002078:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800207a:	4b1c      	ldr	r3, [pc, #112]	; (80020ec <HAL_UART_MspInit+0x158>)
 800207c:	2280      	movs	r2, #128	; 0x80
 800207e:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002080:	4b1a      	ldr	r3, [pc, #104]	; (80020ec <HAL_UART_MspInit+0x158>)
 8002082:	2200      	movs	r2, #0
 8002084:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002086:	4b19      	ldr	r3, [pc, #100]	; (80020ec <HAL_UART_MspInit+0x158>)
 8002088:	2200      	movs	r2, #0
 800208a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800208c:	4b17      	ldr	r3, [pc, #92]	; (80020ec <HAL_UART_MspInit+0x158>)
 800208e:	2200      	movs	r2, #0
 8002090:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002092:	4b16      	ldr	r3, [pc, #88]	; (80020ec <HAL_UART_MspInit+0x158>)
 8002094:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8002098:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800209a:	4814      	ldr	r0, [pc, #80]	; (80020ec <HAL_UART_MspInit+0x158>)
 800209c:	f000 f962 	bl	8002364 <HAL_DMA_Init>
 80020a0:	4603      	mov	r3, r0
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d003      	beq.n	80020ae <HAL_UART_MspInit+0x11a>
    {
      _Error_Handler(__FILE__, __LINE__);
 80020a6:	216a      	movs	r1, #106	; 0x6a
 80020a8:	480f      	ldr	r0, [pc, #60]	; (80020e8 <HAL_UART_MspInit+0x154>)
 80020aa:	f7ff f911 	bl	80012d0 <_Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	4a0e      	ldr	r2, [pc, #56]	; (80020ec <HAL_UART_MspInit+0x158>)
 80020b2:	631a      	str	r2, [r3, #48]	; 0x30
 80020b4:	4a0d      	ldr	r2, [pc, #52]	; (80020ec <HAL_UART_MspInit+0x158>)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80020ba:	2200      	movs	r2, #0
 80020bc:	2100      	movs	r1, #0
 80020be:	2026      	movs	r0, #38	; 0x26
 80020c0:	f000 f925 	bl	800230e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80020c4:	2026      	movs	r0, #38	; 0x26
 80020c6:	f000 f93e 	bl	8002346 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80020ca:	bf00      	nop
 80020cc:	3720      	adds	r7, #32
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	40004400 	.word	0x40004400
 80020d8:	40021000 	.word	0x40021000
 80020dc:	40010800 	.word	0x40010800
 80020e0:	200002d0 	.word	0x200002d0
 80020e4:	4002006c 	.word	0x4002006c
 80020e8:	08008128 	.word	0x08008128
 80020ec:	20000314 	.word	0x20000314
 80020f0:	40020080 	.word	0x40020080

080020f4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80020f4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80020f6:	e003      	b.n	8002100 <LoopCopyDataInit>

080020f8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80020f8:	4b0b      	ldr	r3, [pc, #44]	; (8002128 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80020fa:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80020fc:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80020fe:	3104      	adds	r1, #4

08002100 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002100:	480a      	ldr	r0, [pc, #40]	; (800212c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002102:	4b0b      	ldr	r3, [pc, #44]	; (8002130 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002104:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002106:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002108:	d3f6      	bcc.n	80020f8 <CopyDataInit>
  ldr r2, =_sbss
 800210a:	4a0a      	ldr	r2, [pc, #40]	; (8002134 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800210c:	e002      	b.n	8002114 <LoopFillZerobss>

0800210e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800210e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002110:	f842 3b04 	str.w	r3, [r2], #4

08002114 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002114:	4b08      	ldr	r3, [pc, #32]	; (8002138 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002116:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002118:	d3f9      	bcc.n	800210e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800211a:	f7ff fed9 	bl	8001ed0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800211e:	f003 fadf 	bl	80056e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002122:	f7fe ffbf 	bl	80010a4 <main>
  bx lr
 8002126:	4770      	bx	lr
  ldr r3, =_sidata
 8002128:	08008430 	.word	0x08008430
  ldr r0, =_sdata
 800212c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002130:	200001e0 	.word	0x200001e0
  ldr r2, =_sbss
 8002134:	200001e0 	.word	0x200001e0
  ldr r3, = _ebss
 8002138:	200003a0 	.word	0x200003a0

0800213c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800213c:	e7fe      	b.n	800213c <ADC1_2_IRQHandler>
	...

08002140 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002144:	4b08      	ldr	r3, [pc, #32]	; (8002168 <HAL_Init+0x28>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a07      	ldr	r2, [pc, #28]	; (8002168 <HAL_Init+0x28>)
 800214a:	f043 0310 	orr.w	r3, r3, #16
 800214e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002150:	2003      	movs	r0, #3
 8002152:	f000 f8d1 	bl	80022f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002156:	2000      	movs	r0, #0
 8002158:	f7ff fdbc 	bl	8001cd4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800215c:	f7ff fd80 	bl	8001c60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002160:	2300      	movs	r3, #0
}
 8002162:	4618      	mov	r0, r3
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	40022000 	.word	0x40022000

0800216c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800216c:	b480      	push	{r7}
 800216e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002170:	4b05      	ldr	r3, [pc, #20]	; (8002188 <HAL_IncTick+0x1c>)
 8002172:	781b      	ldrb	r3, [r3, #0]
 8002174:	461a      	mov	r2, r3
 8002176:	4b05      	ldr	r3, [pc, #20]	; (800218c <HAL_IncTick+0x20>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4413      	add	r3, r2
 800217c:	4a03      	ldr	r2, [pc, #12]	; (800218c <HAL_IncTick+0x20>)
 800217e:	6013      	str	r3, [r2, #0]
}
 8002180:	bf00      	nop
 8002182:	46bd      	mov	sp, r7
 8002184:	bc80      	pop	{r7}
 8002186:	4770      	bx	lr
 8002188:	2000000c 	.word	0x2000000c
 800218c:	20000398 	.word	0x20000398

08002190 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002190:	b480      	push	{r7}
 8002192:	af00      	add	r7, sp, #0
  return uwTick;
 8002194:	4b02      	ldr	r3, [pc, #8]	; (80021a0 <HAL_GetTick+0x10>)
 8002196:	681b      	ldr	r3, [r3, #0]
}
 8002198:	4618      	mov	r0, r3
 800219a:	46bd      	mov	sp, r7
 800219c:	bc80      	pop	{r7}
 800219e:	4770      	bx	lr
 80021a0:	20000398 	.word	0x20000398

080021a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b085      	sub	sp, #20
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	f003 0307 	and.w	r3, r3, #7
 80021b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021b4:	4b0c      	ldr	r3, [pc, #48]	; (80021e8 <__NVIC_SetPriorityGrouping+0x44>)
 80021b6:	68db      	ldr	r3, [r3, #12]
 80021b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021ba:	68ba      	ldr	r2, [r7, #8]
 80021bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80021c0:	4013      	ands	r3, r2
 80021c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80021d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021d6:	4a04      	ldr	r2, [pc, #16]	; (80021e8 <__NVIC_SetPriorityGrouping+0x44>)
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	60d3      	str	r3, [r2, #12]
}
 80021dc:	bf00      	nop
 80021de:	3714      	adds	r7, #20
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bc80      	pop	{r7}
 80021e4:	4770      	bx	lr
 80021e6:	bf00      	nop
 80021e8:	e000ed00 	.word	0xe000ed00

080021ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021ec:	b480      	push	{r7}
 80021ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021f0:	4b04      	ldr	r3, [pc, #16]	; (8002204 <__NVIC_GetPriorityGrouping+0x18>)
 80021f2:	68db      	ldr	r3, [r3, #12]
 80021f4:	0a1b      	lsrs	r3, r3, #8
 80021f6:	f003 0307 	and.w	r3, r3, #7
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bc80      	pop	{r7}
 8002200:	4770      	bx	lr
 8002202:	bf00      	nop
 8002204:	e000ed00 	.word	0xe000ed00

08002208 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002208:	b480      	push	{r7}
 800220a:	b083      	sub	sp, #12
 800220c:	af00      	add	r7, sp, #0
 800220e:	4603      	mov	r3, r0
 8002210:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002212:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002216:	2b00      	cmp	r3, #0
 8002218:	db0b      	blt.n	8002232 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800221a:	79fb      	ldrb	r3, [r7, #7]
 800221c:	f003 021f 	and.w	r2, r3, #31
 8002220:	4906      	ldr	r1, [pc, #24]	; (800223c <__NVIC_EnableIRQ+0x34>)
 8002222:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002226:	095b      	lsrs	r3, r3, #5
 8002228:	2001      	movs	r0, #1
 800222a:	fa00 f202 	lsl.w	r2, r0, r2
 800222e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002232:	bf00      	nop
 8002234:	370c      	adds	r7, #12
 8002236:	46bd      	mov	sp, r7
 8002238:	bc80      	pop	{r7}
 800223a:	4770      	bx	lr
 800223c:	e000e100 	.word	0xe000e100

08002240 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002240:	b480      	push	{r7}
 8002242:	b083      	sub	sp, #12
 8002244:	af00      	add	r7, sp, #0
 8002246:	4603      	mov	r3, r0
 8002248:	6039      	str	r1, [r7, #0]
 800224a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800224c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002250:	2b00      	cmp	r3, #0
 8002252:	db0a      	blt.n	800226a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	b2da      	uxtb	r2, r3
 8002258:	490c      	ldr	r1, [pc, #48]	; (800228c <__NVIC_SetPriority+0x4c>)
 800225a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800225e:	0112      	lsls	r2, r2, #4
 8002260:	b2d2      	uxtb	r2, r2
 8002262:	440b      	add	r3, r1
 8002264:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002268:	e00a      	b.n	8002280 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	b2da      	uxtb	r2, r3
 800226e:	4908      	ldr	r1, [pc, #32]	; (8002290 <__NVIC_SetPriority+0x50>)
 8002270:	79fb      	ldrb	r3, [r7, #7]
 8002272:	f003 030f 	and.w	r3, r3, #15
 8002276:	3b04      	subs	r3, #4
 8002278:	0112      	lsls	r2, r2, #4
 800227a:	b2d2      	uxtb	r2, r2
 800227c:	440b      	add	r3, r1
 800227e:	761a      	strb	r2, [r3, #24]
}
 8002280:	bf00      	nop
 8002282:	370c      	adds	r7, #12
 8002284:	46bd      	mov	sp, r7
 8002286:	bc80      	pop	{r7}
 8002288:	4770      	bx	lr
 800228a:	bf00      	nop
 800228c:	e000e100 	.word	0xe000e100
 8002290:	e000ed00 	.word	0xe000ed00

08002294 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002294:	b480      	push	{r7}
 8002296:	b089      	sub	sp, #36	; 0x24
 8002298:	af00      	add	r7, sp, #0
 800229a:	60f8      	str	r0, [r7, #12]
 800229c:	60b9      	str	r1, [r7, #8]
 800229e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	f003 0307 	and.w	r3, r3, #7
 80022a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022a8:	69fb      	ldr	r3, [r7, #28]
 80022aa:	f1c3 0307 	rsb	r3, r3, #7
 80022ae:	2b04      	cmp	r3, #4
 80022b0:	bf28      	it	cs
 80022b2:	2304      	movcs	r3, #4
 80022b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	3304      	adds	r3, #4
 80022ba:	2b06      	cmp	r3, #6
 80022bc:	d902      	bls.n	80022c4 <NVIC_EncodePriority+0x30>
 80022be:	69fb      	ldr	r3, [r7, #28]
 80022c0:	3b03      	subs	r3, #3
 80022c2:	e000      	b.n	80022c6 <NVIC_EncodePriority+0x32>
 80022c4:	2300      	movs	r3, #0
 80022c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022c8:	f04f 32ff 	mov.w	r2, #4294967295
 80022cc:	69bb      	ldr	r3, [r7, #24]
 80022ce:	fa02 f303 	lsl.w	r3, r2, r3
 80022d2:	43da      	mvns	r2, r3
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	401a      	ands	r2, r3
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022dc:	f04f 31ff 	mov.w	r1, #4294967295
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	fa01 f303 	lsl.w	r3, r1, r3
 80022e6:	43d9      	mvns	r1, r3
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022ec:	4313      	orrs	r3, r2
         );
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3724      	adds	r7, #36	; 0x24
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bc80      	pop	{r7}
 80022f6:	4770      	bx	lr

080022f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b082      	sub	sp, #8
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002300:	6878      	ldr	r0, [r7, #4]
 8002302:	f7ff ff4f 	bl	80021a4 <__NVIC_SetPriorityGrouping>
}
 8002306:	bf00      	nop
 8002308:	3708      	adds	r7, #8
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}

0800230e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800230e:	b580      	push	{r7, lr}
 8002310:	b086      	sub	sp, #24
 8002312:	af00      	add	r7, sp, #0
 8002314:	4603      	mov	r3, r0
 8002316:	60b9      	str	r1, [r7, #8]
 8002318:	607a      	str	r2, [r7, #4]
 800231a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800231c:	2300      	movs	r3, #0
 800231e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002320:	f7ff ff64 	bl	80021ec <__NVIC_GetPriorityGrouping>
 8002324:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002326:	687a      	ldr	r2, [r7, #4]
 8002328:	68b9      	ldr	r1, [r7, #8]
 800232a:	6978      	ldr	r0, [r7, #20]
 800232c:	f7ff ffb2 	bl	8002294 <NVIC_EncodePriority>
 8002330:	4602      	mov	r2, r0
 8002332:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002336:	4611      	mov	r1, r2
 8002338:	4618      	mov	r0, r3
 800233a:	f7ff ff81 	bl	8002240 <__NVIC_SetPriority>
}
 800233e:	bf00      	nop
 8002340:	3718      	adds	r7, #24
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}

08002346 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002346:	b580      	push	{r7, lr}
 8002348:	b082      	sub	sp, #8
 800234a:	af00      	add	r7, sp, #0
 800234c:	4603      	mov	r3, r0
 800234e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002350:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002354:	4618      	mov	r0, r3
 8002356:	f7ff ff57 	bl	8002208 <__NVIC_EnableIRQ>
}
 800235a:	bf00      	nop
 800235c:	3708      	adds	r7, #8
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}
	...

08002364 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002364:	b480      	push	{r7}
 8002366:	b085      	sub	sp, #20
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800236c:	2300      	movs	r3, #0
 800236e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d101      	bne.n	800237a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	e043      	b.n	8002402 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	461a      	mov	r2, r3
 8002380:	4b22      	ldr	r3, [pc, #136]	; (800240c <HAL_DMA_Init+0xa8>)
 8002382:	4413      	add	r3, r2
 8002384:	4a22      	ldr	r2, [pc, #136]	; (8002410 <HAL_DMA_Init+0xac>)
 8002386:	fba2 2303 	umull	r2, r3, r2, r3
 800238a:	091b      	lsrs	r3, r3, #4
 800238c:	009a      	lsls	r2, r3, #2
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	4a1f      	ldr	r2, [pc, #124]	; (8002414 <HAL_DMA_Init+0xb0>)
 8002396:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2202      	movs	r2, #2
 800239c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80023ae:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80023b2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80023bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	68db      	ldr	r3, [r3, #12]
 80023c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	695b      	ldr	r3, [r3, #20]
 80023ce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023d4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	69db      	ldr	r3, [r3, #28]
 80023da:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80023dc:	68fa      	ldr	r2, [r7, #12]
 80023de:	4313      	orrs	r3, r2
 80023e0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	68fa      	ldr	r2, [r7, #12]
 80023e8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2200      	movs	r2, #0
 80023ee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2201      	movs	r2, #1
 80023f4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2200      	movs	r2, #0
 80023fc:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002400:	2300      	movs	r3, #0
}
 8002402:	4618      	mov	r0, r3
 8002404:	3714      	adds	r7, #20
 8002406:	46bd      	mov	sp, r7
 8002408:	bc80      	pop	{r7}
 800240a:	4770      	bx	lr
 800240c:	bffdfff8 	.word	0xbffdfff8
 8002410:	cccccccd 	.word	0xcccccccd
 8002414:	40020000 	.word	0x40020000

08002418 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002418:	b580      	push	{r7, lr}
 800241a:	b084      	sub	sp, #16
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002420:	2300      	movs	r3, #0
 8002422:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800242a:	2b02      	cmp	r3, #2
 800242c:	d005      	beq.n	800243a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2204      	movs	r2, #4
 8002432:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	73fb      	strb	r3, [r7, #15]
 8002438:	e051      	b.n	80024de <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f022 020e 	bic.w	r2, r2, #14
 8002448:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	681a      	ldr	r2, [r3, #0]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f022 0201 	bic.w	r2, r2, #1
 8002458:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a22      	ldr	r2, [pc, #136]	; (80024e8 <HAL_DMA_Abort_IT+0xd0>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d029      	beq.n	80024b8 <HAL_DMA_Abort_IT+0xa0>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a20      	ldr	r2, [pc, #128]	; (80024ec <HAL_DMA_Abort_IT+0xd4>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d022      	beq.n	80024b4 <HAL_DMA_Abort_IT+0x9c>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a1f      	ldr	r2, [pc, #124]	; (80024f0 <HAL_DMA_Abort_IT+0xd8>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d01a      	beq.n	80024ae <HAL_DMA_Abort_IT+0x96>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a1d      	ldr	r2, [pc, #116]	; (80024f4 <HAL_DMA_Abort_IT+0xdc>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d012      	beq.n	80024a8 <HAL_DMA_Abort_IT+0x90>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a1c      	ldr	r2, [pc, #112]	; (80024f8 <HAL_DMA_Abort_IT+0xe0>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d00a      	beq.n	80024a2 <HAL_DMA_Abort_IT+0x8a>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a1a      	ldr	r2, [pc, #104]	; (80024fc <HAL_DMA_Abort_IT+0xe4>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d102      	bne.n	800249c <HAL_DMA_Abort_IT+0x84>
 8002496:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800249a:	e00e      	b.n	80024ba <HAL_DMA_Abort_IT+0xa2>
 800249c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80024a0:	e00b      	b.n	80024ba <HAL_DMA_Abort_IT+0xa2>
 80024a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80024a6:	e008      	b.n	80024ba <HAL_DMA_Abort_IT+0xa2>
 80024a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024ac:	e005      	b.n	80024ba <HAL_DMA_Abort_IT+0xa2>
 80024ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80024b2:	e002      	b.n	80024ba <HAL_DMA_Abort_IT+0xa2>
 80024b4:	2310      	movs	r3, #16
 80024b6:	e000      	b.n	80024ba <HAL_DMA_Abort_IT+0xa2>
 80024b8:	2301      	movs	r3, #1
 80024ba:	4a11      	ldr	r2, [pc, #68]	; (8002500 <HAL_DMA_Abort_IT+0xe8>)
 80024bc:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2201      	movs	r2, #1
 80024c2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2200      	movs	r2, #0
 80024ca:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d003      	beq.n	80024de <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024da:	6878      	ldr	r0, [r7, #4]
 80024dc:	4798      	blx	r3
    } 
  }
  return status;
 80024de:	7bfb      	ldrb	r3, [r7, #15]
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	3710      	adds	r7, #16
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	40020008 	.word	0x40020008
 80024ec:	4002001c 	.word	0x4002001c
 80024f0:	40020030 	.word	0x40020030
 80024f4:	40020044 	.word	0x40020044
 80024f8:	40020058 	.word	0x40020058
 80024fc:	4002006c 	.word	0x4002006c
 8002500:	40020000 	.word	0x40020000

08002504 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b084      	sub	sp, #16
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002520:	2204      	movs	r2, #4
 8002522:	409a      	lsls	r2, r3
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	4013      	ands	r3, r2
 8002528:	2b00      	cmp	r3, #0
 800252a:	d04f      	beq.n	80025cc <HAL_DMA_IRQHandler+0xc8>
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	f003 0304 	and.w	r3, r3, #4
 8002532:	2b00      	cmp	r3, #0
 8002534:	d04a      	beq.n	80025cc <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f003 0320 	and.w	r3, r3, #32
 8002540:	2b00      	cmp	r3, #0
 8002542:	d107      	bne.n	8002554 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f022 0204 	bic.w	r2, r2, #4
 8002552:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a66      	ldr	r2, [pc, #408]	; (80026f4 <HAL_DMA_IRQHandler+0x1f0>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d029      	beq.n	80025b2 <HAL_DMA_IRQHandler+0xae>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a65      	ldr	r2, [pc, #404]	; (80026f8 <HAL_DMA_IRQHandler+0x1f4>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d022      	beq.n	80025ae <HAL_DMA_IRQHandler+0xaa>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a63      	ldr	r2, [pc, #396]	; (80026fc <HAL_DMA_IRQHandler+0x1f8>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d01a      	beq.n	80025a8 <HAL_DMA_IRQHandler+0xa4>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a62      	ldr	r2, [pc, #392]	; (8002700 <HAL_DMA_IRQHandler+0x1fc>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d012      	beq.n	80025a2 <HAL_DMA_IRQHandler+0x9e>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a60      	ldr	r2, [pc, #384]	; (8002704 <HAL_DMA_IRQHandler+0x200>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d00a      	beq.n	800259c <HAL_DMA_IRQHandler+0x98>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a5f      	ldr	r2, [pc, #380]	; (8002708 <HAL_DMA_IRQHandler+0x204>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d102      	bne.n	8002596 <HAL_DMA_IRQHandler+0x92>
 8002590:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002594:	e00e      	b.n	80025b4 <HAL_DMA_IRQHandler+0xb0>
 8002596:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800259a:	e00b      	b.n	80025b4 <HAL_DMA_IRQHandler+0xb0>
 800259c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80025a0:	e008      	b.n	80025b4 <HAL_DMA_IRQHandler+0xb0>
 80025a2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80025a6:	e005      	b.n	80025b4 <HAL_DMA_IRQHandler+0xb0>
 80025a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80025ac:	e002      	b.n	80025b4 <HAL_DMA_IRQHandler+0xb0>
 80025ae:	2340      	movs	r3, #64	; 0x40
 80025b0:	e000      	b.n	80025b4 <HAL_DMA_IRQHandler+0xb0>
 80025b2:	2304      	movs	r3, #4
 80025b4:	4a55      	ldr	r2, [pc, #340]	; (800270c <HAL_DMA_IRQHandler+0x208>)
 80025b6:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025bc:	2b00      	cmp	r3, #0
 80025be:	f000 8094 	beq.w	80026ea <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025c6:	6878      	ldr	r0, [r7, #4]
 80025c8:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80025ca:	e08e      	b.n	80026ea <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d0:	2202      	movs	r2, #2
 80025d2:	409a      	lsls	r2, r3
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	4013      	ands	r3, r2
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d056      	beq.n	800268a <HAL_DMA_IRQHandler+0x186>
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	f003 0302 	and.w	r3, r3, #2
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d051      	beq.n	800268a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f003 0320 	and.w	r3, r3, #32
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d10b      	bne.n	800260c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	681a      	ldr	r2, [r3, #0]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f022 020a 	bic.w	r2, r2, #10
 8002602:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2201      	movs	r2, #1
 8002608:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a38      	ldr	r2, [pc, #224]	; (80026f4 <HAL_DMA_IRQHandler+0x1f0>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d029      	beq.n	800266a <HAL_DMA_IRQHandler+0x166>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a37      	ldr	r2, [pc, #220]	; (80026f8 <HAL_DMA_IRQHandler+0x1f4>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d022      	beq.n	8002666 <HAL_DMA_IRQHandler+0x162>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a35      	ldr	r2, [pc, #212]	; (80026fc <HAL_DMA_IRQHandler+0x1f8>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d01a      	beq.n	8002660 <HAL_DMA_IRQHandler+0x15c>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a34      	ldr	r2, [pc, #208]	; (8002700 <HAL_DMA_IRQHandler+0x1fc>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d012      	beq.n	800265a <HAL_DMA_IRQHandler+0x156>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a32      	ldr	r2, [pc, #200]	; (8002704 <HAL_DMA_IRQHandler+0x200>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d00a      	beq.n	8002654 <HAL_DMA_IRQHandler+0x150>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a31      	ldr	r2, [pc, #196]	; (8002708 <HAL_DMA_IRQHandler+0x204>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d102      	bne.n	800264e <HAL_DMA_IRQHandler+0x14a>
 8002648:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800264c:	e00e      	b.n	800266c <HAL_DMA_IRQHandler+0x168>
 800264e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002652:	e00b      	b.n	800266c <HAL_DMA_IRQHandler+0x168>
 8002654:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002658:	e008      	b.n	800266c <HAL_DMA_IRQHandler+0x168>
 800265a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800265e:	e005      	b.n	800266c <HAL_DMA_IRQHandler+0x168>
 8002660:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002664:	e002      	b.n	800266c <HAL_DMA_IRQHandler+0x168>
 8002666:	2320      	movs	r3, #32
 8002668:	e000      	b.n	800266c <HAL_DMA_IRQHandler+0x168>
 800266a:	2302      	movs	r3, #2
 800266c:	4a27      	ldr	r2, [pc, #156]	; (800270c <HAL_DMA_IRQHandler+0x208>)
 800266e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2200      	movs	r2, #0
 8002674:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800267c:	2b00      	cmp	r3, #0
 800267e:	d034      	beq.n	80026ea <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002684:	6878      	ldr	r0, [r7, #4]
 8002686:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002688:	e02f      	b.n	80026ea <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268e:	2208      	movs	r2, #8
 8002690:	409a      	lsls	r2, r3
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	4013      	ands	r3, r2
 8002696:	2b00      	cmp	r3, #0
 8002698:	d028      	beq.n	80026ec <HAL_DMA_IRQHandler+0x1e8>
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	f003 0308 	and.w	r3, r3, #8
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d023      	beq.n	80026ec <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	681a      	ldr	r2, [r3, #0]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f022 020e 	bic.w	r2, r2, #14
 80026b2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026bc:	2101      	movs	r1, #1
 80026be:	fa01 f202 	lsl.w	r2, r1, r2
 80026c2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2201      	movs	r2, #1
 80026c8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2201      	movs	r2, #1
 80026ce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2200      	movs	r2, #0
 80026d6:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d004      	beq.n	80026ec <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e6:	6878      	ldr	r0, [r7, #4]
 80026e8:	4798      	blx	r3
    }
  }
  return;
 80026ea:	bf00      	nop
 80026ec:	bf00      	nop
}
 80026ee:	3710      	adds	r7, #16
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}
 80026f4:	40020008 	.word	0x40020008
 80026f8:	4002001c 	.word	0x4002001c
 80026fc:	40020030 	.word	0x40020030
 8002700:	40020044 	.word	0x40020044
 8002704:	40020058 	.word	0x40020058
 8002708:	4002006c 	.word	0x4002006c
 800270c:	40020000 	.word	0x40020000

08002710 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002710:	b480      	push	{r7}
 8002712:	b083      	sub	sp, #12
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 800271e:	4618      	mov	r0, r3
 8002720:	370c      	adds	r7, #12
 8002722:	46bd      	mov	sp, r7
 8002724:	bc80      	pop	{r7}
 8002726:	4770      	bx	lr

08002728 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002728:	b480      	push	{r7}
 800272a:	b08b      	sub	sp, #44	; 0x2c
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
 8002730:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002732:	2300      	movs	r3, #0
 8002734:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002736:	2300      	movs	r3, #0
 8002738:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800273a:	e127      	b.n	800298c <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800273c:	2201      	movs	r2, #1
 800273e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002740:	fa02 f303 	lsl.w	r3, r2, r3
 8002744:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	69fa      	ldr	r2, [r7, #28]
 800274c:	4013      	ands	r3, r2
 800274e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002750:	69ba      	ldr	r2, [r7, #24]
 8002752:	69fb      	ldr	r3, [r7, #28]
 8002754:	429a      	cmp	r2, r3
 8002756:	f040 8116 	bne.w	8002986 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	2b12      	cmp	r3, #18
 8002760:	d034      	beq.n	80027cc <HAL_GPIO_Init+0xa4>
 8002762:	2b12      	cmp	r3, #18
 8002764:	d80d      	bhi.n	8002782 <HAL_GPIO_Init+0x5a>
 8002766:	2b02      	cmp	r3, #2
 8002768:	d02b      	beq.n	80027c2 <HAL_GPIO_Init+0x9a>
 800276a:	2b02      	cmp	r3, #2
 800276c:	d804      	bhi.n	8002778 <HAL_GPIO_Init+0x50>
 800276e:	2b00      	cmp	r3, #0
 8002770:	d031      	beq.n	80027d6 <HAL_GPIO_Init+0xae>
 8002772:	2b01      	cmp	r3, #1
 8002774:	d01c      	beq.n	80027b0 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002776:	e048      	b.n	800280a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002778:	2b03      	cmp	r3, #3
 800277a:	d043      	beq.n	8002804 <HAL_GPIO_Init+0xdc>
 800277c:	2b11      	cmp	r3, #17
 800277e:	d01b      	beq.n	80027b8 <HAL_GPIO_Init+0x90>
          break;
 8002780:	e043      	b.n	800280a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002782:	4a89      	ldr	r2, [pc, #548]	; (80029a8 <HAL_GPIO_Init+0x280>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d026      	beq.n	80027d6 <HAL_GPIO_Init+0xae>
 8002788:	4a87      	ldr	r2, [pc, #540]	; (80029a8 <HAL_GPIO_Init+0x280>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d806      	bhi.n	800279c <HAL_GPIO_Init+0x74>
 800278e:	4a87      	ldr	r2, [pc, #540]	; (80029ac <HAL_GPIO_Init+0x284>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d020      	beq.n	80027d6 <HAL_GPIO_Init+0xae>
 8002794:	4a86      	ldr	r2, [pc, #536]	; (80029b0 <HAL_GPIO_Init+0x288>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d01d      	beq.n	80027d6 <HAL_GPIO_Init+0xae>
          break;
 800279a:	e036      	b.n	800280a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800279c:	4a85      	ldr	r2, [pc, #532]	; (80029b4 <HAL_GPIO_Init+0x28c>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d019      	beq.n	80027d6 <HAL_GPIO_Init+0xae>
 80027a2:	4a85      	ldr	r2, [pc, #532]	; (80029b8 <HAL_GPIO_Init+0x290>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d016      	beq.n	80027d6 <HAL_GPIO_Init+0xae>
 80027a8:	4a84      	ldr	r2, [pc, #528]	; (80029bc <HAL_GPIO_Init+0x294>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d013      	beq.n	80027d6 <HAL_GPIO_Init+0xae>
          break;
 80027ae:	e02c      	b.n	800280a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	68db      	ldr	r3, [r3, #12]
 80027b4:	623b      	str	r3, [r7, #32]
          break;
 80027b6:	e028      	b.n	800280a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	68db      	ldr	r3, [r3, #12]
 80027bc:	3304      	adds	r3, #4
 80027be:	623b      	str	r3, [r7, #32]
          break;
 80027c0:	e023      	b.n	800280a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	68db      	ldr	r3, [r3, #12]
 80027c6:	3308      	adds	r3, #8
 80027c8:	623b      	str	r3, [r7, #32]
          break;
 80027ca:	e01e      	b.n	800280a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	68db      	ldr	r3, [r3, #12]
 80027d0:	330c      	adds	r3, #12
 80027d2:	623b      	str	r3, [r7, #32]
          break;
 80027d4:	e019      	b.n	800280a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d102      	bne.n	80027e4 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80027de:	2304      	movs	r3, #4
 80027e0:	623b      	str	r3, [r7, #32]
          break;
 80027e2:	e012      	b.n	800280a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	2b01      	cmp	r3, #1
 80027ea:	d105      	bne.n	80027f8 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80027ec:	2308      	movs	r3, #8
 80027ee:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	69fa      	ldr	r2, [r7, #28]
 80027f4:	611a      	str	r2, [r3, #16]
          break;
 80027f6:	e008      	b.n	800280a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80027f8:	2308      	movs	r3, #8
 80027fa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	69fa      	ldr	r2, [r7, #28]
 8002800:	615a      	str	r2, [r3, #20]
          break;
 8002802:	e002      	b.n	800280a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002804:	2300      	movs	r3, #0
 8002806:	623b      	str	r3, [r7, #32]
          break;
 8002808:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800280a:	69bb      	ldr	r3, [r7, #24]
 800280c:	2bff      	cmp	r3, #255	; 0xff
 800280e:	d801      	bhi.n	8002814 <HAL_GPIO_Init+0xec>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	e001      	b.n	8002818 <HAL_GPIO_Init+0xf0>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	3304      	adds	r3, #4
 8002818:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800281a:	69bb      	ldr	r3, [r7, #24]
 800281c:	2bff      	cmp	r3, #255	; 0xff
 800281e:	d802      	bhi.n	8002826 <HAL_GPIO_Init+0xfe>
 8002820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002822:	009b      	lsls	r3, r3, #2
 8002824:	e002      	b.n	800282c <HAL_GPIO_Init+0x104>
 8002826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002828:	3b08      	subs	r3, #8
 800282a:	009b      	lsls	r3, r3, #2
 800282c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	681a      	ldr	r2, [r3, #0]
 8002832:	210f      	movs	r1, #15
 8002834:	693b      	ldr	r3, [r7, #16]
 8002836:	fa01 f303 	lsl.w	r3, r1, r3
 800283a:	43db      	mvns	r3, r3
 800283c:	401a      	ands	r2, r3
 800283e:	6a39      	ldr	r1, [r7, #32]
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	fa01 f303 	lsl.w	r3, r1, r3
 8002846:	431a      	orrs	r2, r3
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002854:	2b00      	cmp	r3, #0
 8002856:	f000 8096 	beq.w	8002986 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800285a:	4b59      	ldr	r3, [pc, #356]	; (80029c0 <HAL_GPIO_Init+0x298>)
 800285c:	699b      	ldr	r3, [r3, #24]
 800285e:	4a58      	ldr	r2, [pc, #352]	; (80029c0 <HAL_GPIO_Init+0x298>)
 8002860:	f043 0301 	orr.w	r3, r3, #1
 8002864:	6193      	str	r3, [r2, #24]
 8002866:	4b56      	ldr	r3, [pc, #344]	; (80029c0 <HAL_GPIO_Init+0x298>)
 8002868:	699b      	ldr	r3, [r3, #24]
 800286a:	f003 0301 	and.w	r3, r3, #1
 800286e:	60bb      	str	r3, [r7, #8]
 8002870:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002872:	4a54      	ldr	r2, [pc, #336]	; (80029c4 <HAL_GPIO_Init+0x29c>)
 8002874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002876:	089b      	lsrs	r3, r3, #2
 8002878:	3302      	adds	r3, #2
 800287a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800287e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002882:	f003 0303 	and.w	r3, r3, #3
 8002886:	009b      	lsls	r3, r3, #2
 8002888:	220f      	movs	r2, #15
 800288a:	fa02 f303 	lsl.w	r3, r2, r3
 800288e:	43db      	mvns	r3, r3
 8002890:	68fa      	ldr	r2, [r7, #12]
 8002892:	4013      	ands	r3, r2
 8002894:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	4a4b      	ldr	r2, [pc, #300]	; (80029c8 <HAL_GPIO_Init+0x2a0>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d013      	beq.n	80028c6 <HAL_GPIO_Init+0x19e>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	4a4a      	ldr	r2, [pc, #296]	; (80029cc <HAL_GPIO_Init+0x2a4>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d00d      	beq.n	80028c2 <HAL_GPIO_Init+0x19a>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	4a49      	ldr	r2, [pc, #292]	; (80029d0 <HAL_GPIO_Init+0x2a8>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d007      	beq.n	80028be <HAL_GPIO_Init+0x196>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	4a48      	ldr	r2, [pc, #288]	; (80029d4 <HAL_GPIO_Init+0x2ac>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d101      	bne.n	80028ba <HAL_GPIO_Init+0x192>
 80028b6:	2303      	movs	r3, #3
 80028b8:	e006      	b.n	80028c8 <HAL_GPIO_Init+0x1a0>
 80028ba:	2304      	movs	r3, #4
 80028bc:	e004      	b.n	80028c8 <HAL_GPIO_Init+0x1a0>
 80028be:	2302      	movs	r3, #2
 80028c0:	e002      	b.n	80028c8 <HAL_GPIO_Init+0x1a0>
 80028c2:	2301      	movs	r3, #1
 80028c4:	e000      	b.n	80028c8 <HAL_GPIO_Init+0x1a0>
 80028c6:	2300      	movs	r3, #0
 80028c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028ca:	f002 0203 	and.w	r2, r2, #3
 80028ce:	0092      	lsls	r2, r2, #2
 80028d0:	4093      	lsls	r3, r2
 80028d2:	68fa      	ldr	r2, [r7, #12]
 80028d4:	4313      	orrs	r3, r2
 80028d6:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80028d8:	493a      	ldr	r1, [pc, #232]	; (80029c4 <HAL_GPIO_Init+0x29c>)
 80028da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028dc:	089b      	lsrs	r3, r3, #2
 80028de:	3302      	adds	r3, #2
 80028e0:	68fa      	ldr	r2, [r7, #12]
 80028e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d006      	beq.n	8002900 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80028f2:	4b39      	ldr	r3, [pc, #228]	; (80029d8 <HAL_GPIO_Init+0x2b0>)
 80028f4:	681a      	ldr	r2, [r3, #0]
 80028f6:	4938      	ldr	r1, [pc, #224]	; (80029d8 <HAL_GPIO_Init+0x2b0>)
 80028f8:	69bb      	ldr	r3, [r7, #24]
 80028fa:	4313      	orrs	r3, r2
 80028fc:	600b      	str	r3, [r1, #0]
 80028fe:	e006      	b.n	800290e <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002900:	4b35      	ldr	r3, [pc, #212]	; (80029d8 <HAL_GPIO_Init+0x2b0>)
 8002902:	681a      	ldr	r2, [r3, #0]
 8002904:	69bb      	ldr	r3, [r7, #24]
 8002906:	43db      	mvns	r3, r3
 8002908:	4933      	ldr	r1, [pc, #204]	; (80029d8 <HAL_GPIO_Init+0x2b0>)
 800290a:	4013      	ands	r3, r2
 800290c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002916:	2b00      	cmp	r3, #0
 8002918:	d006      	beq.n	8002928 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800291a:	4b2f      	ldr	r3, [pc, #188]	; (80029d8 <HAL_GPIO_Init+0x2b0>)
 800291c:	685a      	ldr	r2, [r3, #4]
 800291e:	492e      	ldr	r1, [pc, #184]	; (80029d8 <HAL_GPIO_Init+0x2b0>)
 8002920:	69bb      	ldr	r3, [r7, #24]
 8002922:	4313      	orrs	r3, r2
 8002924:	604b      	str	r3, [r1, #4]
 8002926:	e006      	b.n	8002936 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002928:	4b2b      	ldr	r3, [pc, #172]	; (80029d8 <HAL_GPIO_Init+0x2b0>)
 800292a:	685a      	ldr	r2, [r3, #4]
 800292c:	69bb      	ldr	r3, [r7, #24]
 800292e:	43db      	mvns	r3, r3
 8002930:	4929      	ldr	r1, [pc, #164]	; (80029d8 <HAL_GPIO_Init+0x2b0>)
 8002932:	4013      	ands	r3, r2
 8002934:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800293e:	2b00      	cmp	r3, #0
 8002940:	d006      	beq.n	8002950 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002942:	4b25      	ldr	r3, [pc, #148]	; (80029d8 <HAL_GPIO_Init+0x2b0>)
 8002944:	689a      	ldr	r2, [r3, #8]
 8002946:	4924      	ldr	r1, [pc, #144]	; (80029d8 <HAL_GPIO_Init+0x2b0>)
 8002948:	69bb      	ldr	r3, [r7, #24]
 800294a:	4313      	orrs	r3, r2
 800294c:	608b      	str	r3, [r1, #8]
 800294e:	e006      	b.n	800295e <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002950:	4b21      	ldr	r3, [pc, #132]	; (80029d8 <HAL_GPIO_Init+0x2b0>)
 8002952:	689a      	ldr	r2, [r3, #8]
 8002954:	69bb      	ldr	r3, [r7, #24]
 8002956:	43db      	mvns	r3, r3
 8002958:	491f      	ldr	r1, [pc, #124]	; (80029d8 <HAL_GPIO_Init+0x2b0>)
 800295a:	4013      	ands	r3, r2
 800295c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002966:	2b00      	cmp	r3, #0
 8002968:	d006      	beq.n	8002978 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800296a:	4b1b      	ldr	r3, [pc, #108]	; (80029d8 <HAL_GPIO_Init+0x2b0>)
 800296c:	68da      	ldr	r2, [r3, #12]
 800296e:	491a      	ldr	r1, [pc, #104]	; (80029d8 <HAL_GPIO_Init+0x2b0>)
 8002970:	69bb      	ldr	r3, [r7, #24]
 8002972:	4313      	orrs	r3, r2
 8002974:	60cb      	str	r3, [r1, #12]
 8002976:	e006      	b.n	8002986 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002978:	4b17      	ldr	r3, [pc, #92]	; (80029d8 <HAL_GPIO_Init+0x2b0>)
 800297a:	68da      	ldr	r2, [r3, #12]
 800297c:	69bb      	ldr	r3, [r7, #24]
 800297e:	43db      	mvns	r3, r3
 8002980:	4915      	ldr	r1, [pc, #84]	; (80029d8 <HAL_GPIO_Init+0x2b0>)
 8002982:	4013      	ands	r3, r2
 8002984:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002988:	3301      	adds	r3, #1
 800298a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	681a      	ldr	r2, [r3, #0]
 8002990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002992:	fa22 f303 	lsr.w	r3, r2, r3
 8002996:	2b00      	cmp	r3, #0
 8002998:	f47f aed0 	bne.w	800273c <HAL_GPIO_Init+0x14>
  }
}
 800299c:	bf00      	nop
 800299e:	372c      	adds	r7, #44	; 0x2c
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bc80      	pop	{r7}
 80029a4:	4770      	bx	lr
 80029a6:	bf00      	nop
 80029a8:	10210000 	.word	0x10210000
 80029ac:	10110000 	.word	0x10110000
 80029b0:	10120000 	.word	0x10120000
 80029b4:	10310000 	.word	0x10310000
 80029b8:	10320000 	.word	0x10320000
 80029bc:	10220000 	.word	0x10220000
 80029c0:	40021000 	.word	0x40021000
 80029c4:	40010000 	.word	0x40010000
 80029c8:	40010800 	.word	0x40010800
 80029cc:	40010c00 	.word	0x40010c00
 80029d0:	40011000 	.word	0x40011000
 80029d4:	40011400 	.word	0x40011400
 80029d8:	40010400 	.word	0x40010400

080029dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029dc:	b480      	push	{r7}
 80029de:	b083      	sub	sp, #12
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
 80029e4:	460b      	mov	r3, r1
 80029e6:	807b      	strh	r3, [r7, #2]
 80029e8:	4613      	mov	r3, r2
 80029ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80029ec:	787b      	ldrb	r3, [r7, #1]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d003      	beq.n	80029fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029f2:	887a      	ldrh	r2, [r7, #2]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80029f8:	e003      	b.n	8002a02 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80029fa:	887b      	ldrh	r3, [r7, #2]
 80029fc:	041a      	lsls	r2, r3, #16
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	611a      	str	r2, [r3, #16]
}
 8002a02:	bf00      	nop
 8002a04:	370c      	adds	r7, #12
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bc80      	pop	{r7}
 8002a0a:	4770      	bx	lr

08002a0c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b083      	sub	sp, #12
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
 8002a14:	460b      	mov	r3, r1
 8002a16:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	68da      	ldr	r2, [r3, #12]
 8002a1c:	887b      	ldrh	r3, [r7, #2]
 8002a1e:	4013      	ands	r3, r2
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d003      	beq.n	8002a2c <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002a24:	887a      	ldrh	r2, [r7, #2]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8002a2a:	e002      	b.n	8002a32 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002a2c:	887a      	ldrh	r2, [r7, #2]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	611a      	str	r2, [r3, #16]
}
 8002a32:	bf00      	nop
 8002a34:	370c      	adds	r7, #12
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bc80      	pop	{r7}
 8002a3a:	4770      	bx	lr

08002a3c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b082      	sub	sp, #8
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	4603      	mov	r3, r0
 8002a44:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002a46:	4b08      	ldr	r3, [pc, #32]	; (8002a68 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a48:	695a      	ldr	r2, [r3, #20]
 8002a4a:	88fb      	ldrh	r3, [r7, #6]
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d006      	beq.n	8002a60 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002a52:	4a05      	ldr	r2, [pc, #20]	; (8002a68 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a54:	88fb      	ldrh	r3, [r7, #6]
 8002a56:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002a58:	88fb      	ldrh	r3, [r7, #6]
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f000 f806 	bl	8002a6c <HAL_GPIO_EXTI_Callback>
  }
}
 8002a60:	bf00      	nop
 8002a62:	3708      	adds	r7, #8
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}
 8002a68:	40010400 	.word	0x40010400

08002a6c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b083      	sub	sp, #12
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	4603      	mov	r3, r0
 8002a74:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002a76:	bf00      	nop
 8002a78:	370c      	adds	r7, #12
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bc80      	pop	{r7}
 8002a7e:	4770      	bx	lr

08002a80 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b088      	sub	sp, #32
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a98:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002aa0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002aa8:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002aaa:	7bfb      	ldrb	r3, [r7, #15]
 8002aac:	2b10      	cmp	r3, #16
 8002aae:	d003      	beq.n	8002ab8 <HAL_I2C_EV_IRQHandler+0x38>
 8002ab0:	7bfb      	ldrb	r3, [r7, #15]
 8002ab2:	2b40      	cmp	r3, #64	; 0x40
 8002ab4:	f040 80b6 	bne.w	8002c24 <HAL_I2C_EV_IRQHandler+0x1a4>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	699b      	ldr	r3, [r3, #24]
 8002abe:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	695b      	ldr	r3, [r3, #20]
 8002ac6:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8002ac8:	69fb      	ldr	r3, [r7, #28]
 8002aca:	f003 0301 	and.w	r3, r3, #1
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d10d      	bne.n	8002aee <HAL_I2C_EV_IRQHandler+0x6e>
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8002ad8:	d003      	beq.n	8002ae2 <HAL_I2C_EV_IRQHandler+0x62>
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8002ae0:	d101      	bne.n	8002ae6 <HAL_I2C_EV_IRQHandler+0x66>
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e000      	b.n	8002ae8 <HAL_I2C_EV_IRQHandler+0x68>
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	2b01      	cmp	r3, #1
 8002aea:	f000 8127 	beq.w	8002d3c <HAL_I2C_EV_IRQHandler+0x2bc>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002aee:	69fb      	ldr	r3, [r7, #28]
 8002af0:	f003 0301 	and.w	r3, r3, #1
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d00c      	beq.n	8002b12 <HAL_I2C_EV_IRQHandler+0x92>
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	0a5b      	lsrs	r3, r3, #9
 8002afc:	f003 0301 	and.w	r3, r3, #1
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d006      	beq.n	8002b12 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8002b04:	6878      	ldr	r0, [r7, #4]
 8002b06:	f001 fa58 	bl	8003fba <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f000 fc56 	bl	80033bc <I2C_Master_SB>
 8002b10:	e087      	b.n	8002c22 <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002b12:	69fb      	ldr	r3, [r7, #28]
 8002b14:	08db      	lsrs	r3, r3, #3
 8002b16:	f003 0301 	and.w	r3, r3, #1
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d009      	beq.n	8002b32 <HAL_I2C_EV_IRQHandler+0xb2>
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	0a5b      	lsrs	r3, r3, #9
 8002b22:	f003 0301 	and.w	r3, r3, #1
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d003      	beq.n	8002b32 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f000 fccb 	bl	80034c6 <I2C_Master_ADD10>
 8002b30:	e077      	b.n	8002c22 <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002b32:	69fb      	ldr	r3, [r7, #28]
 8002b34:	085b      	lsrs	r3, r3, #1
 8002b36:	f003 0301 	and.w	r3, r3, #1
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d009      	beq.n	8002b52 <HAL_I2C_EV_IRQHandler+0xd2>
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	0a5b      	lsrs	r3, r3, #9
 8002b42:	f003 0301 	and.w	r3, r3, #1
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d003      	beq.n	8002b52 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	f000 fce4 	bl	8003518 <I2C_Master_ADDR>
 8002b50:	e067      	b.n	8002c22 <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8002b52:	69bb      	ldr	r3, [r7, #24]
 8002b54:	089b      	lsrs	r3, r3, #2
 8002b56:	f003 0301 	and.w	r3, r3, #1
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d030      	beq.n	8002bc0 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b68:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b6c:	f000 80e8 	beq.w	8002d40 <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002b70:	69fb      	ldr	r3, [r7, #28]
 8002b72:	09db      	lsrs	r3, r3, #7
 8002b74:	f003 0301 	and.w	r3, r3, #1
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d00f      	beq.n	8002b9c <HAL_I2C_EV_IRQHandler+0x11c>
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	0a9b      	lsrs	r3, r3, #10
 8002b80:	f003 0301 	and.w	r3, r3, #1
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d009      	beq.n	8002b9c <HAL_I2C_EV_IRQHandler+0x11c>
 8002b88:	69fb      	ldr	r3, [r7, #28]
 8002b8a:	089b      	lsrs	r3, r3, #2
 8002b8c:	f003 0301 	and.w	r3, r3, #1
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d103      	bne.n	8002b9c <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8002b94:	6878      	ldr	r0, [r7, #4]
 8002b96:	f000 f937 	bl	8002e08 <I2C_MasterTransmit_TXE>
 8002b9a:	e042      	b.n	8002c22 <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002b9c:	69fb      	ldr	r3, [r7, #28]
 8002b9e:	089b      	lsrs	r3, r3, #2
 8002ba0:	f003 0301 	and.w	r3, r3, #1
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	f000 80cb 	beq.w	8002d40 <HAL_I2C_EV_IRQHandler+0x2c0>
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	0a5b      	lsrs	r3, r3, #9
 8002bae:	f003 0301 	and.w	r3, r3, #1
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	f000 80c4 	beq.w	8002d40 <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterTransmit_BTF(hi2c);
 8002bb8:	6878      	ldr	r0, [r7, #4]
 8002bba:	f000 fa1d 	bl	8002ff8 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002bbe:	e0bf      	b.n	8002d40 <HAL_I2C_EV_IRQHandler+0x2c0>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002bca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002bce:	f000 80b7 	beq.w	8002d40 <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002bd2:	69fb      	ldr	r3, [r7, #28]
 8002bd4:	099b      	lsrs	r3, r3, #6
 8002bd6:	f003 0301 	and.w	r3, r3, #1
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d00f      	beq.n	8002bfe <HAL_I2C_EV_IRQHandler+0x17e>
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	0a9b      	lsrs	r3, r3, #10
 8002be2:	f003 0301 	and.w	r3, r3, #1
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d009      	beq.n	8002bfe <HAL_I2C_EV_IRQHandler+0x17e>
 8002bea:	69fb      	ldr	r3, [r7, #28]
 8002bec:	089b      	lsrs	r3, r3, #2
 8002bee:	f003 0301 	and.w	r3, r3, #1
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d103      	bne.n	8002bfe <HAL_I2C_EV_IRQHandler+0x17e>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8002bf6:	6878      	ldr	r0, [r7, #4]
 8002bf8:	f000 fa74 	bl	80030e4 <I2C_MasterReceive_RXNE>
 8002bfc:	e011      	b.n	8002c22 <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002bfe:	69fb      	ldr	r3, [r7, #28]
 8002c00:	089b      	lsrs	r3, r3, #2
 8002c02:	f003 0301 	and.w	r3, r3, #1
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	f000 809a 	beq.w	8002d40 <HAL_I2C_EV_IRQHandler+0x2c0>
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	0a5b      	lsrs	r3, r3, #9
 8002c10:	f003 0301 	and.w	r3, r3, #1
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	f000 8093 	beq.w	8002d40 <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterReceive_BTF(hi2c);
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	f000 fae4 	bl	80031e8 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002c20:	e08e      	b.n	8002d40 <HAL_I2C_EV_IRQHandler+0x2c0>
 8002c22:	e08d      	b.n	8002d40 <HAL_I2C_EV_IRQHandler+0x2c0>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d004      	beq.n	8002c36 <HAL_I2C_EV_IRQHandler+0x1b6>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	695b      	ldr	r3, [r3, #20]
 8002c32:	61fb      	str	r3, [r7, #28]
 8002c34:	e007      	b.n	8002c46 <HAL_I2C_EV_IRQHandler+0x1c6>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	699b      	ldr	r3, [r3, #24]
 8002c3c:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	695b      	ldr	r3, [r3, #20]
 8002c44:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002c46:	69fb      	ldr	r3, [r7, #28]
 8002c48:	085b      	lsrs	r3, r3, #1
 8002c4a:	f003 0301 	and.w	r3, r3, #1
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d012      	beq.n	8002c78 <HAL_I2C_EV_IRQHandler+0x1f8>
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	0a5b      	lsrs	r3, r3, #9
 8002c56:	f003 0301 	and.w	r3, r3, #1
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d00c      	beq.n	8002c78 <HAL_I2C_EV_IRQHandler+0x1f8>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d003      	beq.n	8002c6e <HAL_I2C_EV_IRQHandler+0x1ee>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	699b      	ldr	r3, [r3, #24]
 8002c6c:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8002c6e:	69b9      	ldr	r1, [r7, #24]
 8002c70:	6878      	ldr	r0, [r7, #4]
 8002c72:	f000 fea8 	bl	80039c6 <I2C_Slave_ADDR>
 8002c76:	e066      	b.n	8002d46 <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002c78:	69fb      	ldr	r3, [r7, #28]
 8002c7a:	091b      	lsrs	r3, r3, #4
 8002c7c:	f003 0301 	and.w	r3, r3, #1
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d009      	beq.n	8002c98 <HAL_I2C_EV_IRQHandler+0x218>
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	0a5b      	lsrs	r3, r3, #9
 8002c88:	f003 0301 	and.w	r3, r3, #1
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d003      	beq.n	8002c98 <HAL_I2C_EV_IRQHandler+0x218>
    {
      I2C_Slave_STOPF(hi2c);
 8002c90:	6878      	ldr	r0, [r7, #4]
 8002c92:	f000 fedd 	bl	8003a50 <I2C_Slave_STOPF>
 8002c96:	e056      	b.n	8002d46 <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002c98:	7bbb      	ldrb	r3, [r7, #14]
 8002c9a:	2b21      	cmp	r3, #33	; 0x21
 8002c9c:	d002      	beq.n	8002ca4 <HAL_I2C_EV_IRQHandler+0x224>
 8002c9e:	7bbb      	ldrb	r3, [r7, #14]
 8002ca0:	2b29      	cmp	r3, #41	; 0x29
 8002ca2:	d125      	bne.n	8002cf0 <HAL_I2C_EV_IRQHandler+0x270>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002ca4:	69fb      	ldr	r3, [r7, #28]
 8002ca6:	09db      	lsrs	r3, r3, #7
 8002ca8:	f003 0301 	and.w	r3, r3, #1
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d00f      	beq.n	8002cd0 <HAL_I2C_EV_IRQHandler+0x250>
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	0a9b      	lsrs	r3, r3, #10
 8002cb4:	f003 0301 	and.w	r3, r3, #1
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d009      	beq.n	8002cd0 <HAL_I2C_EV_IRQHandler+0x250>
 8002cbc:	69fb      	ldr	r3, [r7, #28]
 8002cbe:	089b      	lsrs	r3, r3, #2
 8002cc0:	f003 0301 	and.w	r3, r3, #1
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d103      	bne.n	8002cd0 <HAL_I2C_EV_IRQHandler+0x250>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8002cc8:	6878      	ldr	r0, [r7, #4]
 8002cca:	f000 fdc0 	bl	800384e <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002cce:	e039      	b.n	8002d44 <HAL_I2C_EV_IRQHandler+0x2c4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002cd0:	69fb      	ldr	r3, [r7, #28]
 8002cd2:	089b      	lsrs	r3, r3, #2
 8002cd4:	f003 0301 	and.w	r3, r3, #1
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d033      	beq.n	8002d44 <HAL_I2C_EV_IRQHandler+0x2c4>
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	0a5b      	lsrs	r3, r3, #9
 8002ce0:	f003 0301 	and.w	r3, r3, #1
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d02d      	beq.n	8002d44 <HAL_I2C_EV_IRQHandler+0x2c4>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8002ce8:	6878      	ldr	r0, [r7, #4]
 8002cea:	f000 fded 	bl	80038c8 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002cee:	e029      	b.n	8002d44 <HAL_I2C_EV_IRQHandler+0x2c4>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002cf0:	69fb      	ldr	r3, [r7, #28]
 8002cf2:	099b      	lsrs	r3, r3, #6
 8002cf4:	f003 0301 	and.w	r3, r3, #1
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d00f      	beq.n	8002d1c <HAL_I2C_EV_IRQHandler+0x29c>
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	0a9b      	lsrs	r3, r3, #10
 8002d00:	f003 0301 	and.w	r3, r3, #1
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d009      	beq.n	8002d1c <HAL_I2C_EV_IRQHandler+0x29c>
 8002d08:	69fb      	ldr	r3, [r7, #28]
 8002d0a:	089b      	lsrs	r3, r3, #2
 8002d0c:	f003 0301 	and.w	r3, r3, #1
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d103      	bne.n	8002d1c <HAL_I2C_EV_IRQHandler+0x29c>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8002d14:	6878      	ldr	r0, [r7, #4]
 8002d16:	f000 fdf7 	bl	8003908 <I2C_SlaveReceive_RXNE>
 8002d1a:	e014      	b.n	8002d46 <HAL_I2C_EV_IRQHandler+0x2c6>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002d1c:	69fb      	ldr	r3, [r7, #28]
 8002d1e:	089b      	lsrs	r3, r3, #2
 8002d20:	f003 0301 	and.w	r3, r3, #1
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d00e      	beq.n	8002d46 <HAL_I2C_EV_IRQHandler+0x2c6>
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	0a5b      	lsrs	r3, r3, #9
 8002d2c:	f003 0301 	and.w	r3, r3, #1
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d008      	beq.n	8002d46 <HAL_I2C_EV_IRQHandler+0x2c6>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8002d34:	6878      	ldr	r0, [r7, #4]
 8002d36:	f000 fe25 	bl	8003984 <I2C_SlaveReceive_BTF>
 8002d3a:	e004      	b.n	8002d46 <HAL_I2C_EV_IRQHandler+0x2c6>
      return;
 8002d3c:	bf00      	nop
 8002d3e:	e002      	b.n	8002d46 <HAL_I2C_EV_IRQHandler+0x2c6>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002d40:	bf00      	nop
 8002d42:	e000      	b.n	8002d46 <HAL_I2C_EV_IRQHandler+0x2c6>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002d44:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8002d46:	3720      	adds	r7, #32
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}

08002d4c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b083      	sub	sp, #12
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002d54:	bf00      	nop
 8002d56:	370c      	adds	r7, #12
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bc80      	pop	{r7}
 8002d5c:	4770      	bx	lr

08002d5e <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002d5e:	b480      	push	{r7}
 8002d60:	b083      	sub	sp, #12
 8002d62:	af00      	add	r7, sp, #0
 8002d64:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002d66:	bf00      	nop
 8002d68:	370c      	adds	r7, #12
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bc80      	pop	{r7}
 8002d6e:	4770      	bx	lr

08002d70 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b083      	sub	sp, #12
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002d78:	bf00      	nop
 8002d7a:	370c      	adds	r7, #12
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bc80      	pop	{r7}
 8002d80:	4770      	bx	lr

08002d82 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002d82:	b480      	push	{r7}
 8002d84:	b083      	sub	sp, #12
 8002d86:	af00      	add	r7, sp, #0
 8002d88:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002d8a:	bf00      	nop
 8002d8c:	370c      	adds	r7, #12
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bc80      	pop	{r7}
 8002d92:	4770      	bx	lr

08002d94 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b083      	sub	sp, #12
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
 8002d9c:	460b      	mov	r3, r1
 8002d9e:	70fb      	strb	r3, [r7, #3]
 8002da0:	4613      	mov	r3, r2
 8002da2:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002da4:	bf00      	nop
 8002da6:	370c      	adds	r7, #12
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bc80      	pop	{r7}
 8002dac:	4770      	bx	lr

08002dae <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002dae:	b480      	push	{r7}
 8002db0:	b083      	sub	sp, #12
 8002db2:	af00      	add	r7, sp, #0
 8002db4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8002db6:	bf00      	nop
 8002db8:	370c      	adds	r7, #12
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bc80      	pop	{r7}
 8002dbe:	4770      	bx	lr

08002dc0 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b083      	sub	sp, #12
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002dc8:	bf00      	nop
 8002dca:	370c      	adds	r7, #12
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bc80      	pop	{r7}
 8002dd0:	4770      	bx	lr

08002dd2 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002dd2:	b480      	push	{r7}
 8002dd4:	b083      	sub	sp, #12
 8002dd6:	af00      	add	r7, sp, #0
 8002dd8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002dda:	bf00      	nop
 8002ddc:	370c      	adds	r7, #12
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bc80      	pop	{r7}
 8002de2:	4770      	bx	lr

08002de4 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b083      	sub	sp, #12
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002dec:	bf00      	nop
 8002dee:	370c      	adds	r7, #12
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bc80      	pop	{r7}
 8002df4:	4770      	bx	lr

08002df6 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002df6:	b480      	push	{r7}
 8002df8:	b083      	sub	sp, #12
 8002dfa:	af00      	add	r7, sp, #0
 8002dfc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002dfe:	bf00      	nop
 8002e00:	370c      	adds	r7, #12
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bc80      	pop	{r7}
 8002e06:	4770      	bx	lr

08002e08 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b084      	sub	sp, #16
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e16:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002e1e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e24:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d150      	bne.n	8002ed0 <I2C_MasterTransmit_TXE+0xc8>
 8002e2e:	7bfb      	ldrb	r3, [r7, #15]
 8002e30:	2b21      	cmp	r3, #33	; 0x21
 8002e32:	d14d      	bne.n	8002ed0 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	2b08      	cmp	r3, #8
 8002e38:	d01d      	beq.n	8002e76 <I2C_MasterTransmit_TXE+0x6e>
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	2b20      	cmp	r3, #32
 8002e3e:	d01a      	beq.n	8002e76 <I2C_MasterTransmit_TXE+0x6e>
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002e46:	d016      	beq.n	8002e76 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	685a      	ldr	r2, [r3, #4]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002e56:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2211      	movs	r2, #17
 8002e5c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2200      	movs	r2, #0
 8002e62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2220      	movs	r2, #32
 8002e6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002e6e:	6878      	ldr	r0, [r7, #4]
 8002e70:	f7ff ff6c 	bl	8002d4c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002e74:	e0bc      	b.n	8002ff0 <I2C_MasterTransmit_TXE+0x1e8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	685a      	ldr	r2, [r3, #4]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002e84:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e94:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2220      	movs	r2, #32
 8002ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002eaa:	b2db      	uxtb	r3, r3
 8002eac:	2b40      	cmp	r3, #64	; 0x40
 8002eae:	d107      	bne.n	8002ec0 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8002eb8:	6878      	ldr	r0, [r7, #4]
 8002eba:	f7ff ff81 	bl	8002dc0 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002ebe:	e097      	b.n	8002ff0 <I2C_MasterTransmit_TXE+0x1e8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002ec8:	6878      	ldr	r0, [r7, #4]
 8002eca:	f7ff ff3f 	bl	8002d4c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002ece:	e08f      	b.n	8002ff0 <I2C_MasterTransmit_TXE+0x1e8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002ed0:	7bfb      	ldrb	r3, [r7, #15]
 8002ed2:	2b21      	cmp	r3, #33	; 0x21
 8002ed4:	d007      	beq.n	8002ee6 <I2C_MasterTransmit_TXE+0xde>
 8002ed6:	7bbb      	ldrb	r3, [r7, #14]
 8002ed8:	2b40      	cmp	r3, #64	; 0x40
 8002eda:	f040 8089 	bne.w	8002ff0 <I2C_MasterTransmit_TXE+0x1e8>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8002ede:	7bfb      	ldrb	r3, [r7, #15]
 8002ee0:	2b22      	cmp	r3, #34	; 0x22
 8002ee2:	f040 8085 	bne.w	8002ff0 <I2C_MasterTransmit_TXE+0x1e8>
  {
    if (hi2c->XferCount == 0U)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eea:	b29b      	uxth	r3, r3
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d108      	bne.n	8002f02 <I2C_MasterTransmit_TXE+0xfa>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	685a      	ldr	r2, [r3, #4]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002efe:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8002f00:	e076      	b.n	8002ff0 <I2C_MasterTransmit_TXE+0x1e8>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	2b40      	cmp	r3, #64	; 0x40
 8002f0c:	d15d      	bne.n	8002fca <I2C_MasterTransmit_TXE+0x1c2>
        if (hi2c->EventCount == 0U)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d11d      	bne.n	8002f52 <I2C_MasterTransmit_TXE+0x14a>
          if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f1a:	2b01      	cmp	r3, #1
 8002f1c:	d10b      	bne.n	8002f36 <I2C_MasterTransmit_TXE+0x12e>
            hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f22:	b2da      	uxtb	r2, r3
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	611a      	str	r2, [r3, #16]
            hi2c->EventCount += 2U;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f2e:	1c9a      	adds	r2, r3, #2
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002f34:	e05c      	b.n	8002ff0 <I2C_MasterTransmit_TXE+0x1e8>
            hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f3a:	b29b      	uxth	r3, r3
 8002f3c:	121b      	asrs	r3, r3, #8
 8002f3e:	b2da      	uxtb	r2, r3
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	611a      	str	r2, [r3, #16]
            hi2c->EventCount++;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f4a:	1c5a      	adds	r2, r3, #1
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002f50:	e04e      	b.n	8002ff0 <I2C_MasterTransmit_TXE+0x1e8>
        else if (hi2c->EventCount == 1U)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	d10b      	bne.n	8002f72 <I2C_MasterTransmit_TXE+0x16a>
          hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f5e:	b2da      	uxtb	r2, r3
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	611a      	str	r2, [r3, #16]
          hi2c->EventCount++;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f6a:	1c5a      	adds	r2, r3, #1
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002f70:	e03e      	b.n	8002ff0 <I2C_MasterTransmit_TXE+0x1e8>
        else if (hi2c->EventCount == 2U)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f76:	2b02      	cmp	r3, #2
 8002f78:	d13a      	bne.n	8002ff0 <I2C_MasterTransmit_TXE+0x1e8>
          if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	2b22      	cmp	r3, #34	; 0x22
 8002f84:	d108      	bne.n	8002f98 <I2C_MasterTransmit_TXE+0x190>
            hi2c->Instance->CR1 |= I2C_CR1_START;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	681a      	ldr	r2, [r3, #0]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f94:	601a      	str	r2, [r3, #0]
}
 8002f96:	e02b      	b.n	8002ff0 <I2C_MasterTransmit_TXE+0x1e8>
          else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f9e:	b2db      	uxtb	r3, r3
 8002fa0:	2b21      	cmp	r3, #33	; 0x21
 8002fa2:	d125      	bne.n	8002ff0 <I2C_MasterTransmit_TXE+0x1e8>
            hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa8:	781a      	ldrb	r2, [r3, #0]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	611a      	str	r2, [r3, #16]
            hi2c->pBuffPtr++;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb4:	1c5a      	adds	r2, r3, #1
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	625a      	str	r2, [r3, #36]	; 0x24
            hi2c->XferCount--;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fbe:	b29b      	uxth	r3, r3
 8002fc0:	3b01      	subs	r3, #1
 8002fc2:	b29a      	uxth	r2, r3
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002fc8:	e012      	b.n	8002ff0 <I2C_MasterTransmit_TXE+0x1e8>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fce:	781a      	ldrb	r2, [r3, #0]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fda:	1c5a      	adds	r2, r3, #1
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fe4:	b29b      	uxth	r3, r3
 8002fe6:	3b01      	subs	r3, #1
 8002fe8:	b29a      	uxth	r2, r3
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002fee:	e7ff      	b.n	8002ff0 <I2C_MasterTransmit_TXE+0x1e8>
 8002ff0:	bf00      	nop
 8002ff2:	3710      	adds	r7, #16
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}

08002ff8 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b084      	sub	sp, #16
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003004:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800300c:	b2db      	uxtb	r3, r3
 800300e:	2b21      	cmp	r3, #33	; 0x21
 8003010:	d164      	bne.n	80030dc <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003016:	b29b      	uxth	r3, r3
 8003018:	2b00      	cmp	r3, #0
 800301a:	d012      	beq.n	8003042 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003020:	781a      	ldrb	r2, [r3, #0]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800302c:	1c5a      	adds	r2, r3, #1
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003036:	b29b      	uxth	r3, r3
 8003038:	3b01      	subs	r3, #1
 800303a:	b29a      	uxth	r2, r3
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	855a      	strh	r2, [r3, #42]	; 0x2a
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
        }
      }
    }
  }
}
 8003040:	e04c      	b.n	80030dc <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	2b08      	cmp	r3, #8
 8003046:	d01d      	beq.n	8003084 <I2C_MasterTransmit_BTF+0x8c>
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	2b20      	cmp	r3, #32
 800304c:	d01a      	beq.n	8003084 <I2C_MasterTransmit_BTF+0x8c>
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003054:	d016      	beq.n	8003084 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	685a      	ldr	r2, [r3, #4]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003064:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2211      	movs	r2, #17
 800306a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2200      	movs	r2, #0
 8003070:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2220      	movs	r2, #32
 8003078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800307c:	6878      	ldr	r0, [r7, #4]
 800307e:	f7ff fe65 	bl	8002d4c <HAL_I2C_MasterTxCpltCallback>
}
 8003082:	e02b      	b.n	80030dc <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	685a      	ldr	r2, [r3, #4]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003092:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	681a      	ldr	r2, [r3, #0]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030a2:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2200      	movs	r2, #0
 80030a8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2220      	movs	r2, #32
 80030ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	2b40      	cmp	r3, #64	; 0x40
 80030bc:	d107      	bne.n	80030ce <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2200      	movs	r2, #0
 80030c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80030c6:	6878      	ldr	r0, [r7, #4]
 80030c8:	f7ff fe7a 	bl	8002dc0 <HAL_I2C_MemTxCpltCallback>
}
 80030cc:	e006      	b.n	80030dc <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2200      	movs	r2, #0
 80030d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80030d6:	6878      	ldr	r0, [r7, #4]
 80030d8:	f7ff fe38 	bl	8002d4c <HAL_I2C_MasterTxCpltCallback>
}
 80030dc:	bf00      	nop
 80030de:	3710      	adds	r7, #16
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd80      	pop	{r7, pc}

080030e4 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b084      	sub	sp, #16
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030f2:	b2db      	uxtb	r3, r3
 80030f4:	2b22      	cmp	r3, #34	; 0x22
 80030f6:	d173      	bne.n	80031e0 <I2C_MasterReceive_RXNE+0xfc>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030fc:	b29b      	uxth	r3, r3
 80030fe:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2b03      	cmp	r3, #3
 8003104:	d920      	bls.n	8003148 <I2C_MasterReceive_RXNE+0x64>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	691a      	ldr	r2, [r3, #16]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003110:	b2d2      	uxtb	r2, r2
 8003112:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003118:	1c5a      	adds	r2, r3, #1
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003122:	b29b      	uxth	r3, r3
 8003124:	3b01      	subs	r3, #1
 8003126:	b29a      	uxth	r2, r3
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003130:	b29b      	uxth	r3, r3
 8003132:	2b03      	cmp	r3, #3
 8003134:	d154      	bne.n	80031e0 <I2C_MasterReceive_RXNE+0xfc>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	685a      	ldr	r2, [r3, #4]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003144:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8003146:	e04b      	b.n	80031e0 <I2C_MasterReceive_RXNE+0xfc>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800314c:	2b02      	cmp	r3, #2
 800314e:	d047      	beq.n	80031e0 <I2C_MasterReceive_RXNE+0xfc>
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2b01      	cmp	r3, #1
 8003154:	d002      	beq.n	800315c <I2C_MasterReceive_RXNE+0x78>
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d141      	bne.n	80031e0 <I2C_MasterReceive_RXNE+0xfc>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	681a      	ldr	r2, [r3, #0]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800316a:	601a      	str	r2, [r3, #0]
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	685a      	ldr	r2, [r3, #4]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800317a:	605a      	str	r2, [r3, #4]
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	691a      	ldr	r2, [r3, #16]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003186:	b2d2      	uxtb	r2, r2
 8003188:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800318e:	1c5a      	adds	r2, r3, #1
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003198:	b29b      	uxth	r3, r3
 800319a:	3b01      	subs	r3, #1
 800319c:	b29a      	uxth	r2, r3
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->State = HAL_I2C_STATE_READY;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2220      	movs	r2, #32
 80031a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80031b0:	b2db      	uxtb	r3, r3
 80031b2:	2b40      	cmp	r3, #64	; 0x40
 80031b4:	d10a      	bne.n	80031cc <I2C_MasterReceive_RXNE+0xe8>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2200      	movs	r2, #0
 80031ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2200      	movs	r2, #0
 80031c2:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 80031c4:	6878      	ldr	r0, [r7, #4]
 80031c6:	f7ff fe04 	bl	8002dd2 <HAL_I2C_MemRxCpltCallback>
}
 80031ca:	e009      	b.n	80031e0 <I2C_MasterReceive_RXNE+0xfc>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2200      	movs	r2, #0
 80031d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2212      	movs	r2, #18
 80031d8:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	f7ff fdbf 	bl	8002d5e <HAL_I2C_MasterRxCpltCallback>
}
 80031e0:	bf00      	nop
 80031e2:	3710      	adds	r7, #16
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}

080031e8 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b084      	sub	sp, #16
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031f4:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031fa:	b29b      	uxth	r3, r3
 80031fc:	2b04      	cmp	r3, #4
 80031fe:	d11b      	bne.n	8003238 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	685a      	ldr	r2, [r3, #4]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800320e:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	691a      	ldr	r2, [r3, #16]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800321a:	b2d2      	uxtb	r2, r2
 800321c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003222:	1c5a      	adds	r2, r3, #1
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800322c:	b29b      	uxth	r3, r3
 800322e:	3b01      	subs	r3, #1
 8003230:	b29a      	uxth	r2, r3
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003236:	e0bd      	b.n	80033b4 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800323c:	b29b      	uxth	r3, r3
 800323e:	2b03      	cmp	r3, #3
 8003240:	d129      	bne.n	8003296 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	685a      	ldr	r2, [r3, #4]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003250:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	2b04      	cmp	r3, #4
 8003256:	d00a      	beq.n	800326e <I2C_MasterReceive_BTF+0x86>
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	2b02      	cmp	r3, #2
 800325c:	d007      	beq.n	800326e <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	681a      	ldr	r2, [r3, #0]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800326c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	691a      	ldr	r2, [r3, #16]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003278:	b2d2      	uxtb	r2, r2
 800327a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003280:	1c5a      	adds	r2, r3, #1
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800328a:	b29b      	uxth	r3, r3
 800328c:	3b01      	subs	r3, #1
 800328e:	b29a      	uxth	r2, r3
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003294:	e08e      	b.n	80033b4 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800329a:	b29b      	uxth	r3, r3
 800329c:	2b02      	cmp	r3, #2
 800329e:	d176      	bne.n	800338e <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	2b01      	cmp	r3, #1
 80032a4:	d002      	beq.n	80032ac <I2C_MasterReceive_BTF+0xc4>
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	2b10      	cmp	r3, #16
 80032aa:	d108      	bne.n	80032be <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032ba:	601a      	str	r2, [r3, #0]
 80032bc:	e019      	b.n	80032f2 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	2b04      	cmp	r3, #4
 80032c2:	d002      	beq.n	80032ca <I2C_MasterReceive_BTF+0xe2>
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	2b02      	cmp	r3, #2
 80032c8:	d108      	bne.n	80032dc <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	681a      	ldr	r2, [r3, #0]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80032d8:	601a      	str	r2, [r3, #0]
 80032da:	e00a      	b.n	80032f2 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	2b10      	cmp	r3, #16
 80032e0:	d007      	beq.n	80032f2 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	681a      	ldr	r2, [r3, #0]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032f0:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	691a      	ldr	r2, [r3, #16]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032fc:	b2d2      	uxtb	r2, r2
 80032fe:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003304:	1c5a      	adds	r2, r3, #1
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800330e:	b29b      	uxth	r3, r3
 8003310:	3b01      	subs	r3, #1
 8003312:	b29a      	uxth	r2, r3
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	691a      	ldr	r2, [r3, #16]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003322:	b2d2      	uxtb	r2, r2
 8003324:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800332a:	1c5a      	adds	r2, r3, #1
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003334:	b29b      	uxth	r3, r3
 8003336:	3b01      	subs	r3, #1
 8003338:	b29a      	uxth	r2, r3
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	685a      	ldr	r2, [r3, #4]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800334c:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2220      	movs	r2, #32
 8003352:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800335c:	b2db      	uxtb	r3, r3
 800335e:	2b40      	cmp	r3, #64	; 0x40
 8003360:	d10a      	bne.n	8003378 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2200      	movs	r2, #0
 8003366:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2200      	movs	r2, #0
 800336e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003370:	6878      	ldr	r0, [r7, #4]
 8003372:	f7ff fd2e 	bl	8002dd2 <HAL_I2C_MemRxCpltCallback>
}
 8003376:	e01d      	b.n	80033b4 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2200      	movs	r2, #0
 800337c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2212      	movs	r2, #18
 8003384:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003386:	6878      	ldr	r0, [r7, #4]
 8003388:	f7ff fce9 	bl	8002d5e <HAL_I2C_MasterRxCpltCallback>
}
 800338c:	e012      	b.n	80033b4 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	691a      	ldr	r2, [r3, #16]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003398:	b2d2      	uxtb	r2, r2
 800339a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a0:	1c5a      	adds	r2, r3, #1
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033aa:	b29b      	uxth	r3, r3
 80033ac:	3b01      	subs	r3, #1
 80033ae:	b29a      	uxth	r2, r3
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80033b4:	bf00      	nop
 80033b6:	3710      	adds	r7, #16
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd80      	pop	{r7, pc}

080033bc <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80033bc:	b480      	push	{r7}
 80033be:	b083      	sub	sp, #12
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80033ca:	b2db      	uxtb	r3, r3
 80033cc:	2b40      	cmp	r3, #64	; 0x40
 80033ce:	d117      	bne.n	8003400 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d109      	bne.n	80033ec <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033dc:	b2db      	uxtb	r3, r3
 80033de:	461a      	mov	r2, r3
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80033e8:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80033ea:	e067      	b.n	80034bc <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	f043 0301 	orr.w	r3, r3, #1
 80033f6:	b2da      	uxtb	r2, r3
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	611a      	str	r2, [r3, #16]
}
 80033fe:	e05d      	b.n	80034bc <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	691b      	ldr	r3, [r3, #16]
 8003404:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003408:	d133      	bne.n	8003472 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003410:	b2db      	uxtb	r3, r3
 8003412:	2b21      	cmp	r3, #33	; 0x21
 8003414:	d109      	bne.n	800342a <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800341a:	b2db      	uxtb	r3, r3
 800341c:	461a      	mov	r2, r3
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003426:	611a      	str	r2, [r3, #16]
 8003428:	e008      	b.n	800343c <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800342e:	b2db      	uxtb	r3, r3
 8003430:	f043 0301 	orr.w	r3, r3, #1
 8003434:	b2da      	uxtb	r2, r3
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	611a      	str	r2, [r3, #16]
      if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003440:	2b00      	cmp	r3, #0
 8003442:	d103      	bne.n	800344c <I2C_Master_SB+0x90>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003448:	2b00      	cmp	r3, #0
 800344a:	d037      	beq.n	80034bc <I2C_Master_SB+0x100>
        if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003450:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003452:	2b00      	cmp	r3, #0
 8003454:	d104      	bne.n	8003460 <I2C_Master_SB+0xa4>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800345a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800345c:	2b00      	cmp	r3, #0
 800345e:	d02d      	beq.n	80034bc <I2C_Master_SB+0x100>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	685a      	ldr	r2, [r3, #4]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800346e:	605a      	str	r2, [r3, #4]
}
 8003470:	e024      	b.n	80034bc <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003476:	2b00      	cmp	r3, #0
 8003478:	d10e      	bne.n	8003498 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800347e:	b29b      	uxth	r3, r3
 8003480:	11db      	asrs	r3, r3, #7
 8003482:	b2db      	uxtb	r3, r3
 8003484:	f003 0306 	and.w	r3, r3, #6
 8003488:	b2db      	uxtb	r3, r3
 800348a:	f063 030f 	orn	r3, r3, #15
 800348e:	b2da      	uxtb	r2, r3
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	611a      	str	r2, [r3, #16]
}
 8003496:	e011      	b.n	80034bc <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800349c:	2b01      	cmp	r3, #1
 800349e:	d10d      	bne.n	80034bc <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034a4:	b29b      	uxth	r3, r3
 80034a6:	11db      	asrs	r3, r3, #7
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	f003 0306 	and.w	r3, r3, #6
 80034ae:	b2db      	uxtb	r3, r3
 80034b0:	f063 030e 	orn	r3, r3, #14
 80034b4:	b2da      	uxtb	r2, r3
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	611a      	str	r2, [r3, #16]
}
 80034bc:	bf00      	nop
 80034be:	370c      	adds	r7, #12
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bc80      	pop	{r7}
 80034c4:	4770      	bx	lr

080034c6 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80034c6:	b480      	push	{r7}
 80034c8:	b083      	sub	sp, #12
 80034ca:	af00      	add	r7, sp, #0
 80034cc:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034d2:	b2da      	uxtb	r2, r3
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d103      	bne.n	80034ea <I2C_Master_ADD10+0x24>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d011      	beq.n	800350e <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d104      	bne.n	80034fe <I2C_Master_ADD10+0x38>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d007      	beq.n	800350e <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	685a      	ldr	r2, [r3, #4]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800350c:	605a      	str	r2, [r3, #4]
    }
  }
}
 800350e:	bf00      	nop
 8003510:	370c      	adds	r7, #12
 8003512:	46bd      	mov	sp, r7
 8003514:	bc80      	pop	{r7}
 8003516:	4770      	bx	lr

08003518 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003518:	b480      	push	{r7}
 800351a:	b091      	sub	sp, #68	; 0x44
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003526:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800352e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003534:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800353c:	b2db      	uxtb	r3, r3
 800353e:	2b22      	cmp	r3, #34	; 0x22
 8003540:	f040 8174 	bne.w	800382c <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003548:	2b00      	cmp	r3, #0
 800354a:	d10f      	bne.n	800356c <I2C_Master_ADDR+0x54>
 800354c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003550:	2b40      	cmp	r3, #64	; 0x40
 8003552:	d10b      	bne.n	800356c <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003554:	2300      	movs	r3, #0
 8003556:	633b      	str	r3, [r7, #48]	; 0x30
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	695b      	ldr	r3, [r3, #20]
 800355e:	633b      	str	r3, [r7, #48]	; 0x30
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	699b      	ldr	r3, [r3, #24]
 8003566:	633b      	str	r3, [r7, #48]	; 0x30
 8003568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800356a:	e16b      	b.n	8003844 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003570:	2b00      	cmp	r3, #0
 8003572:	d11d      	bne.n	80035b0 <I2C_Master_ADDR+0x98>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	691b      	ldr	r3, [r3, #16]
 8003578:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800357c:	d118      	bne.n	80035b0 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800357e:	2300      	movs	r3, #0
 8003580:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	695b      	ldr	r3, [r3, #20]
 8003588:	62fb      	str	r3, [r7, #44]	; 0x2c
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	699b      	ldr	r3, [r3, #24]
 8003590:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003592:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	681a      	ldr	r2, [r3, #0]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80035a2:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035a8:	1c5a      	adds	r2, r3, #1
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	651a      	str	r2, [r3, #80]	; 0x50
 80035ae:	e149      	b.n	8003844 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035b4:	b29b      	uxth	r3, r3
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d113      	bne.n	80035e2 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035ba:	2300      	movs	r3, #0
 80035bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	695b      	ldr	r3, [r3, #20]
 80035c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	699b      	ldr	r3, [r3, #24]
 80035cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80035ce:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	681a      	ldr	r2, [r3, #0]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035de:	601a      	str	r2, [r3, #0]
 80035e0:	e120      	b.n	8003824 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035e6:	b29b      	uxth	r3, r3
 80035e8:	2b01      	cmp	r3, #1
 80035ea:	f040 808a 	bne.w	8003702 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80035ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035f0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80035f4:	d137      	bne.n	8003666 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	681a      	ldr	r2, [r3, #0]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003604:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003610:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003614:	d113      	bne.n	800363e <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	681a      	ldr	r2, [r3, #0]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003624:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003626:	2300      	movs	r3, #0
 8003628:	627b      	str	r3, [r7, #36]	; 0x24
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	695b      	ldr	r3, [r3, #20]
 8003630:	627b      	str	r3, [r7, #36]	; 0x24
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	699b      	ldr	r3, [r3, #24]
 8003638:	627b      	str	r3, [r7, #36]	; 0x24
 800363a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800363c:	e0f2      	b.n	8003824 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800363e:	2300      	movs	r3, #0
 8003640:	623b      	str	r3, [r7, #32]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	695b      	ldr	r3, [r3, #20]
 8003648:	623b      	str	r3, [r7, #32]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	699b      	ldr	r3, [r3, #24]
 8003650:	623b      	str	r3, [r7, #32]
 8003652:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	681a      	ldr	r2, [r3, #0]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003662:	601a      	str	r2, [r3, #0]
 8003664:	e0de      	b.n	8003824 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003668:	2b08      	cmp	r3, #8
 800366a:	d02e      	beq.n	80036ca <I2C_Master_ADDR+0x1b2>
 800366c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800366e:	2b20      	cmp	r3, #32
 8003670:	d02b      	beq.n	80036ca <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003672:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003674:	2b12      	cmp	r3, #18
 8003676:	d102      	bne.n	800367e <I2C_Master_ADDR+0x166>
 8003678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800367a:	2b01      	cmp	r3, #1
 800367c:	d125      	bne.n	80036ca <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800367e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003680:	2b04      	cmp	r3, #4
 8003682:	d00e      	beq.n	80036a2 <I2C_Master_ADDR+0x18a>
 8003684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003686:	2b02      	cmp	r3, #2
 8003688:	d00b      	beq.n	80036a2 <I2C_Master_ADDR+0x18a>
 800368a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800368c:	2b10      	cmp	r3, #16
 800368e:	d008      	beq.n	80036a2 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	681a      	ldr	r2, [r3, #0]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800369e:	601a      	str	r2, [r3, #0]
 80036a0:	e007      	b.n	80036b2 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80036b0:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036b2:	2300      	movs	r3, #0
 80036b4:	61fb      	str	r3, [r7, #28]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	695b      	ldr	r3, [r3, #20]
 80036bc:	61fb      	str	r3, [r7, #28]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	699b      	ldr	r3, [r3, #24]
 80036c4:	61fb      	str	r3, [r7, #28]
 80036c6:	69fb      	ldr	r3, [r7, #28]
 80036c8:	e0ac      	b.n	8003824 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036d8:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036da:	2300      	movs	r3, #0
 80036dc:	61bb      	str	r3, [r7, #24]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	695b      	ldr	r3, [r3, #20]
 80036e4:	61bb      	str	r3, [r7, #24]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	699b      	ldr	r3, [r3, #24]
 80036ec:	61bb      	str	r3, [r7, #24]
 80036ee:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	681a      	ldr	r2, [r3, #0]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036fe:	601a      	str	r2, [r3, #0]
 8003700:	e090      	b.n	8003824 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003706:	b29b      	uxth	r3, r3
 8003708:	2b02      	cmp	r3, #2
 800370a:	d158      	bne.n	80037be <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800370c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800370e:	2b04      	cmp	r3, #4
 8003710:	d021      	beq.n	8003756 <I2C_Master_ADDR+0x23e>
 8003712:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003714:	2b02      	cmp	r3, #2
 8003716:	d01e      	beq.n	8003756 <I2C_Master_ADDR+0x23e>
 8003718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800371a:	2b10      	cmp	r3, #16
 800371c:	d01b      	beq.n	8003756 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	681a      	ldr	r2, [r3, #0]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800372c:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800372e:	2300      	movs	r3, #0
 8003730:	617b      	str	r3, [r7, #20]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	695b      	ldr	r3, [r3, #20]
 8003738:	617b      	str	r3, [r7, #20]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	699b      	ldr	r3, [r3, #24]
 8003740:	617b      	str	r3, [r7, #20]
 8003742:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	681a      	ldr	r2, [r3, #0]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003752:	601a      	str	r2, [r3, #0]
 8003754:	e012      	b.n	800377c <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	681a      	ldr	r2, [r3, #0]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003764:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003766:	2300      	movs	r3, #0
 8003768:	613b      	str	r3, [r7, #16]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	695b      	ldr	r3, [r3, #20]
 8003770:	613b      	str	r3, [r7, #16]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	699b      	ldr	r3, [r3, #24]
 8003778:	613b      	str	r3, [r7, #16]
 800377a:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003786:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800378a:	d14b      	bne.n	8003824 <I2C_Master_ADDR+0x30c>
 800378c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800378e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003792:	d00b      	beq.n	80037ac <I2C_Master_ADDR+0x294>
 8003794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003796:	2b01      	cmp	r3, #1
 8003798:	d008      	beq.n	80037ac <I2C_Master_ADDR+0x294>
 800379a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800379c:	2b08      	cmp	r3, #8
 800379e:	d005      	beq.n	80037ac <I2C_Master_ADDR+0x294>
 80037a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037a2:	2b10      	cmp	r3, #16
 80037a4:	d002      	beq.n	80037ac <I2C_Master_ADDR+0x294>
 80037a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037a8:	2b20      	cmp	r3, #32
 80037aa:	d13b      	bne.n	8003824 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	685a      	ldr	r2, [r3, #4]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80037ba:	605a      	str	r2, [r3, #4]
 80037bc:	e032      	b.n	8003824 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	681a      	ldr	r2, [r3, #0]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80037cc:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037dc:	d117      	bne.n	800380e <I2C_Master_ADDR+0x2f6>
 80037de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037e0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80037e4:	d00b      	beq.n	80037fe <I2C_Master_ADDR+0x2e6>
 80037e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037e8:	2b01      	cmp	r3, #1
 80037ea:	d008      	beq.n	80037fe <I2C_Master_ADDR+0x2e6>
 80037ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037ee:	2b08      	cmp	r3, #8
 80037f0:	d005      	beq.n	80037fe <I2C_Master_ADDR+0x2e6>
 80037f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037f4:	2b10      	cmp	r3, #16
 80037f6:	d002      	beq.n	80037fe <I2C_Master_ADDR+0x2e6>
 80037f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037fa:	2b20      	cmp	r3, #32
 80037fc:	d107      	bne.n	800380e <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	685a      	ldr	r2, [r3, #4]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800380c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800380e:	2300      	movs	r3, #0
 8003810:	60fb      	str	r3, [r7, #12]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	695b      	ldr	r3, [r3, #20]
 8003818:	60fb      	str	r3, [r7, #12]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	699b      	ldr	r3, [r3, #24]
 8003820:	60fb      	str	r3, [r7, #12]
 8003822:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2200      	movs	r2, #0
 8003828:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800382a:	e00b      	b.n	8003844 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800382c:	2300      	movs	r3, #0
 800382e:	60bb      	str	r3, [r7, #8]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	695b      	ldr	r3, [r3, #20]
 8003836:	60bb      	str	r3, [r7, #8]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	699b      	ldr	r3, [r3, #24]
 800383e:	60bb      	str	r3, [r7, #8]
 8003840:	68bb      	ldr	r3, [r7, #8]
}
 8003842:	e7ff      	b.n	8003844 <I2C_Master_ADDR+0x32c>
 8003844:	bf00      	nop
 8003846:	3744      	adds	r7, #68	; 0x44
 8003848:	46bd      	mov	sp, r7
 800384a:	bc80      	pop	{r7}
 800384c:	4770      	bx	lr

0800384e <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800384e:	b580      	push	{r7, lr}
 8003850:	b084      	sub	sp, #16
 8003852:	af00      	add	r7, sp, #0
 8003854:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800385c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003862:	b29b      	uxth	r3, r3
 8003864:	2b00      	cmp	r3, #0
 8003866:	d02b      	beq.n	80038c0 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800386c:	781a      	ldrb	r2, [r3, #0]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003878:	1c5a      	adds	r2, r3, #1
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003882:	b29b      	uxth	r3, r3
 8003884:	3b01      	subs	r3, #1
 8003886:	b29a      	uxth	r2, r3
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003890:	b29b      	uxth	r3, r3
 8003892:	2b00      	cmp	r3, #0
 8003894:	d114      	bne.n	80038c0 <I2C_SlaveTransmit_TXE+0x72>
 8003896:	7bfb      	ldrb	r3, [r7, #15]
 8003898:	2b29      	cmp	r3, #41	; 0x29
 800389a:	d111      	bne.n	80038c0 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	685a      	ldr	r2, [r3, #4]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038aa:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2221      	movs	r2, #33	; 0x21
 80038b0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2228      	movs	r2, #40	; 0x28
 80038b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	f7ff fa58 	bl	8002d70 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80038c0:	bf00      	nop
 80038c2:	3710      	adds	r7, #16
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}

080038c8 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b083      	sub	sp, #12
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038d4:	b29b      	uxth	r3, r3
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d011      	beq.n	80038fe <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038de:	781a      	ldrb	r2, [r3, #0]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ea:	1c5a      	adds	r2, r3, #1
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038f4:	b29b      	uxth	r3, r3
 80038f6:	3b01      	subs	r3, #1
 80038f8:	b29a      	uxth	r2, r3
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80038fe:	bf00      	nop
 8003900:	370c      	adds	r7, #12
 8003902:	46bd      	mov	sp, r7
 8003904:	bc80      	pop	{r7}
 8003906:	4770      	bx	lr

08003908 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b084      	sub	sp, #16
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003916:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800391c:	b29b      	uxth	r3, r3
 800391e:	2b00      	cmp	r3, #0
 8003920:	d02c      	beq.n	800397c <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	691a      	ldr	r2, [r3, #16]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800392c:	b2d2      	uxtb	r2, r2
 800392e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003934:	1c5a      	adds	r2, r3, #1
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800393e:	b29b      	uxth	r3, r3
 8003940:	3b01      	subs	r3, #1
 8003942:	b29a      	uxth	r2, r3
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800394c:	b29b      	uxth	r3, r3
 800394e:	2b00      	cmp	r3, #0
 8003950:	d114      	bne.n	800397c <I2C_SlaveReceive_RXNE+0x74>
 8003952:	7bfb      	ldrb	r3, [r7, #15]
 8003954:	2b2a      	cmp	r3, #42	; 0x2a
 8003956:	d111      	bne.n	800397c <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	685a      	ldr	r2, [r3, #4]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003966:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2222      	movs	r2, #34	; 0x22
 800396c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2228      	movs	r2, #40	; 0x28
 8003972:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	f7ff fa03 	bl	8002d82 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800397c:	bf00      	nop
 800397e:	3710      	adds	r7, #16
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}

08003984 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003984:	b480      	push	{r7}
 8003986:	b083      	sub	sp, #12
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003990:	b29b      	uxth	r3, r3
 8003992:	2b00      	cmp	r3, #0
 8003994:	d012      	beq.n	80039bc <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	691a      	ldr	r2, [r3, #16]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a0:	b2d2      	uxtb	r2, r2
 80039a2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a8:	1c5a      	adds	r2, r3, #1
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039b2:	b29b      	uxth	r3, r3
 80039b4:	3b01      	subs	r3, #1
 80039b6:	b29a      	uxth	r2, r3
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80039bc:	bf00      	nop
 80039be:	370c      	adds	r7, #12
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bc80      	pop	{r7}
 80039c4:	4770      	bx	lr

080039c6 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80039c6:	b580      	push	{r7, lr}
 80039c8:	b084      	sub	sp, #16
 80039ca:	af00      	add	r7, sp, #0
 80039cc:	6078      	str	r0, [r7, #4]
 80039ce:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80039d0:	2300      	movs	r3, #0
 80039d2:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039da:	b2db      	uxtb	r3, r3
 80039dc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80039e0:	2b28      	cmp	r3, #40	; 0x28
 80039e2:	d127      	bne.n	8003a34 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	685a      	ldr	r2, [r3, #4]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039f2:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	089b      	lsrs	r3, r3, #2
 80039f8:	f003 0301 	and.w	r3, r3, #1
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d101      	bne.n	8003a04 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8003a00:	2301      	movs	r3, #1
 8003a02:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	09db      	lsrs	r3, r3, #7
 8003a08:	f003 0301 	and.w	r3, r3, #1
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d103      	bne.n	8003a18 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	68db      	ldr	r3, [r3, #12]
 8003a14:	81bb      	strh	r3, [r7, #12]
 8003a16:	e002      	b.n	8003a1e <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	699b      	ldr	r3, [r3, #24]
 8003a1c:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2200      	movs	r2, #0
 8003a22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003a26:	89ba      	ldrh	r2, [r7, #12]
 8003a28:	7bfb      	ldrb	r3, [r7, #15]
 8003a2a:	4619      	mov	r1, r3
 8003a2c:	6878      	ldr	r0, [r7, #4]
 8003a2e:	f7ff f9b1 	bl	8002d94 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003a32:	e008      	b.n	8003a46 <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f06f 0202 	mvn.w	r2, #2
 8003a3c:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2200      	movs	r2, #0
 8003a42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8003a46:	bf00      	nop
 8003a48:	3710      	adds	r7, #16
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}
	...

08003a50 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b084      	sub	sp, #16
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a5e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	685a      	ldr	r2, [r3, #4]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003a6e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003a70:	2300      	movs	r3, #0
 8003a72:	60bb      	str	r3, [r7, #8]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	695b      	ldr	r3, [r3, #20]
 8003a7a:	60bb      	str	r3, [r7, #8]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	681a      	ldr	r2, [r3, #0]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f042 0201 	orr.w	r2, r2, #1
 8003a8a:	601a      	str	r2, [r3, #0]
 8003a8c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	681a      	ldr	r2, [r3, #0]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a9c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003aa8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003aac:	d172      	bne.n	8003b94 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003aae:	7bfb      	ldrb	r3, [r7, #15]
 8003ab0:	2b22      	cmp	r3, #34	; 0x22
 8003ab2:	d002      	beq.n	8003aba <I2C_Slave_STOPF+0x6a>
 8003ab4:	7bfb      	ldrb	r3, [r7, #15]
 8003ab6:	2b2a      	cmp	r3, #42	; 0x2a
 8003ab8:	d135      	bne.n	8003b26 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	b29a      	uxth	r2, r3
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003acc:	b29b      	uxth	r3, r3
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d005      	beq.n	8003ade <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad6:	f043 0204 	orr.w	r2, r3, #4
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	685a      	ldr	r2, [r3, #4]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003aec:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003af2:	4618      	mov	r0, r3
 8003af4:	f7fe fe0c 	bl	8002710 <HAL_DMA_GetState>
 8003af8:	4603      	mov	r3, r0
 8003afa:	2b01      	cmp	r3, #1
 8003afc:	d049      	beq.n	8003b92 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b02:	4a69      	ldr	r2, [pc, #420]	; (8003ca8 <I2C_Slave_STOPF+0x258>)
 8003b04:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	f7fe fc84 	bl	8002418 <HAL_DMA_Abort_IT>
 8003b10:	4603      	mov	r3, r0
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d03d      	beq.n	8003b92 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b1c:	687a      	ldr	r2, [r7, #4]
 8003b1e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003b20:	4610      	mov	r0, r2
 8003b22:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003b24:	e035      	b.n	8003b92 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	b29a      	uxth	r2, r3
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b38:	b29b      	uxth	r3, r3
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d005      	beq.n	8003b4a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b42:	f043 0204 	orr.w	r2, r3, #4
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	685a      	ldr	r2, [r3, #4]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b58:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f7fe fdd6 	bl	8002710 <HAL_DMA_GetState>
 8003b64:	4603      	mov	r3, r0
 8003b66:	2b01      	cmp	r3, #1
 8003b68:	d014      	beq.n	8003b94 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b6e:	4a4e      	ldr	r2, [pc, #312]	; (8003ca8 <I2C_Slave_STOPF+0x258>)
 8003b70:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b76:	4618      	mov	r0, r3
 8003b78:	f7fe fc4e 	bl	8002418 <HAL_DMA_Abort_IT>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d008      	beq.n	8003b94 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b88:	687a      	ldr	r2, [r7, #4]
 8003b8a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003b8c:	4610      	mov	r0, r2
 8003b8e:	4798      	blx	r3
 8003b90:	e000      	b.n	8003b94 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003b92:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b98:	b29b      	uxth	r3, r3
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d03e      	beq.n	8003c1c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	695b      	ldr	r3, [r3, #20]
 8003ba4:	f003 0304 	and.w	r3, r3, #4
 8003ba8:	2b04      	cmp	r3, #4
 8003baa:	d112      	bne.n	8003bd2 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	691a      	ldr	r2, [r3, #16]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb6:	b2d2      	uxtb	r2, r2
 8003bb8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bbe:	1c5a      	adds	r2, r3, #1
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bc8:	b29b      	uxth	r3, r3
 8003bca:	3b01      	subs	r3, #1
 8003bcc:	b29a      	uxth	r2, r3
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	695b      	ldr	r3, [r3, #20]
 8003bd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bdc:	2b40      	cmp	r3, #64	; 0x40
 8003bde:	d112      	bne.n	8003c06 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	691a      	ldr	r2, [r3, #16]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bea:	b2d2      	uxtb	r2, r2
 8003bec:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf2:	1c5a      	adds	r2, r3, #1
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bfc:	b29b      	uxth	r3, r3
 8003bfe:	3b01      	subs	r3, #1
 8003c00:	b29a      	uxth	r2, r3
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c0a:	b29b      	uxth	r3, r3
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d005      	beq.n	8003c1c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c14:	f043 0204 	orr.w	r2, r3, #4
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d003      	beq.n	8003c2c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8003c24:	6878      	ldr	r0, [r7, #4]
 8003c26:	f000 f843 	bl	8003cb0 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8003c2a:	e039      	b.n	8003ca0 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003c2c:	7bfb      	ldrb	r3, [r7, #15]
 8003c2e:	2b2a      	cmp	r3, #42	; 0x2a
 8003c30:	d109      	bne.n	8003c46 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2200      	movs	r2, #0
 8003c36:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2228      	movs	r2, #40	; 0x28
 8003c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003c40:	6878      	ldr	r0, [r7, #4]
 8003c42:	f7ff f89e 	bl	8002d82 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c4c:	b2db      	uxtb	r3, r3
 8003c4e:	2b28      	cmp	r3, #40	; 0x28
 8003c50:	d111      	bne.n	8003c76 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	4a15      	ldr	r2, [pc, #84]	; (8003cac <I2C_Slave_STOPF+0x25c>)
 8003c56:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2220      	movs	r2, #32
 8003c62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f7ff f89d 	bl	8002dae <HAL_I2C_ListenCpltCallback>
}
 8003c74:	e014      	b.n	8003ca0 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c7a:	2b22      	cmp	r3, #34	; 0x22
 8003c7c:	d002      	beq.n	8003c84 <I2C_Slave_STOPF+0x234>
 8003c7e:	7bfb      	ldrb	r3, [r7, #15]
 8003c80:	2b22      	cmp	r3, #34	; 0x22
 8003c82:	d10d      	bne.n	8003ca0 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2200      	movs	r2, #0
 8003c88:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2220      	movs	r2, #32
 8003c8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2200      	movs	r2, #0
 8003c96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003c9a:	6878      	ldr	r0, [r7, #4]
 8003c9c:	f7ff f871 	bl	8002d82 <HAL_I2C_SlaveRxCpltCallback>
}
 8003ca0:	bf00      	nop
 8003ca2:	3710      	adds	r7, #16
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bd80      	pop	{r7, pc}
 8003ca8:	08003edd 	.word	0x08003edd
 8003cac:	ffff0000 	.word	0xffff0000

08003cb0 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b084      	sub	sp, #16
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cbe:	73fb      	strb	r3, [r7, #15]

  if ((hi2c->Mode == HAL_I2C_MODE_MASTER) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003cc6:	b2db      	uxtb	r3, r3
 8003cc8:	2b10      	cmp	r3, #16
 8003cca:	d10a      	bne.n	8003ce2 <I2C_ITError+0x32>
 8003ccc:	7bfb      	ldrb	r3, [r7, #15]
 8003cce:	2b22      	cmp	r3, #34	; 0x22
 8003cd0:	d107      	bne.n	8003ce2 <I2C_ITError+0x32>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	681a      	ldr	r2, [r3, #0]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ce0:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003ce2:	7bfb      	ldrb	r3, [r7, #15]
 8003ce4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003ce8:	2b28      	cmp	r3, #40	; 0x28
 8003cea:	d107      	bne.n	8003cfc <I2C_ITError+0x4c>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2228      	movs	r2, #40	; 0x28
 8003cf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003cfa:	e015      	b.n	8003d28 <I2C_ITError+0x78>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d06:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d0a:	d006      	beq.n	8003d1a <I2C_ITError+0x6a>
 8003d0c:	7bfb      	ldrb	r3, [r7, #15]
 8003d0e:	2b60      	cmp	r3, #96	; 0x60
 8003d10:	d003      	beq.n	8003d1a <I2C_ITError+0x6a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2220      	movs	r2, #32
 8003d16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2200      	movs	r2, #0
 8003d24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d32:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d36:	d161      	bne.n	8003dfc <I2C_ITError+0x14c>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	685a      	ldr	r2, [r3, #4]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d46:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d4c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003d50:	2b01      	cmp	r3, #1
 8003d52:	d020      	beq.n	8003d96 <I2C_ITError+0xe6>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d58:	4a5e      	ldr	r2, [pc, #376]	; (8003ed4 <I2C_ITError+0x224>)
 8003d5a:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d60:	4618      	mov	r0, r3
 8003d62:	f7fe fb59 	bl	8002418 <HAL_DMA_Abort_IT>
 8003d66:	4603      	mov	r3, r0
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	f000 8089 	beq.w	8003e80 <I2C_ITError+0x1d0>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	681a      	ldr	r2, [r3, #0]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f022 0201 	bic.w	r2, r2, #1
 8003d7c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2220      	movs	r2, #32
 8003d82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d8c:	687a      	ldr	r2, [r7, #4]
 8003d8e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003d90:	4610      	mov	r0, r2
 8003d92:	4798      	blx	r3
 8003d94:	e074      	b.n	8003e80 <I2C_ITError+0x1d0>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d9a:	4a4e      	ldr	r2, [pc, #312]	; (8003ed4 <I2C_ITError+0x224>)
 8003d9c:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003da2:	4618      	mov	r0, r3
 8003da4:	f7fe fb38 	bl	8002418 <HAL_DMA_Abort_IT>
 8003da8:	4603      	mov	r3, r0
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d068      	beq.n	8003e80 <I2C_ITError+0x1d0>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	695b      	ldr	r3, [r3, #20]
 8003db4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003db8:	2b40      	cmp	r3, #64	; 0x40
 8003dba:	d10b      	bne.n	8003dd4 <I2C_ITError+0x124>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	691a      	ldr	r2, [r3, #16]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc6:	b2d2      	uxtb	r2, r2
 8003dc8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dce:	1c5a      	adds	r2, r3, #1
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	681a      	ldr	r2, [r3, #0]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f022 0201 	bic.w	r2, r2, #1
 8003de2:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2220      	movs	r2, #32
 8003de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003df0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003df2:	687a      	ldr	r2, [r7, #4]
 8003df4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003df6:	4610      	mov	r0, r2
 8003df8:	4798      	blx	r3
 8003dfa:	e041      	b.n	8003e80 <I2C_ITError+0x1d0>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e02:	b2db      	uxtb	r3, r3
 8003e04:	2b60      	cmp	r3, #96	; 0x60
 8003e06:	d125      	bne.n	8003e54 <I2C_ITError+0x1a4>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2220      	movs	r2, #32
 8003e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2200      	movs	r2, #0
 8003e14:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	695b      	ldr	r3, [r3, #20]
 8003e1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e20:	2b40      	cmp	r3, #64	; 0x40
 8003e22:	d10b      	bne.n	8003e3c <I2C_ITError+0x18c>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	691a      	ldr	r2, [r3, #16]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e2e:	b2d2      	uxtb	r2, r2
 8003e30:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e36:	1c5a      	adds	r2, r3, #1
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	681a      	ldr	r2, [r3, #0]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f022 0201 	bic.w	r2, r2, #1
 8003e4a:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003e4c:	6878      	ldr	r0, [r7, #4]
 8003e4e:	f7fe ffd2 	bl	8002df6 <HAL_I2C_AbortCpltCallback>
 8003e52:	e015      	b.n	8003e80 <I2C_ITError+0x1d0>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	695b      	ldr	r3, [r3, #20]
 8003e5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e5e:	2b40      	cmp	r3, #64	; 0x40
 8003e60:	d10b      	bne.n	8003e7a <I2C_ITError+0x1ca>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	691a      	ldr	r2, [r3, #16]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e6c:	b2d2      	uxtb	r2, r2
 8003e6e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e74:	1c5a      	adds	r2, r3, #1
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8003e7a:	6878      	ldr	r0, [r7, #4]
 8003e7c:	f7fe ffb2 	bl	8002de4 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  /* STOP Flag is not set after a NACK reception */
  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e86:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e8c:	f003 0304 	and.w	r3, r3, #4
 8003e90:	2b04      	cmp	r3, #4
 8003e92:	d11b      	bne.n	8003ecc <I2C_ITError+0x21c>
 8003e94:	7bfb      	ldrb	r3, [r7, #15]
 8003e96:	2b28      	cmp	r3, #40	; 0x28
 8003e98:	d118      	bne.n	8003ecc <I2C_ITError+0x21c>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	685a      	ldr	r2, [r3, #4]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003ea8:	605a      	str	r2, [r3, #4]

    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	4a0a      	ldr	r2, [pc, #40]	; (8003ed8 <I2C_ITError+0x228>)
 8003eae:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2220      	movs	r2, #32
 8003eba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	f7fe ff71 	bl	8002dae <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003ecc:	bf00      	nop
 8003ece:	3710      	adds	r7, #16
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bd80      	pop	{r7, pc}
 8003ed4:	08003edd 	.word	0x08003edd
 8003ed8:	ffff0000 	.word	0xffff0000

08003edc <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b084      	sub	sp, #16
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee8:	60fb      	str	r3, [r7, #12]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ef0:	72fb      	strb	r3, [r7, #11]

  /* Clear Complete callback */
  hi2c->hdmatx->XferCpltCallback = NULL;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	629a      	str	r2, [r3, #40]	; 0x28
  hi2c->hdmarx->XferCpltCallback = NULL;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003efe:	2200      	movs	r2, #0
 8003f00:	629a      	str	r2, [r3, #40]	; 0x28

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	681a      	ldr	r2, [r3, #0]
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f10:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	2200      	movs	r2, #0
 8003f16:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  hi2c->hdmatx->XferAbortCallback = NULL;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->hdmarx->XferAbortCallback = NULL;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f24:	2200      	movs	r2, #0
 8003f26:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	681a      	ldr	r2, [r3, #0]
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f022 0201 	bic.w	r2, r2, #1
 8003f36:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f3e:	b2db      	uxtb	r3, r3
 8003f40:	2b60      	cmp	r3, #96	; 0x60
 8003f42:	d10e      	bne.n	8003f62 <I2C_DMAAbort+0x86>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	2220      	movs	r2, #32
 8003f48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	2200      	movs	r2, #0
 8003f58:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003f5a:	68f8      	ldr	r0, [r7, #12]
 8003f5c:	f7fe ff4b 	bl	8002df6 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003f60:	e027      	b.n	8003fb2 <I2C_DMAAbort+0xd6>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003f62:	7afb      	ldrb	r3, [r7, #11]
 8003f64:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003f68:	2b28      	cmp	r3, #40	; 0x28
 8003f6a:	d117      	bne.n	8003f9c <I2C_DMAAbort+0xc0>
      __HAL_I2C_ENABLE(hi2c);
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	681a      	ldr	r2, [r3, #0]
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f042 0201 	orr.w	r2, r2, #1
 8003f7a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	681a      	ldr	r2, [r3, #0]
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003f8a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	2200      	movs	r2, #0
 8003f90:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	2228      	movs	r2, #40	; 0x28
 8003f96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003f9a:	e007      	b.n	8003fac <I2C_DMAAbort+0xd0>
      hi2c->State = HAL_I2C_STATE_READY;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	2220      	movs	r2, #32
 8003fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8003fac:	68f8      	ldr	r0, [r7, #12]
 8003fae:	f7fe ff19 	bl	8002de4 <HAL_I2C_ErrorCallback>
}
 8003fb2:	bf00      	nop
 8003fb4:	3710      	adds	r7, #16
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}

08003fba <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8003fba:	b480      	push	{r7}
 8003fbc:	b083      	sub	sp, #12
 8003fbe:	af00      	add	r7, sp, #0
 8003fc0:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fc6:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003fca:	d103      	bne.n	8003fd4 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2201      	movs	r2, #1
 8003fd0:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8003fd2:	e007      	b.n	8003fe4 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fd8:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003fdc:	d102      	bne.n	8003fe4 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2208      	movs	r2, #8
 8003fe2:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003fe4:	bf00      	nop
 8003fe6:	370c      	adds	r7, #12
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bc80      	pop	{r7}
 8003fec:	4770      	bx	lr

08003fee <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8003fee:	b580      	push	{r7, lr}
 8003ff0:	b084      	sub	sp, #16
 8003ff2:	af00      	add	r7, sp, #0
 8003ff4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d101      	bne.n	8004000 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	e02b      	b.n	8004058 <HAL_IWDG_Init+0x6a>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automaticaly */
  __HAL_IWDG_START(hiwdg);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8004008:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing 0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f245 5255 	movw	r2, #21845	; 0x5555
 8004012:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	687a      	ldr	r2, [r7, #4]
 800401a:	6852      	ldr	r2, [r2, #4]
 800401c:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	687a      	ldr	r2, [r7, #4]
 8004024:	6892      	ldr	r2, [r2, #8]
 8004026:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8004028:	f7fe f8b2 	bl	8002190 <HAL_GetTick>
 800402c:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while (hiwdg->Instance->SR != RESET)
 800402e:	e008      	b.n	8004042 <HAL_IWDG_Init+0x54>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8004030:	f7fe f8ae 	bl	8002190 <HAL_GetTick>
 8004034:	4602      	mov	r2, r0
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	1ad3      	subs	r3, r2, r3
 800403a:	2b30      	cmp	r3, #48	; 0x30
 800403c:	d901      	bls.n	8004042 <HAL_IWDG_Init+0x54>
    {
      return HAL_TIMEOUT;
 800403e:	2303      	movs	r3, #3
 8004040:	e00a      	b.n	8004058 <HAL_IWDG_Init+0x6a>
  while (hiwdg->Instance->SR != RESET)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	68db      	ldr	r3, [r3, #12]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d1f1      	bne.n	8004030 <HAL_IWDG_Init+0x42>
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8004054:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004056:	2300      	movs	r3, #0
}
 8004058:	4618      	mov	r0, r3
 800405a:	3710      	adds	r7, #16
 800405c:	46bd      	mov	sp, r7
 800405e:	bd80      	pop	{r7, pc}

08004060 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8004060:	b480      	push	{r7}
 8004062:	b083      	sub	sp, #12
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8004070:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004072:	2300      	movs	r3, #0
}
 8004074:	4618      	mov	r0, r3
 8004076:	370c      	adds	r7, #12
 8004078:	46bd      	mov	sp, r7
 800407a:	bc80      	pop	{r7}
 800407c:	4770      	bx	lr
	...

08004080 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b086      	sub	sp, #24
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d101      	bne.n	8004092 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	e26c      	b.n	800456c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f003 0301 	and.w	r3, r3, #1
 800409a:	2b00      	cmp	r3, #0
 800409c:	f000 8087 	beq.w	80041ae <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80040a0:	4b92      	ldr	r3, [pc, #584]	; (80042ec <HAL_RCC_OscConfig+0x26c>)
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	f003 030c 	and.w	r3, r3, #12
 80040a8:	2b04      	cmp	r3, #4
 80040aa:	d00c      	beq.n	80040c6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80040ac:	4b8f      	ldr	r3, [pc, #572]	; (80042ec <HAL_RCC_OscConfig+0x26c>)
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	f003 030c 	and.w	r3, r3, #12
 80040b4:	2b08      	cmp	r3, #8
 80040b6:	d112      	bne.n	80040de <HAL_RCC_OscConfig+0x5e>
 80040b8:	4b8c      	ldr	r3, [pc, #560]	; (80042ec <HAL_RCC_OscConfig+0x26c>)
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040c4:	d10b      	bne.n	80040de <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040c6:	4b89      	ldr	r3, [pc, #548]	; (80042ec <HAL_RCC_OscConfig+0x26c>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d06c      	beq.n	80041ac <HAL_RCC_OscConfig+0x12c>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d168      	bne.n	80041ac <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80040da:	2301      	movs	r3, #1
 80040dc:	e246      	b.n	800456c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040e6:	d106      	bne.n	80040f6 <HAL_RCC_OscConfig+0x76>
 80040e8:	4b80      	ldr	r3, [pc, #512]	; (80042ec <HAL_RCC_OscConfig+0x26c>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a7f      	ldr	r2, [pc, #508]	; (80042ec <HAL_RCC_OscConfig+0x26c>)
 80040ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040f2:	6013      	str	r3, [r2, #0]
 80040f4:	e02e      	b.n	8004154 <HAL_RCC_OscConfig+0xd4>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d10c      	bne.n	8004118 <HAL_RCC_OscConfig+0x98>
 80040fe:	4b7b      	ldr	r3, [pc, #492]	; (80042ec <HAL_RCC_OscConfig+0x26c>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4a7a      	ldr	r2, [pc, #488]	; (80042ec <HAL_RCC_OscConfig+0x26c>)
 8004104:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004108:	6013      	str	r3, [r2, #0]
 800410a:	4b78      	ldr	r3, [pc, #480]	; (80042ec <HAL_RCC_OscConfig+0x26c>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a77      	ldr	r2, [pc, #476]	; (80042ec <HAL_RCC_OscConfig+0x26c>)
 8004110:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004114:	6013      	str	r3, [r2, #0]
 8004116:	e01d      	b.n	8004154 <HAL_RCC_OscConfig+0xd4>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004120:	d10c      	bne.n	800413c <HAL_RCC_OscConfig+0xbc>
 8004122:	4b72      	ldr	r3, [pc, #456]	; (80042ec <HAL_RCC_OscConfig+0x26c>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a71      	ldr	r2, [pc, #452]	; (80042ec <HAL_RCC_OscConfig+0x26c>)
 8004128:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800412c:	6013      	str	r3, [r2, #0]
 800412e:	4b6f      	ldr	r3, [pc, #444]	; (80042ec <HAL_RCC_OscConfig+0x26c>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a6e      	ldr	r2, [pc, #440]	; (80042ec <HAL_RCC_OscConfig+0x26c>)
 8004134:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004138:	6013      	str	r3, [r2, #0]
 800413a:	e00b      	b.n	8004154 <HAL_RCC_OscConfig+0xd4>
 800413c:	4b6b      	ldr	r3, [pc, #428]	; (80042ec <HAL_RCC_OscConfig+0x26c>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a6a      	ldr	r2, [pc, #424]	; (80042ec <HAL_RCC_OscConfig+0x26c>)
 8004142:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004146:	6013      	str	r3, [r2, #0]
 8004148:	4b68      	ldr	r3, [pc, #416]	; (80042ec <HAL_RCC_OscConfig+0x26c>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a67      	ldr	r2, [pc, #412]	; (80042ec <HAL_RCC_OscConfig+0x26c>)
 800414e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004152:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d013      	beq.n	8004184 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800415c:	f7fe f818 	bl	8002190 <HAL_GetTick>
 8004160:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004162:	e008      	b.n	8004176 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004164:	f7fe f814 	bl	8002190 <HAL_GetTick>
 8004168:	4602      	mov	r2, r0
 800416a:	693b      	ldr	r3, [r7, #16]
 800416c:	1ad3      	subs	r3, r2, r3
 800416e:	2b64      	cmp	r3, #100	; 0x64
 8004170:	d901      	bls.n	8004176 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004172:	2303      	movs	r3, #3
 8004174:	e1fa      	b.n	800456c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004176:	4b5d      	ldr	r3, [pc, #372]	; (80042ec <HAL_RCC_OscConfig+0x26c>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800417e:	2b00      	cmp	r3, #0
 8004180:	d0f0      	beq.n	8004164 <HAL_RCC_OscConfig+0xe4>
 8004182:	e014      	b.n	80041ae <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004184:	f7fe f804 	bl	8002190 <HAL_GetTick>
 8004188:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800418a:	e008      	b.n	800419e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800418c:	f7fe f800 	bl	8002190 <HAL_GetTick>
 8004190:	4602      	mov	r2, r0
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	1ad3      	subs	r3, r2, r3
 8004196:	2b64      	cmp	r3, #100	; 0x64
 8004198:	d901      	bls.n	800419e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800419a:	2303      	movs	r3, #3
 800419c:	e1e6      	b.n	800456c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800419e:	4b53      	ldr	r3, [pc, #332]	; (80042ec <HAL_RCC_OscConfig+0x26c>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d1f0      	bne.n	800418c <HAL_RCC_OscConfig+0x10c>
 80041aa:	e000      	b.n	80041ae <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f003 0302 	and.w	r3, r3, #2
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d063      	beq.n	8004282 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80041ba:	4b4c      	ldr	r3, [pc, #304]	; (80042ec <HAL_RCC_OscConfig+0x26c>)
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	f003 030c 	and.w	r3, r3, #12
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d00b      	beq.n	80041de <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80041c6:	4b49      	ldr	r3, [pc, #292]	; (80042ec <HAL_RCC_OscConfig+0x26c>)
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	f003 030c 	and.w	r3, r3, #12
 80041ce:	2b08      	cmp	r3, #8
 80041d0:	d11c      	bne.n	800420c <HAL_RCC_OscConfig+0x18c>
 80041d2:	4b46      	ldr	r3, [pc, #280]	; (80042ec <HAL_RCC_OscConfig+0x26c>)
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d116      	bne.n	800420c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041de:	4b43      	ldr	r3, [pc, #268]	; (80042ec <HAL_RCC_OscConfig+0x26c>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f003 0302 	and.w	r3, r3, #2
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d005      	beq.n	80041f6 <HAL_RCC_OscConfig+0x176>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	691b      	ldr	r3, [r3, #16]
 80041ee:	2b01      	cmp	r3, #1
 80041f0:	d001      	beq.n	80041f6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80041f2:	2301      	movs	r3, #1
 80041f4:	e1ba      	b.n	800456c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041f6:	4b3d      	ldr	r3, [pc, #244]	; (80042ec <HAL_RCC_OscConfig+0x26c>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	695b      	ldr	r3, [r3, #20]
 8004202:	00db      	lsls	r3, r3, #3
 8004204:	4939      	ldr	r1, [pc, #228]	; (80042ec <HAL_RCC_OscConfig+0x26c>)
 8004206:	4313      	orrs	r3, r2
 8004208:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800420a:	e03a      	b.n	8004282 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	691b      	ldr	r3, [r3, #16]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d020      	beq.n	8004256 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004214:	4b36      	ldr	r3, [pc, #216]	; (80042f0 <HAL_RCC_OscConfig+0x270>)
 8004216:	2201      	movs	r2, #1
 8004218:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800421a:	f7fd ffb9 	bl	8002190 <HAL_GetTick>
 800421e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004220:	e008      	b.n	8004234 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004222:	f7fd ffb5 	bl	8002190 <HAL_GetTick>
 8004226:	4602      	mov	r2, r0
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	1ad3      	subs	r3, r2, r3
 800422c:	2b02      	cmp	r3, #2
 800422e:	d901      	bls.n	8004234 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004230:	2303      	movs	r3, #3
 8004232:	e19b      	b.n	800456c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004234:	4b2d      	ldr	r3, [pc, #180]	; (80042ec <HAL_RCC_OscConfig+0x26c>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f003 0302 	and.w	r3, r3, #2
 800423c:	2b00      	cmp	r3, #0
 800423e:	d0f0      	beq.n	8004222 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004240:	4b2a      	ldr	r3, [pc, #168]	; (80042ec <HAL_RCC_OscConfig+0x26c>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	695b      	ldr	r3, [r3, #20]
 800424c:	00db      	lsls	r3, r3, #3
 800424e:	4927      	ldr	r1, [pc, #156]	; (80042ec <HAL_RCC_OscConfig+0x26c>)
 8004250:	4313      	orrs	r3, r2
 8004252:	600b      	str	r3, [r1, #0]
 8004254:	e015      	b.n	8004282 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004256:	4b26      	ldr	r3, [pc, #152]	; (80042f0 <HAL_RCC_OscConfig+0x270>)
 8004258:	2200      	movs	r2, #0
 800425a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800425c:	f7fd ff98 	bl	8002190 <HAL_GetTick>
 8004260:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004262:	e008      	b.n	8004276 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004264:	f7fd ff94 	bl	8002190 <HAL_GetTick>
 8004268:	4602      	mov	r2, r0
 800426a:	693b      	ldr	r3, [r7, #16]
 800426c:	1ad3      	subs	r3, r2, r3
 800426e:	2b02      	cmp	r3, #2
 8004270:	d901      	bls.n	8004276 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004272:	2303      	movs	r3, #3
 8004274:	e17a      	b.n	800456c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004276:	4b1d      	ldr	r3, [pc, #116]	; (80042ec <HAL_RCC_OscConfig+0x26c>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f003 0302 	and.w	r3, r3, #2
 800427e:	2b00      	cmp	r3, #0
 8004280:	d1f0      	bne.n	8004264 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f003 0308 	and.w	r3, r3, #8
 800428a:	2b00      	cmp	r3, #0
 800428c:	d03a      	beq.n	8004304 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	699b      	ldr	r3, [r3, #24]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d019      	beq.n	80042ca <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004296:	4b17      	ldr	r3, [pc, #92]	; (80042f4 <HAL_RCC_OscConfig+0x274>)
 8004298:	2201      	movs	r2, #1
 800429a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800429c:	f7fd ff78 	bl	8002190 <HAL_GetTick>
 80042a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042a2:	e008      	b.n	80042b6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042a4:	f7fd ff74 	bl	8002190 <HAL_GetTick>
 80042a8:	4602      	mov	r2, r0
 80042aa:	693b      	ldr	r3, [r7, #16]
 80042ac:	1ad3      	subs	r3, r2, r3
 80042ae:	2b02      	cmp	r3, #2
 80042b0:	d901      	bls.n	80042b6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80042b2:	2303      	movs	r3, #3
 80042b4:	e15a      	b.n	800456c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042b6:	4b0d      	ldr	r3, [pc, #52]	; (80042ec <HAL_RCC_OscConfig+0x26c>)
 80042b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ba:	f003 0302 	and.w	r3, r3, #2
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d0f0      	beq.n	80042a4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80042c2:	2001      	movs	r0, #1
 80042c4:	f000 fb0a 	bl	80048dc <RCC_Delay>
 80042c8:	e01c      	b.n	8004304 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042ca:	4b0a      	ldr	r3, [pc, #40]	; (80042f4 <HAL_RCC_OscConfig+0x274>)
 80042cc:	2200      	movs	r2, #0
 80042ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042d0:	f7fd ff5e 	bl	8002190 <HAL_GetTick>
 80042d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042d6:	e00f      	b.n	80042f8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042d8:	f7fd ff5a 	bl	8002190 <HAL_GetTick>
 80042dc:	4602      	mov	r2, r0
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	1ad3      	subs	r3, r2, r3
 80042e2:	2b02      	cmp	r3, #2
 80042e4:	d908      	bls.n	80042f8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80042e6:	2303      	movs	r3, #3
 80042e8:	e140      	b.n	800456c <HAL_RCC_OscConfig+0x4ec>
 80042ea:	bf00      	nop
 80042ec:	40021000 	.word	0x40021000
 80042f0:	42420000 	.word	0x42420000
 80042f4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042f8:	4b9e      	ldr	r3, [pc, #632]	; (8004574 <HAL_RCC_OscConfig+0x4f4>)
 80042fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042fc:	f003 0302 	and.w	r3, r3, #2
 8004300:	2b00      	cmp	r3, #0
 8004302:	d1e9      	bne.n	80042d8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f003 0304 	and.w	r3, r3, #4
 800430c:	2b00      	cmp	r3, #0
 800430e:	f000 80a6 	beq.w	800445e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004312:	2300      	movs	r3, #0
 8004314:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004316:	4b97      	ldr	r3, [pc, #604]	; (8004574 <HAL_RCC_OscConfig+0x4f4>)
 8004318:	69db      	ldr	r3, [r3, #28]
 800431a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800431e:	2b00      	cmp	r3, #0
 8004320:	d10d      	bne.n	800433e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004322:	4b94      	ldr	r3, [pc, #592]	; (8004574 <HAL_RCC_OscConfig+0x4f4>)
 8004324:	69db      	ldr	r3, [r3, #28]
 8004326:	4a93      	ldr	r2, [pc, #588]	; (8004574 <HAL_RCC_OscConfig+0x4f4>)
 8004328:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800432c:	61d3      	str	r3, [r2, #28]
 800432e:	4b91      	ldr	r3, [pc, #580]	; (8004574 <HAL_RCC_OscConfig+0x4f4>)
 8004330:	69db      	ldr	r3, [r3, #28]
 8004332:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004336:	60bb      	str	r3, [r7, #8]
 8004338:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800433a:	2301      	movs	r3, #1
 800433c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800433e:	4b8e      	ldr	r3, [pc, #568]	; (8004578 <HAL_RCC_OscConfig+0x4f8>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004346:	2b00      	cmp	r3, #0
 8004348:	d118      	bne.n	800437c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800434a:	4b8b      	ldr	r3, [pc, #556]	; (8004578 <HAL_RCC_OscConfig+0x4f8>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a8a      	ldr	r2, [pc, #552]	; (8004578 <HAL_RCC_OscConfig+0x4f8>)
 8004350:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004354:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004356:	f7fd ff1b 	bl	8002190 <HAL_GetTick>
 800435a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800435c:	e008      	b.n	8004370 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800435e:	f7fd ff17 	bl	8002190 <HAL_GetTick>
 8004362:	4602      	mov	r2, r0
 8004364:	693b      	ldr	r3, [r7, #16]
 8004366:	1ad3      	subs	r3, r2, r3
 8004368:	2b64      	cmp	r3, #100	; 0x64
 800436a:	d901      	bls.n	8004370 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800436c:	2303      	movs	r3, #3
 800436e:	e0fd      	b.n	800456c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004370:	4b81      	ldr	r3, [pc, #516]	; (8004578 <HAL_RCC_OscConfig+0x4f8>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004378:	2b00      	cmp	r3, #0
 800437a:	d0f0      	beq.n	800435e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	68db      	ldr	r3, [r3, #12]
 8004380:	2b01      	cmp	r3, #1
 8004382:	d106      	bne.n	8004392 <HAL_RCC_OscConfig+0x312>
 8004384:	4b7b      	ldr	r3, [pc, #492]	; (8004574 <HAL_RCC_OscConfig+0x4f4>)
 8004386:	6a1b      	ldr	r3, [r3, #32]
 8004388:	4a7a      	ldr	r2, [pc, #488]	; (8004574 <HAL_RCC_OscConfig+0x4f4>)
 800438a:	f043 0301 	orr.w	r3, r3, #1
 800438e:	6213      	str	r3, [r2, #32]
 8004390:	e02d      	b.n	80043ee <HAL_RCC_OscConfig+0x36e>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	68db      	ldr	r3, [r3, #12]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d10c      	bne.n	80043b4 <HAL_RCC_OscConfig+0x334>
 800439a:	4b76      	ldr	r3, [pc, #472]	; (8004574 <HAL_RCC_OscConfig+0x4f4>)
 800439c:	6a1b      	ldr	r3, [r3, #32]
 800439e:	4a75      	ldr	r2, [pc, #468]	; (8004574 <HAL_RCC_OscConfig+0x4f4>)
 80043a0:	f023 0301 	bic.w	r3, r3, #1
 80043a4:	6213      	str	r3, [r2, #32]
 80043a6:	4b73      	ldr	r3, [pc, #460]	; (8004574 <HAL_RCC_OscConfig+0x4f4>)
 80043a8:	6a1b      	ldr	r3, [r3, #32]
 80043aa:	4a72      	ldr	r2, [pc, #456]	; (8004574 <HAL_RCC_OscConfig+0x4f4>)
 80043ac:	f023 0304 	bic.w	r3, r3, #4
 80043b0:	6213      	str	r3, [r2, #32]
 80043b2:	e01c      	b.n	80043ee <HAL_RCC_OscConfig+0x36e>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	68db      	ldr	r3, [r3, #12]
 80043b8:	2b05      	cmp	r3, #5
 80043ba:	d10c      	bne.n	80043d6 <HAL_RCC_OscConfig+0x356>
 80043bc:	4b6d      	ldr	r3, [pc, #436]	; (8004574 <HAL_RCC_OscConfig+0x4f4>)
 80043be:	6a1b      	ldr	r3, [r3, #32]
 80043c0:	4a6c      	ldr	r2, [pc, #432]	; (8004574 <HAL_RCC_OscConfig+0x4f4>)
 80043c2:	f043 0304 	orr.w	r3, r3, #4
 80043c6:	6213      	str	r3, [r2, #32]
 80043c8:	4b6a      	ldr	r3, [pc, #424]	; (8004574 <HAL_RCC_OscConfig+0x4f4>)
 80043ca:	6a1b      	ldr	r3, [r3, #32]
 80043cc:	4a69      	ldr	r2, [pc, #420]	; (8004574 <HAL_RCC_OscConfig+0x4f4>)
 80043ce:	f043 0301 	orr.w	r3, r3, #1
 80043d2:	6213      	str	r3, [r2, #32]
 80043d4:	e00b      	b.n	80043ee <HAL_RCC_OscConfig+0x36e>
 80043d6:	4b67      	ldr	r3, [pc, #412]	; (8004574 <HAL_RCC_OscConfig+0x4f4>)
 80043d8:	6a1b      	ldr	r3, [r3, #32]
 80043da:	4a66      	ldr	r2, [pc, #408]	; (8004574 <HAL_RCC_OscConfig+0x4f4>)
 80043dc:	f023 0301 	bic.w	r3, r3, #1
 80043e0:	6213      	str	r3, [r2, #32]
 80043e2:	4b64      	ldr	r3, [pc, #400]	; (8004574 <HAL_RCC_OscConfig+0x4f4>)
 80043e4:	6a1b      	ldr	r3, [r3, #32]
 80043e6:	4a63      	ldr	r2, [pc, #396]	; (8004574 <HAL_RCC_OscConfig+0x4f4>)
 80043e8:	f023 0304 	bic.w	r3, r3, #4
 80043ec:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	68db      	ldr	r3, [r3, #12]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d015      	beq.n	8004422 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043f6:	f7fd fecb 	bl	8002190 <HAL_GetTick>
 80043fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043fc:	e00a      	b.n	8004414 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043fe:	f7fd fec7 	bl	8002190 <HAL_GetTick>
 8004402:	4602      	mov	r2, r0
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	1ad3      	subs	r3, r2, r3
 8004408:	f241 3288 	movw	r2, #5000	; 0x1388
 800440c:	4293      	cmp	r3, r2
 800440e:	d901      	bls.n	8004414 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004410:	2303      	movs	r3, #3
 8004412:	e0ab      	b.n	800456c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004414:	4b57      	ldr	r3, [pc, #348]	; (8004574 <HAL_RCC_OscConfig+0x4f4>)
 8004416:	6a1b      	ldr	r3, [r3, #32]
 8004418:	f003 0302 	and.w	r3, r3, #2
 800441c:	2b00      	cmp	r3, #0
 800441e:	d0ee      	beq.n	80043fe <HAL_RCC_OscConfig+0x37e>
 8004420:	e014      	b.n	800444c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004422:	f7fd feb5 	bl	8002190 <HAL_GetTick>
 8004426:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004428:	e00a      	b.n	8004440 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800442a:	f7fd feb1 	bl	8002190 <HAL_GetTick>
 800442e:	4602      	mov	r2, r0
 8004430:	693b      	ldr	r3, [r7, #16]
 8004432:	1ad3      	subs	r3, r2, r3
 8004434:	f241 3288 	movw	r2, #5000	; 0x1388
 8004438:	4293      	cmp	r3, r2
 800443a:	d901      	bls.n	8004440 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800443c:	2303      	movs	r3, #3
 800443e:	e095      	b.n	800456c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004440:	4b4c      	ldr	r3, [pc, #304]	; (8004574 <HAL_RCC_OscConfig+0x4f4>)
 8004442:	6a1b      	ldr	r3, [r3, #32]
 8004444:	f003 0302 	and.w	r3, r3, #2
 8004448:	2b00      	cmp	r3, #0
 800444a:	d1ee      	bne.n	800442a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800444c:	7dfb      	ldrb	r3, [r7, #23]
 800444e:	2b01      	cmp	r3, #1
 8004450:	d105      	bne.n	800445e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004452:	4b48      	ldr	r3, [pc, #288]	; (8004574 <HAL_RCC_OscConfig+0x4f4>)
 8004454:	69db      	ldr	r3, [r3, #28]
 8004456:	4a47      	ldr	r2, [pc, #284]	; (8004574 <HAL_RCC_OscConfig+0x4f4>)
 8004458:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800445c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	69db      	ldr	r3, [r3, #28]
 8004462:	2b00      	cmp	r3, #0
 8004464:	f000 8081 	beq.w	800456a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004468:	4b42      	ldr	r3, [pc, #264]	; (8004574 <HAL_RCC_OscConfig+0x4f4>)
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	f003 030c 	and.w	r3, r3, #12
 8004470:	2b08      	cmp	r3, #8
 8004472:	d061      	beq.n	8004538 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	69db      	ldr	r3, [r3, #28]
 8004478:	2b02      	cmp	r3, #2
 800447a:	d146      	bne.n	800450a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800447c:	4b3f      	ldr	r3, [pc, #252]	; (800457c <HAL_RCC_OscConfig+0x4fc>)
 800447e:	2200      	movs	r2, #0
 8004480:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004482:	f7fd fe85 	bl	8002190 <HAL_GetTick>
 8004486:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004488:	e008      	b.n	800449c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800448a:	f7fd fe81 	bl	8002190 <HAL_GetTick>
 800448e:	4602      	mov	r2, r0
 8004490:	693b      	ldr	r3, [r7, #16]
 8004492:	1ad3      	subs	r3, r2, r3
 8004494:	2b02      	cmp	r3, #2
 8004496:	d901      	bls.n	800449c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004498:	2303      	movs	r3, #3
 800449a:	e067      	b.n	800456c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800449c:	4b35      	ldr	r3, [pc, #212]	; (8004574 <HAL_RCC_OscConfig+0x4f4>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d1f0      	bne.n	800448a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6a1b      	ldr	r3, [r3, #32]
 80044ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044b0:	d108      	bne.n	80044c4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80044b2:	4b30      	ldr	r3, [pc, #192]	; (8004574 <HAL_RCC_OscConfig+0x4f4>)
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	492d      	ldr	r1, [pc, #180]	; (8004574 <HAL_RCC_OscConfig+0x4f4>)
 80044c0:	4313      	orrs	r3, r2
 80044c2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80044c4:	4b2b      	ldr	r3, [pc, #172]	; (8004574 <HAL_RCC_OscConfig+0x4f4>)
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6a19      	ldr	r1, [r3, #32]
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d4:	430b      	orrs	r3, r1
 80044d6:	4927      	ldr	r1, [pc, #156]	; (8004574 <HAL_RCC_OscConfig+0x4f4>)
 80044d8:	4313      	orrs	r3, r2
 80044da:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80044dc:	4b27      	ldr	r3, [pc, #156]	; (800457c <HAL_RCC_OscConfig+0x4fc>)
 80044de:	2201      	movs	r2, #1
 80044e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044e2:	f7fd fe55 	bl	8002190 <HAL_GetTick>
 80044e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80044e8:	e008      	b.n	80044fc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044ea:	f7fd fe51 	bl	8002190 <HAL_GetTick>
 80044ee:	4602      	mov	r2, r0
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	1ad3      	subs	r3, r2, r3
 80044f4:	2b02      	cmp	r3, #2
 80044f6:	d901      	bls.n	80044fc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80044f8:	2303      	movs	r3, #3
 80044fa:	e037      	b.n	800456c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80044fc:	4b1d      	ldr	r3, [pc, #116]	; (8004574 <HAL_RCC_OscConfig+0x4f4>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004504:	2b00      	cmp	r3, #0
 8004506:	d0f0      	beq.n	80044ea <HAL_RCC_OscConfig+0x46a>
 8004508:	e02f      	b.n	800456a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800450a:	4b1c      	ldr	r3, [pc, #112]	; (800457c <HAL_RCC_OscConfig+0x4fc>)
 800450c:	2200      	movs	r2, #0
 800450e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004510:	f7fd fe3e 	bl	8002190 <HAL_GetTick>
 8004514:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004516:	e008      	b.n	800452a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004518:	f7fd fe3a 	bl	8002190 <HAL_GetTick>
 800451c:	4602      	mov	r2, r0
 800451e:	693b      	ldr	r3, [r7, #16]
 8004520:	1ad3      	subs	r3, r2, r3
 8004522:	2b02      	cmp	r3, #2
 8004524:	d901      	bls.n	800452a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004526:	2303      	movs	r3, #3
 8004528:	e020      	b.n	800456c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800452a:	4b12      	ldr	r3, [pc, #72]	; (8004574 <HAL_RCC_OscConfig+0x4f4>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004532:	2b00      	cmp	r3, #0
 8004534:	d1f0      	bne.n	8004518 <HAL_RCC_OscConfig+0x498>
 8004536:	e018      	b.n	800456a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	69db      	ldr	r3, [r3, #28]
 800453c:	2b01      	cmp	r3, #1
 800453e:	d101      	bne.n	8004544 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8004540:	2301      	movs	r3, #1
 8004542:	e013      	b.n	800456c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004544:	4b0b      	ldr	r3, [pc, #44]	; (8004574 <HAL_RCC_OscConfig+0x4f4>)
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6a1b      	ldr	r3, [r3, #32]
 8004554:	429a      	cmp	r2, r3
 8004556:	d106      	bne.n	8004566 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004562:	429a      	cmp	r2, r3
 8004564:	d001      	beq.n	800456a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8004566:	2301      	movs	r3, #1
 8004568:	e000      	b.n	800456c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800456a:	2300      	movs	r3, #0
}
 800456c:	4618      	mov	r0, r3
 800456e:	3718      	adds	r7, #24
 8004570:	46bd      	mov	sp, r7
 8004572:	bd80      	pop	{r7, pc}
 8004574:	40021000 	.word	0x40021000
 8004578:	40007000 	.word	0x40007000
 800457c:	42420060 	.word	0x42420060

08004580 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b084      	sub	sp, #16
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
 8004588:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d101      	bne.n	8004594 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004590:	2301      	movs	r3, #1
 8004592:	e0d0      	b.n	8004736 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004594:	4b6a      	ldr	r3, [pc, #424]	; (8004740 <HAL_RCC_ClockConfig+0x1c0>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f003 0307 	and.w	r3, r3, #7
 800459c:	683a      	ldr	r2, [r7, #0]
 800459e:	429a      	cmp	r2, r3
 80045a0:	d910      	bls.n	80045c4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045a2:	4b67      	ldr	r3, [pc, #412]	; (8004740 <HAL_RCC_ClockConfig+0x1c0>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f023 0207 	bic.w	r2, r3, #7
 80045aa:	4965      	ldr	r1, [pc, #404]	; (8004740 <HAL_RCC_ClockConfig+0x1c0>)
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	4313      	orrs	r3, r2
 80045b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80045b2:	4b63      	ldr	r3, [pc, #396]	; (8004740 <HAL_RCC_ClockConfig+0x1c0>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f003 0307 	and.w	r3, r3, #7
 80045ba:	683a      	ldr	r2, [r7, #0]
 80045bc:	429a      	cmp	r2, r3
 80045be:	d001      	beq.n	80045c4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80045c0:	2301      	movs	r3, #1
 80045c2:	e0b8      	b.n	8004736 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f003 0302 	and.w	r3, r3, #2
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d020      	beq.n	8004612 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f003 0304 	and.w	r3, r3, #4
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d005      	beq.n	80045e8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80045dc:	4b59      	ldr	r3, [pc, #356]	; (8004744 <HAL_RCC_ClockConfig+0x1c4>)
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	4a58      	ldr	r2, [pc, #352]	; (8004744 <HAL_RCC_ClockConfig+0x1c4>)
 80045e2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80045e6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f003 0308 	and.w	r3, r3, #8
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d005      	beq.n	8004600 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80045f4:	4b53      	ldr	r3, [pc, #332]	; (8004744 <HAL_RCC_ClockConfig+0x1c4>)
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	4a52      	ldr	r2, [pc, #328]	; (8004744 <HAL_RCC_ClockConfig+0x1c4>)
 80045fa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80045fe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004600:	4b50      	ldr	r3, [pc, #320]	; (8004744 <HAL_RCC_ClockConfig+0x1c4>)
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	689b      	ldr	r3, [r3, #8]
 800460c:	494d      	ldr	r1, [pc, #308]	; (8004744 <HAL_RCC_ClockConfig+0x1c4>)
 800460e:	4313      	orrs	r3, r2
 8004610:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f003 0301 	and.w	r3, r3, #1
 800461a:	2b00      	cmp	r3, #0
 800461c:	d040      	beq.n	80046a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	2b01      	cmp	r3, #1
 8004624:	d107      	bne.n	8004636 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004626:	4b47      	ldr	r3, [pc, #284]	; (8004744 <HAL_RCC_ClockConfig+0x1c4>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800462e:	2b00      	cmp	r3, #0
 8004630:	d115      	bne.n	800465e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004632:	2301      	movs	r3, #1
 8004634:	e07f      	b.n	8004736 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	2b02      	cmp	r3, #2
 800463c:	d107      	bne.n	800464e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800463e:	4b41      	ldr	r3, [pc, #260]	; (8004744 <HAL_RCC_ClockConfig+0x1c4>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004646:	2b00      	cmp	r3, #0
 8004648:	d109      	bne.n	800465e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800464a:	2301      	movs	r3, #1
 800464c:	e073      	b.n	8004736 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800464e:	4b3d      	ldr	r3, [pc, #244]	; (8004744 <HAL_RCC_ClockConfig+0x1c4>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f003 0302 	and.w	r3, r3, #2
 8004656:	2b00      	cmp	r3, #0
 8004658:	d101      	bne.n	800465e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800465a:	2301      	movs	r3, #1
 800465c:	e06b      	b.n	8004736 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800465e:	4b39      	ldr	r3, [pc, #228]	; (8004744 <HAL_RCC_ClockConfig+0x1c4>)
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	f023 0203 	bic.w	r2, r3, #3
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	4936      	ldr	r1, [pc, #216]	; (8004744 <HAL_RCC_ClockConfig+0x1c4>)
 800466c:	4313      	orrs	r3, r2
 800466e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004670:	f7fd fd8e 	bl	8002190 <HAL_GetTick>
 8004674:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004676:	e00a      	b.n	800468e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004678:	f7fd fd8a 	bl	8002190 <HAL_GetTick>
 800467c:	4602      	mov	r2, r0
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	1ad3      	subs	r3, r2, r3
 8004682:	f241 3288 	movw	r2, #5000	; 0x1388
 8004686:	4293      	cmp	r3, r2
 8004688:	d901      	bls.n	800468e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800468a:	2303      	movs	r3, #3
 800468c:	e053      	b.n	8004736 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800468e:	4b2d      	ldr	r3, [pc, #180]	; (8004744 <HAL_RCC_ClockConfig+0x1c4>)
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	f003 020c 	and.w	r2, r3, #12
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	009b      	lsls	r3, r3, #2
 800469c:	429a      	cmp	r2, r3
 800469e:	d1eb      	bne.n	8004678 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80046a0:	4b27      	ldr	r3, [pc, #156]	; (8004740 <HAL_RCC_ClockConfig+0x1c0>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f003 0307 	and.w	r3, r3, #7
 80046a8:	683a      	ldr	r2, [r7, #0]
 80046aa:	429a      	cmp	r2, r3
 80046ac:	d210      	bcs.n	80046d0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046ae:	4b24      	ldr	r3, [pc, #144]	; (8004740 <HAL_RCC_ClockConfig+0x1c0>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f023 0207 	bic.w	r2, r3, #7
 80046b6:	4922      	ldr	r1, [pc, #136]	; (8004740 <HAL_RCC_ClockConfig+0x1c0>)
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	4313      	orrs	r3, r2
 80046bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046be:	4b20      	ldr	r3, [pc, #128]	; (8004740 <HAL_RCC_ClockConfig+0x1c0>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f003 0307 	and.w	r3, r3, #7
 80046c6:	683a      	ldr	r2, [r7, #0]
 80046c8:	429a      	cmp	r2, r3
 80046ca:	d001      	beq.n	80046d0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80046cc:	2301      	movs	r3, #1
 80046ce:	e032      	b.n	8004736 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f003 0304 	and.w	r3, r3, #4
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d008      	beq.n	80046ee <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80046dc:	4b19      	ldr	r3, [pc, #100]	; (8004744 <HAL_RCC_ClockConfig+0x1c4>)
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	68db      	ldr	r3, [r3, #12]
 80046e8:	4916      	ldr	r1, [pc, #88]	; (8004744 <HAL_RCC_ClockConfig+0x1c4>)
 80046ea:	4313      	orrs	r3, r2
 80046ec:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f003 0308 	and.w	r3, r3, #8
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d009      	beq.n	800470e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80046fa:	4b12      	ldr	r3, [pc, #72]	; (8004744 <HAL_RCC_ClockConfig+0x1c4>)
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	691b      	ldr	r3, [r3, #16]
 8004706:	00db      	lsls	r3, r3, #3
 8004708:	490e      	ldr	r1, [pc, #56]	; (8004744 <HAL_RCC_ClockConfig+0x1c4>)
 800470a:	4313      	orrs	r3, r2
 800470c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800470e:	f000 f821 	bl	8004754 <HAL_RCC_GetSysClockFreq>
 8004712:	4601      	mov	r1, r0
 8004714:	4b0b      	ldr	r3, [pc, #44]	; (8004744 <HAL_RCC_ClockConfig+0x1c4>)
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	091b      	lsrs	r3, r3, #4
 800471a:	f003 030f 	and.w	r3, r3, #15
 800471e:	4a0a      	ldr	r2, [pc, #40]	; (8004748 <HAL_RCC_ClockConfig+0x1c8>)
 8004720:	5cd3      	ldrb	r3, [r2, r3]
 8004722:	fa21 f303 	lsr.w	r3, r1, r3
 8004726:	4a09      	ldr	r2, [pc, #36]	; (800474c <HAL_RCC_ClockConfig+0x1cc>)
 8004728:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800472a:	4b09      	ldr	r3, [pc, #36]	; (8004750 <HAL_RCC_ClockConfig+0x1d0>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4618      	mov	r0, r3
 8004730:	f7fd fad0 	bl	8001cd4 <HAL_InitTick>

  return HAL_OK;
 8004734:	2300      	movs	r3, #0
}
 8004736:	4618      	mov	r0, r3
 8004738:	3710      	adds	r7, #16
 800473a:	46bd      	mov	sp, r7
 800473c:	bd80      	pop	{r7, pc}
 800473e:	bf00      	nop
 8004740:	40022000 	.word	0x40022000
 8004744:	40021000 	.word	0x40021000
 8004748:	08008150 	.word	0x08008150
 800474c:	20000004 	.word	0x20000004
 8004750:	20000008 	.word	0x20000008

08004754 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004754:	b490      	push	{r4, r7}
 8004756:	b08a      	sub	sp, #40	; 0x28
 8004758:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800475a:	4b2a      	ldr	r3, [pc, #168]	; (8004804 <HAL_RCC_GetSysClockFreq+0xb0>)
 800475c:	1d3c      	adds	r4, r7, #4
 800475e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004760:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004764:	4b28      	ldr	r3, [pc, #160]	; (8004808 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004766:	881b      	ldrh	r3, [r3, #0]
 8004768:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800476a:	2300      	movs	r3, #0
 800476c:	61fb      	str	r3, [r7, #28]
 800476e:	2300      	movs	r3, #0
 8004770:	61bb      	str	r3, [r7, #24]
 8004772:	2300      	movs	r3, #0
 8004774:	627b      	str	r3, [r7, #36]	; 0x24
 8004776:	2300      	movs	r3, #0
 8004778:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800477a:	2300      	movs	r3, #0
 800477c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800477e:	4b23      	ldr	r3, [pc, #140]	; (800480c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004784:	69fb      	ldr	r3, [r7, #28]
 8004786:	f003 030c 	and.w	r3, r3, #12
 800478a:	2b04      	cmp	r3, #4
 800478c:	d002      	beq.n	8004794 <HAL_RCC_GetSysClockFreq+0x40>
 800478e:	2b08      	cmp	r3, #8
 8004790:	d003      	beq.n	800479a <HAL_RCC_GetSysClockFreq+0x46>
 8004792:	e02d      	b.n	80047f0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004794:	4b1e      	ldr	r3, [pc, #120]	; (8004810 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004796:	623b      	str	r3, [r7, #32]
      break;
 8004798:	e02d      	b.n	80047f6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800479a:	69fb      	ldr	r3, [r7, #28]
 800479c:	0c9b      	lsrs	r3, r3, #18
 800479e:	f003 030f 	and.w	r3, r3, #15
 80047a2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80047a6:	4413      	add	r3, r2
 80047a8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80047ac:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80047ae:	69fb      	ldr	r3, [r7, #28]
 80047b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d013      	beq.n	80047e0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80047b8:	4b14      	ldr	r3, [pc, #80]	; (800480c <HAL_RCC_GetSysClockFreq+0xb8>)
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	0c5b      	lsrs	r3, r3, #17
 80047be:	f003 0301 	and.w	r3, r3, #1
 80047c2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80047c6:	4413      	add	r3, r2
 80047c8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80047cc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80047ce:	697b      	ldr	r3, [r7, #20]
 80047d0:	4a0f      	ldr	r2, [pc, #60]	; (8004810 <HAL_RCC_GetSysClockFreq+0xbc>)
 80047d2:	fb02 f203 	mul.w	r2, r2, r3
 80047d6:	69bb      	ldr	r3, [r7, #24]
 80047d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80047dc:	627b      	str	r3, [r7, #36]	; 0x24
 80047de:	e004      	b.n	80047ea <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80047e0:	697b      	ldr	r3, [r7, #20]
 80047e2:	4a0c      	ldr	r2, [pc, #48]	; (8004814 <HAL_RCC_GetSysClockFreq+0xc0>)
 80047e4:	fb02 f303 	mul.w	r3, r2, r3
 80047e8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80047ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ec:	623b      	str	r3, [r7, #32]
      break;
 80047ee:	e002      	b.n	80047f6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80047f0:	4b07      	ldr	r3, [pc, #28]	; (8004810 <HAL_RCC_GetSysClockFreq+0xbc>)
 80047f2:	623b      	str	r3, [r7, #32]
      break;
 80047f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80047f6:	6a3b      	ldr	r3, [r7, #32]
}
 80047f8:	4618      	mov	r0, r3
 80047fa:	3728      	adds	r7, #40	; 0x28
 80047fc:	46bd      	mov	sp, r7
 80047fe:	bc90      	pop	{r4, r7}
 8004800:	4770      	bx	lr
 8004802:	bf00      	nop
 8004804:	0800813c 	.word	0x0800813c
 8004808:	0800814c 	.word	0x0800814c
 800480c:	40021000 	.word	0x40021000
 8004810:	007a1200 	.word	0x007a1200
 8004814:	003d0900 	.word	0x003d0900

08004818 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004818:	b480      	push	{r7}
 800481a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800481c:	4b02      	ldr	r3, [pc, #8]	; (8004828 <HAL_RCC_GetHCLKFreq+0x10>)
 800481e:	681b      	ldr	r3, [r3, #0]
}
 8004820:	4618      	mov	r0, r3
 8004822:	46bd      	mov	sp, r7
 8004824:	bc80      	pop	{r7}
 8004826:	4770      	bx	lr
 8004828:	20000004 	.word	0x20000004

0800482c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004830:	f7ff fff2 	bl	8004818 <HAL_RCC_GetHCLKFreq>
 8004834:	4601      	mov	r1, r0
 8004836:	4b05      	ldr	r3, [pc, #20]	; (800484c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	0a1b      	lsrs	r3, r3, #8
 800483c:	f003 0307 	and.w	r3, r3, #7
 8004840:	4a03      	ldr	r2, [pc, #12]	; (8004850 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004842:	5cd3      	ldrb	r3, [r2, r3]
 8004844:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004848:	4618      	mov	r0, r3
 800484a:	bd80      	pop	{r7, pc}
 800484c:	40021000 	.word	0x40021000
 8004850:	08008160 	.word	0x08008160

08004854 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004858:	f7ff ffde 	bl	8004818 <HAL_RCC_GetHCLKFreq>
 800485c:	4601      	mov	r1, r0
 800485e:	4b05      	ldr	r3, [pc, #20]	; (8004874 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	0adb      	lsrs	r3, r3, #11
 8004864:	f003 0307 	and.w	r3, r3, #7
 8004868:	4a03      	ldr	r2, [pc, #12]	; (8004878 <HAL_RCC_GetPCLK2Freq+0x24>)
 800486a:	5cd3      	ldrb	r3, [r2, r3]
 800486c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004870:	4618      	mov	r0, r3
 8004872:	bd80      	pop	{r7, pc}
 8004874:	40021000 	.word	0x40021000
 8004878:	08008160 	.word	0x08008160

0800487c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800487c:	b480      	push	{r7}
 800487e:	b083      	sub	sp, #12
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
 8004884:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	220f      	movs	r2, #15
 800488a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800488c:	4b11      	ldr	r3, [pc, #68]	; (80048d4 <HAL_RCC_GetClockConfig+0x58>)
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	f003 0203 	and.w	r2, r3, #3
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004898:	4b0e      	ldr	r3, [pc, #56]	; (80048d4 <HAL_RCC_GetClockConfig+0x58>)
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80048a4:	4b0b      	ldr	r3, [pc, #44]	; (80048d4 <HAL_RCC_GetClockConfig+0x58>)
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80048b0:	4b08      	ldr	r3, [pc, #32]	; (80048d4 <HAL_RCC_GetClockConfig+0x58>)
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	08db      	lsrs	r3, r3, #3
 80048b6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80048be:	4b06      	ldr	r3, [pc, #24]	; (80048d8 <HAL_RCC_GetClockConfig+0x5c>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f003 0207 	and.w	r2, r3, #7
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80048ca:	bf00      	nop
 80048cc:	370c      	adds	r7, #12
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bc80      	pop	{r7}
 80048d2:	4770      	bx	lr
 80048d4:	40021000 	.word	0x40021000
 80048d8:	40022000 	.word	0x40022000

080048dc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80048dc:	b480      	push	{r7}
 80048de:	b085      	sub	sp, #20
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80048e4:	4b0a      	ldr	r3, [pc, #40]	; (8004910 <RCC_Delay+0x34>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a0a      	ldr	r2, [pc, #40]	; (8004914 <RCC_Delay+0x38>)
 80048ea:	fba2 2303 	umull	r2, r3, r2, r3
 80048ee:	0a5b      	lsrs	r3, r3, #9
 80048f0:	687a      	ldr	r2, [r7, #4]
 80048f2:	fb02 f303 	mul.w	r3, r2, r3
 80048f6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80048f8:	bf00      	nop
  }
  while (Delay --);
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	1e5a      	subs	r2, r3, #1
 80048fe:	60fa      	str	r2, [r7, #12]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d1f9      	bne.n	80048f8 <RCC_Delay+0x1c>
}
 8004904:	bf00      	nop
 8004906:	3714      	adds	r7, #20
 8004908:	46bd      	mov	sp, r7
 800490a:	bc80      	pop	{r7}
 800490c:	4770      	bx	lr
 800490e:	bf00      	nop
 8004910:	20000004 	.word	0x20000004
 8004914:	10624dd3 	.word	0x10624dd3

08004918 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b082      	sub	sp, #8
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d101      	bne.n	800492a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004926:	2301      	movs	r3, #1
 8004928:	e01d      	b.n	8004966 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004930:	b2db      	uxtb	r3, r3
 8004932:	2b00      	cmp	r3, #0
 8004934:	d106      	bne.n	8004944 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2200      	movs	r2, #0
 800493a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800493e:	6878      	ldr	r0, [r7, #4]
 8004940:	f000 f815 	bl	800496e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2202      	movs	r2, #2
 8004948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681a      	ldr	r2, [r3, #0]
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	3304      	adds	r3, #4
 8004954:	4619      	mov	r1, r3
 8004956:	4610      	mov	r0, r2
 8004958:	f000 f962 	bl	8004c20 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2201      	movs	r2, #1
 8004960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004964:	2300      	movs	r3, #0
}
 8004966:	4618      	mov	r0, r3
 8004968:	3708      	adds	r7, #8
 800496a:	46bd      	mov	sp, r7
 800496c:	bd80      	pop	{r7, pc}

0800496e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800496e:	b480      	push	{r7}
 8004970:	b083      	sub	sp, #12
 8004972:	af00      	add	r7, sp, #0
 8004974:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004976:	bf00      	nop
 8004978:	370c      	adds	r7, #12
 800497a:	46bd      	mov	sp, r7
 800497c:	bc80      	pop	{r7}
 800497e:	4770      	bx	lr

08004980 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004980:	b480      	push	{r7}
 8004982:	b085      	sub	sp, #20
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	68da      	ldr	r2, [r3, #12]
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f042 0201 	orr.w	r2, r2, #1
 8004996:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	689b      	ldr	r3, [r3, #8]
 800499e:	f003 0307 	and.w	r3, r3, #7
 80049a2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	2b06      	cmp	r3, #6
 80049a8:	d007      	beq.n	80049ba <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	681a      	ldr	r2, [r3, #0]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f042 0201 	orr.w	r2, r2, #1
 80049b8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80049ba:	2300      	movs	r3, #0
}
 80049bc:	4618      	mov	r0, r3
 80049be:	3714      	adds	r7, #20
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bc80      	pop	{r7}
 80049c4:	4770      	bx	lr

080049c6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80049c6:	b580      	push	{r7, lr}
 80049c8:	b082      	sub	sp, #8
 80049ca:	af00      	add	r7, sp, #0
 80049cc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	691b      	ldr	r3, [r3, #16]
 80049d4:	f003 0302 	and.w	r3, r3, #2
 80049d8:	2b02      	cmp	r3, #2
 80049da:	d122      	bne.n	8004a22 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	68db      	ldr	r3, [r3, #12]
 80049e2:	f003 0302 	and.w	r3, r3, #2
 80049e6:	2b02      	cmp	r3, #2
 80049e8:	d11b      	bne.n	8004a22 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f06f 0202 	mvn.w	r2, #2
 80049f2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2201      	movs	r2, #1
 80049f8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	699b      	ldr	r3, [r3, #24]
 8004a00:	f003 0303 	and.w	r3, r3, #3
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d003      	beq.n	8004a10 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004a08:	6878      	ldr	r0, [r7, #4]
 8004a0a:	f000 f8ed 	bl	8004be8 <HAL_TIM_IC_CaptureCallback>
 8004a0e:	e005      	b.n	8004a1c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a10:	6878      	ldr	r0, [r7, #4]
 8004a12:	f000 f8e0 	bl	8004bd6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a16:	6878      	ldr	r0, [r7, #4]
 8004a18:	f000 f8ef 	bl	8004bfa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2200      	movs	r2, #0
 8004a20:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	691b      	ldr	r3, [r3, #16]
 8004a28:	f003 0304 	and.w	r3, r3, #4
 8004a2c:	2b04      	cmp	r3, #4
 8004a2e:	d122      	bne.n	8004a76 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	68db      	ldr	r3, [r3, #12]
 8004a36:	f003 0304 	and.w	r3, r3, #4
 8004a3a:	2b04      	cmp	r3, #4
 8004a3c:	d11b      	bne.n	8004a76 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f06f 0204 	mvn.w	r2, #4
 8004a46:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2202      	movs	r2, #2
 8004a4c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	699b      	ldr	r3, [r3, #24]
 8004a54:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d003      	beq.n	8004a64 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a5c:	6878      	ldr	r0, [r7, #4]
 8004a5e:	f000 f8c3 	bl	8004be8 <HAL_TIM_IC_CaptureCallback>
 8004a62:	e005      	b.n	8004a70 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a64:	6878      	ldr	r0, [r7, #4]
 8004a66:	f000 f8b6 	bl	8004bd6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a6a:	6878      	ldr	r0, [r7, #4]
 8004a6c:	f000 f8c5 	bl	8004bfa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2200      	movs	r2, #0
 8004a74:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	691b      	ldr	r3, [r3, #16]
 8004a7c:	f003 0308 	and.w	r3, r3, #8
 8004a80:	2b08      	cmp	r3, #8
 8004a82:	d122      	bne.n	8004aca <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	68db      	ldr	r3, [r3, #12]
 8004a8a:	f003 0308 	and.w	r3, r3, #8
 8004a8e:	2b08      	cmp	r3, #8
 8004a90:	d11b      	bne.n	8004aca <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f06f 0208 	mvn.w	r2, #8
 8004a9a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2204      	movs	r2, #4
 8004aa0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	69db      	ldr	r3, [r3, #28]
 8004aa8:	f003 0303 	and.w	r3, r3, #3
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d003      	beq.n	8004ab8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ab0:	6878      	ldr	r0, [r7, #4]
 8004ab2:	f000 f899 	bl	8004be8 <HAL_TIM_IC_CaptureCallback>
 8004ab6:	e005      	b.n	8004ac4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ab8:	6878      	ldr	r0, [r7, #4]
 8004aba:	f000 f88c 	bl	8004bd6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004abe:	6878      	ldr	r0, [r7, #4]
 8004ac0:	f000 f89b 	bl	8004bfa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	691b      	ldr	r3, [r3, #16]
 8004ad0:	f003 0310 	and.w	r3, r3, #16
 8004ad4:	2b10      	cmp	r3, #16
 8004ad6:	d122      	bne.n	8004b1e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	68db      	ldr	r3, [r3, #12]
 8004ade:	f003 0310 	and.w	r3, r3, #16
 8004ae2:	2b10      	cmp	r3, #16
 8004ae4:	d11b      	bne.n	8004b1e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f06f 0210 	mvn.w	r2, #16
 8004aee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2208      	movs	r2, #8
 8004af4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	69db      	ldr	r3, [r3, #28]
 8004afc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d003      	beq.n	8004b0c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b04:	6878      	ldr	r0, [r7, #4]
 8004b06:	f000 f86f 	bl	8004be8 <HAL_TIM_IC_CaptureCallback>
 8004b0a:	e005      	b.n	8004b18 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b0c:	6878      	ldr	r0, [r7, #4]
 8004b0e:	f000 f862 	bl	8004bd6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b12:	6878      	ldr	r0, [r7, #4]
 8004b14:	f000 f871 	bl	8004bfa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	691b      	ldr	r3, [r3, #16]
 8004b24:	f003 0301 	and.w	r3, r3, #1
 8004b28:	2b01      	cmp	r3, #1
 8004b2a:	d10e      	bne.n	8004b4a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	68db      	ldr	r3, [r3, #12]
 8004b32:	f003 0301 	and.w	r3, r3, #1
 8004b36:	2b01      	cmp	r3, #1
 8004b38:	d107      	bne.n	8004b4a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f06f 0201 	mvn.w	r2, #1
 8004b42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004b44:	6878      	ldr	r0, [r7, #4]
 8004b46:	f7fc fbb1 	bl	80012ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	691b      	ldr	r3, [r3, #16]
 8004b50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b54:	2b80      	cmp	r3, #128	; 0x80
 8004b56:	d10e      	bne.n	8004b76 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	68db      	ldr	r3, [r3, #12]
 8004b5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b62:	2b80      	cmp	r3, #128	; 0x80
 8004b64:	d107      	bne.n	8004b76 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004b6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004b70:	6878      	ldr	r0, [r7, #4]
 8004b72:	f000 f8c0 	bl	8004cf6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	691b      	ldr	r3, [r3, #16]
 8004b7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b80:	2b40      	cmp	r3, #64	; 0x40
 8004b82:	d10e      	bne.n	8004ba2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	68db      	ldr	r3, [r3, #12]
 8004b8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b8e:	2b40      	cmp	r3, #64	; 0x40
 8004b90:	d107      	bne.n	8004ba2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004b9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004b9c:	6878      	ldr	r0, [r7, #4]
 8004b9e:	f000 f835 	bl	8004c0c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	691b      	ldr	r3, [r3, #16]
 8004ba8:	f003 0320 	and.w	r3, r3, #32
 8004bac:	2b20      	cmp	r3, #32
 8004bae:	d10e      	bne.n	8004bce <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	68db      	ldr	r3, [r3, #12]
 8004bb6:	f003 0320 	and.w	r3, r3, #32
 8004bba:	2b20      	cmp	r3, #32
 8004bbc:	d107      	bne.n	8004bce <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f06f 0220 	mvn.w	r2, #32
 8004bc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004bc8:	6878      	ldr	r0, [r7, #4]
 8004bca:	f000 f88b 	bl	8004ce4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004bce:	bf00      	nop
 8004bd0:	3708      	adds	r7, #8
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bd80      	pop	{r7, pc}

08004bd6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004bd6:	b480      	push	{r7}
 8004bd8:	b083      	sub	sp, #12
 8004bda:	af00      	add	r7, sp, #0
 8004bdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004bde:	bf00      	nop
 8004be0:	370c      	adds	r7, #12
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bc80      	pop	{r7}
 8004be6:	4770      	bx	lr

08004be8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004be8:	b480      	push	{r7}
 8004bea:	b083      	sub	sp, #12
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004bf0:	bf00      	nop
 8004bf2:	370c      	adds	r7, #12
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bc80      	pop	{r7}
 8004bf8:	4770      	bx	lr

08004bfa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004bfa:	b480      	push	{r7}
 8004bfc:	b083      	sub	sp, #12
 8004bfe:	af00      	add	r7, sp, #0
 8004c00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004c02:	bf00      	nop
 8004c04:	370c      	adds	r7, #12
 8004c06:	46bd      	mov	sp, r7
 8004c08:	bc80      	pop	{r7}
 8004c0a:	4770      	bx	lr

08004c0c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b083      	sub	sp, #12
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004c14:	bf00      	nop
 8004c16:	370c      	adds	r7, #12
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	bc80      	pop	{r7}
 8004c1c:	4770      	bx	lr
	...

08004c20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004c20:	b480      	push	{r7}
 8004c22:	b085      	sub	sp, #20
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
 8004c28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	4a29      	ldr	r2, [pc, #164]	; (8004cd8 <TIM_Base_SetConfig+0xb8>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d00b      	beq.n	8004c50 <TIM_Base_SetConfig+0x30>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c3e:	d007      	beq.n	8004c50 <TIM_Base_SetConfig+0x30>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	4a26      	ldr	r2, [pc, #152]	; (8004cdc <TIM_Base_SetConfig+0xbc>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d003      	beq.n	8004c50 <TIM_Base_SetConfig+0x30>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	4a25      	ldr	r2, [pc, #148]	; (8004ce0 <TIM_Base_SetConfig+0xc0>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d108      	bne.n	8004c62 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c56:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	685b      	ldr	r3, [r3, #4]
 8004c5c:	68fa      	ldr	r2, [r7, #12]
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	4a1c      	ldr	r2, [pc, #112]	; (8004cd8 <TIM_Base_SetConfig+0xb8>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d00b      	beq.n	8004c82 <TIM_Base_SetConfig+0x62>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c70:	d007      	beq.n	8004c82 <TIM_Base_SetConfig+0x62>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	4a19      	ldr	r2, [pc, #100]	; (8004cdc <TIM_Base_SetConfig+0xbc>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d003      	beq.n	8004c82 <TIM_Base_SetConfig+0x62>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	4a18      	ldr	r2, [pc, #96]	; (8004ce0 <TIM_Base_SetConfig+0xc0>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d108      	bne.n	8004c94 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	68db      	ldr	r3, [r3, #12]
 8004c8e:	68fa      	ldr	r2, [r7, #12]
 8004c90:	4313      	orrs	r3, r2
 8004c92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	695b      	ldr	r3, [r3, #20]
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	68fa      	ldr	r2, [r7, #12]
 8004ca6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	689a      	ldr	r2, [r3, #8]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	681a      	ldr	r2, [r3, #0]
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	4a07      	ldr	r2, [pc, #28]	; (8004cd8 <TIM_Base_SetConfig+0xb8>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d103      	bne.n	8004cc8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	691a      	ldr	r2, [r3, #16]
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2201      	movs	r2, #1
 8004ccc:	615a      	str	r2, [r3, #20]
}
 8004cce:	bf00      	nop
 8004cd0:	3714      	adds	r7, #20
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bc80      	pop	{r7}
 8004cd6:	4770      	bx	lr
 8004cd8:	40012c00 	.word	0x40012c00
 8004cdc:	40000400 	.word	0x40000400
 8004ce0:	40000800 	.word	0x40000800

08004ce4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	b083      	sub	sp, #12
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004cec:	bf00      	nop
 8004cee:	370c      	adds	r7, #12
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	bc80      	pop	{r7}
 8004cf4:	4770      	bx	lr

08004cf6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004cf6:	b480      	push	{r7}
 8004cf8:	b083      	sub	sp, #12
 8004cfa:	af00      	add	r7, sp, #0
 8004cfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004cfe:	bf00      	nop
 8004d00:	370c      	adds	r7, #12
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bc80      	pop	{r7}
 8004d06:	4770      	bx	lr

08004d08 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b082      	sub	sp, #8
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d101      	bne.n	8004d1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d16:	2301      	movs	r3, #1
 8004d18:	e03f      	b.n	8004d9a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004d20:	b2db      	uxtb	r3, r3
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d106      	bne.n	8004d34 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2200      	movs	r2, #0
 8004d2a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d2e:	6878      	ldr	r0, [r7, #4]
 8004d30:	f7fd f930 	bl	8001f94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2224      	movs	r2, #36	; 0x24
 8004d38:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	68da      	ldr	r2, [r3, #12]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004d4a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004d4c:	6878      	ldr	r0, [r7, #4]
 8004d4e:	f000 fbe7 	bl	8005520 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	691a      	ldr	r2, [r3, #16]
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004d60:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	695a      	ldr	r2, [r3, #20]
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004d70:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	68da      	ldr	r2, [r3, #12]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004d80:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2200      	movs	r2, #0
 8004d86:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2220      	movs	r2, #32
 8004d8c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2220      	movs	r2, #32
 8004d94:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004d98:	2300      	movs	r3, #0
}
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	3708      	adds	r7, #8
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bd80      	pop	{r7, pc}

08004da2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004da2:	b580      	push	{r7, lr}
 8004da4:	b088      	sub	sp, #32
 8004da6:	af02      	add	r7, sp, #8
 8004da8:	60f8      	str	r0, [r7, #12]
 8004daa:	60b9      	str	r1, [r7, #8]
 8004dac:	603b      	str	r3, [r7, #0]
 8004dae:	4613      	mov	r3, r2
 8004db0:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8004db2:	2300      	movs	r3, #0
 8004db4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004dbc:	b2db      	uxtb	r3, r3
 8004dbe:	2b20      	cmp	r3, #32
 8004dc0:	f040 8083 	bne.w	8004eca <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8004dc4:	68bb      	ldr	r3, [r7, #8]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d002      	beq.n	8004dd0 <HAL_UART_Transmit+0x2e>
 8004dca:	88fb      	ldrh	r3, [r7, #6]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d101      	bne.n	8004dd4 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	e07b      	b.n	8004ecc <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004dda:	2b01      	cmp	r3, #1
 8004ddc:	d101      	bne.n	8004de2 <HAL_UART_Transmit+0x40>
 8004dde:	2302      	movs	r3, #2
 8004de0:	e074      	b.n	8004ecc <HAL_UART_Transmit+0x12a>
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	2201      	movs	r2, #1
 8004de6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	2200      	movs	r2, #0
 8004dee:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	2221      	movs	r2, #33	; 0x21
 8004df4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004df8:	f7fd f9ca 	bl	8002190 <HAL_GetTick>
 8004dfc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	88fa      	ldrh	r2, [r7, #6]
 8004e02:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	88fa      	ldrh	r2, [r7, #6]
 8004e08:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004e0a:	e042      	b.n	8004e92 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004e10:	b29b      	uxth	r3, r3
 8004e12:	3b01      	subs	r3, #1
 8004e14:	b29a      	uxth	r2, r3
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	689b      	ldr	r3, [r3, #8]
 8004e1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e22:	d122      	bne.n	8004e6a <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	9300      	str	r3, [sp, #0]
 8004e28:	697b      	ldr	r3, [r7, #20]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	2180      	movs	r1, #128	; 0x80
 8004e2e:	68f8      	ldr	r0, [r7, #12]
 8004e30:	f000 fa0d 	bl	800524e <UART_WaitOnFlagUntilTimeout>
 8004e34:	4603      	mov	r3, r0
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d001      	beq.n	8004e3e <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8004e3a:	2303      	movs	r3, #3
 8004e3c:	e046      	b.n	8004ecc <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8004e3e:	68bb      	ldr	r3, [r7, #8]
 8004e40:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8004e42:	693b      	ldr	r3, [r7, #16]
 8004e44:	881b      	ldrh	r3, [r3, #0]
 8004e46:	461a      	mov	r2, r3
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e50:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	691b      	ldr	r3, [r3, #16]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d103      	bne.n	8004e62 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	3302      	adds	r3, #2
 8004e5e:	60bb      	str	r3, [r7, #8]
 8004e60:	e017      	b.n	8004e92 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8004e62:	68bb      	ldr	r3, [r7, #8]
 8004e64:	3301      	adds	r3, #1
 8004e66:	60bb      	str	r3, [r7, #8]
 8004e68:	e013      	b.n	8004e92 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	9300      	str	r3, [sp, #0]
 8004e6e:	697b      	ldr	r3, [r7, #20]
 8004e70:	2200      	movs	r2, #0
 8004e72:	2180      	movs	r1, #128	; 0x80
 8004e74:	68f8      	ldr	r0, [r7, #12]
 8004e76:	f000 f9ea 	bl	800524e <UART_WaitOnFlagUntilTimeout>
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d001      	beq.n	8004e84 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8004e80:	2303      	movs	r3, #3
 8004e82:	e023      	b.n	8004ecc <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	1c5a      	adds	r2, r3, #1
 8004e88:	60ba      	str	r2, [r7, #8]
 8004e8a:	781a      	ldrb	r2, [r3, #0]
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004e96:	b29b      	uxth	r3, r3
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d1b7      	bne.n	8004e0c <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	9300      	str	r3, [sp, #0]
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	2140      	movs	r1, #64	; 0x40
 8004ea6:	68f8      	ldr	r0, [r7, #12]
 8004ea8:	f000 f9d1 	bl	800524e <UART_WaitOnFlagUntilTimeout>
 8004eac:	4603      	mov	r3, r0
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d001      	beq.n	8004eb6 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004eb2:	2303      	movs	r3, #3
 8004eb4:	e00a      	b.n	8004ecc <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	2220      	movs	r2, #32
 8004eba:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	e000      	b.n	8004ecc <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8004eca:	2302      	movs	r3, #2
  }
}
 8004ecc:	4618      	mov	r0, r3
 8004ece:	3718      	adds	r7, #24
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bd80      	pop	{r7, pc}

08004ed4 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b088      	sub	sp, #32
 8004ed8:	af02      	add	r7, sp, #8
 8004eda:	60f8      	str	r0, [r7, #12]
 8004edc:	60b9      	str	r1, [r7, #8]
 8004ede:	603b      	str	r3, [r7, #0]
 8004ee0:	4613      	mov	r3, r2
 8004ee2:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004eee:	b2db      	uxtb	r3, r3
 8004ef0:	2b20      	cmp	r3, #32
 8004ef2:	f040 8090 	bne.w	8005016 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d002      	beq.n	8004f02 <HAL_UART_Receive+0x2e>
 8004efc:	88fb      	ldrh	r3, [r7, #6]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d101      	bne.n	8004f06 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8004f02:	2301      	movs	r3, #1
 8004f04:	e088      	b.n	8005018 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004f0c:	2b01      	cmp	r3, #1
 8004f0e:	d101      	bne.n	8004f14 <HAL_UART_Receive+0x40>
 8004f10:	2302      	movs	r3, #2
 8004f12:	e081      	b.n	8005018 <HAL_UART_Receive+0x144>
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	2201      	movs	r2, #1
 8004f18:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	2222      	movs	r2, #34	; 0x22
 8004f26:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004f2a:	f7fd f931 	bl	8002190 <HAL_GetTick>
 8004f2e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	88fa      	ldrh	r2, [r7, #6]
 8004f34:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	88fa      	ldrh	r2, [r7, #6]
 8004f3a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8004f3c:	e05c      	b.n	8004ff8 <HAL_UART_Receive+0x124>
    {
      huart->RxXferCount--;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004f42:	b29b      	uxth	r3, r3
 8004f44:	3b01      	subs	r3, #1
 8004f46:	b29a      	uxth	r2, r3
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	689b      	ldr	r3, [r3, #8]
 8004f50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f54:	d12b      	bne.n	8004fae <HAL_UART_Receive+0xda>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	9300      	str	r3, [sp, #0]
 8004f5a:	697b      	ldr	r3, [r7, #20]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	2120      	movs	r1, #32
 8004f60:	68f8      	ldr	r0, [r7, #12]
 8004f62:	f000 f974 	bl	800524e <UART_WaitOnFlagUntilTimeout>
 8004f66:	4603      	mov	r3, r0
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d001      	beq.n	8004f70 <HAL_UART_Receive+0x9c>
        {
          return HAL_TIMEOUT;
 8004f6c:	2303      	movs	r3, #3
 8004f6e:	e053      	b.n	8005018 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	691b      	ldr	r3, [r3, #16]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d10c      	bne.n	8004f96 <HAL_UART_Receive+0xc2>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	b29b      	uxth	r3, r3
 8004f84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f88:	b29a      	uxth	r2, r3
 8004f8a:	693b      	ldr	r3, [r7, #16]
 8004f8c:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 8004f8e:	68bb      	ldr	r3, [r7, #8]
 8004f90:	3302      	adds	r3, #2
 8004f92:	60bb      	str	r3, [r7, #8]
 8004f94:	e030      	b.n	8004ff8 <HAL_UART_Receive+0x124>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	685b      	ldr	r3, [r3, #4]
 8004f9c:	b29b      	uxth	r3, r3
 8004f9e:	b2db      	uxtb	r3, r3
 8004fa0:	b29a      	uxth	r2, r3
 8004fa2:	693b      	ldr	r3, [r7, #16]
 8004fa4:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	3301      	adds	r3, #1
 8004faa:	60bb      	str	r3, [r7, #8]
 8004fac:	e024      	b.n	8004ff8 <HAL_UART_Receive+0x124>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	9300      	str	r3, [sp, #0]
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	2120      	movs	r1, #32
 8004fb8:	68f8      	ldr	r0, [r7, #12]
 8004fba:	f000 f948 	bl	800524e <UART_WaitOnFlagUntilTimeout>
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d001      	beq.n	8004fc8 <HAL_UART_Receive+0xf4>
        {
          return HAL_TIMEOUT;
 8004fc4:	2303      	movs	r3, #3
 8004fc6:	e027      	b.n	8005018 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	691b      	ldr	r3, [r3, #16]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d108      	bne.n	8004fe2 <HAL_UART_Receive+0x10e>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	6859      	ldr	r1, [r3, #4]
 8004fd6:	68bb      	ldr	r3, [r7, #8]
 8004fd8:	1c5a      	adds	r2, r3, #1
 8004fda:	60ba      	str	r2, [r7, #8]
 8004fdc:	b2ca      	uxtb	r2, r1
 8004fde:	701a      	strb	r2, [r3, #0]
 8004fe0:	e00a      	b.n	8004ff8 <HAL_UART_Receive+0x124>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	b2da      	uxtb	r2, r3
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	1c59      	adds	r1, r3, #1
 8004fee:	60b9      	str	r1, [r7, #8]
 8004ff0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004ff4:	b2d2      	uxtb	r2, r2
 8004ff6:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004ffc:	b29b      	uxth	r3, r3
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d19d      	bne.n	8004f3e <HAL_UART_Receive+0x6a>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	2220      	movs	r2, #32
 8005006:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	2200      	movs	r2, #0
 800500e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8005012:	2300      	movs	r3, #0
 8005014:	e000      	b.n	8005018 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 8005016:	2302      	movs	r3, #2
  }
}
 8005018:	4618      	mov	r0, r3
 800501a:	3718      	adds	r7, #24
 800501c:	46bd      	mov	sp, r7
 800501e:	bd80      	pop	{r7, pc}

08005020 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b088      	sub	sp, #32
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	68db      	ldr	r3, [r3, #12]
 8005036:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	695b      	ldr	r3, [r3, #20]
 800503e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8005040:	2300      	movs	r3, #0
 8005042:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8005044:	2300      	movs	r3, #0
 8005046:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005048:	69fb      	ldr	r3, [r7, #28]
 800504a:	f003 030f 	and.w	r3, r3, #15
 800504e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8005050:	693b      	ldr	r3, [r7, #16]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d10d      	bne.n	8005072 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005056:	69fb      	ldr	r3, [r7, #28]
 8005058:	f003 0320 	and.w	r3, r3, #32
 800505c:	2b00      	cmp	r3, #0
 800505e:	d008      	beq.n	8005072 <HAL_UART_IRQHandler+0x52>
 8005060:	69bb      	ldr	r3, [r7, #24]
 8005062:	f003 0320 	and.w	r3, r3, #32
 8005066:	2b00      	cmp	r3, #0
 8005068:	d003      	beq.n	8005072 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800506a:	6878      	ldr	r0, [r7, #4]
 800506c:	f000 f9d7 	bl	800541e <UART_Receive_IT>
      return;
 8005070:	e0cc      	b.n	800520c <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005072:	693b      	ldr	r3, [r7, #16]
 8005074:	2b00      	cmp	r3, #0
 8005076:	f000 80ab 	beq.w	80051d0 <HAL_UART_IRQHandler+0x1b0>
 800507a:	697b      	ldr	r3, [r7, #20]
 800507c:	f003 0301 	and.w	r3, r3, #1
 8005080:	2b00      	cmp	r3, #0
 8005082:	d105      	bne.n	8005090 <HAL_UART_IRQHandler+0x70>
 8005084:	69bb      	ldr	r3, [r7, #24]
 8005086:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800508a:	2b00      	cmp	r3, #0
 800508c:	f000 80a0 	beq.w	80051d0 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005090:	69fb      	ldr	r3, [r7, #28]
 8005092:	f003 0301 	and.w	r3, r3, #1
 8005096:	2b00      	cmp	r3, #0
 8005098:	d00a      	beq.n	80050b0 <HAL_UART_IRQHandler+0x90>
 800509a:	69bb      	ldr	r3, [r7, #24]
 800509c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d005      	beq.n	80050b0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050a8:	f043 0201 	orr.w	r2, r3, #1
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80050b0:	69fb      	ldr	r3, [r7, #28]
 80050b2:	f003 0304 	and.w	r3, r3, #4
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d00a      	beq.n	80050d0 <HAL_UART_IRQHandler+0xb0>
 80050ba:	697b      	ldr	r3, [r7, #20]
 80050bc:	f003 0301 	and.w	r3, r3, #1
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d005      	beq.n	80050d0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050c8:	f043 0202 	orr.w	r2, r3, #2
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80050d0:	69fb      	ldr	r3, [r7, #28]
 80050d2:	f003 0302 	and.w	r3, r3, #2
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d00a      	beq.n	80050f0 <HAL_UART_IRQHandler+0xd0>
 80050da:	697b      	ldr	r3, [r7, #20]
 80050dc:	f003 0301 	and.w	r3, r3, #1
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d005      	beq.n	80050f0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050e8:	f043 0204 	orr.w	r2, r3, #4
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80050f0:	69fb      	ldr	r3, [r7, #28]
 80050f2:	f003 0308 	and.w	r3, r3, #8
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d00a      	beq.n	8005110 <HAL_UART_IRQHandler+0xf0>
 80050fa:	697b      	ldr	r3, [r7, #20]
 80050fc:	f003 0301 	and.w	r3, r3, #1
 8005100:	2b00      	cmp	r3, #0
 8005102:	d005      	beq.n	8005110 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005108:	f043 0208 	orr.w	r2, r3, #8
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005114:	2b00      	cmp	r3, #0
 8005116:	d078      	beq.n	800520a <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005118:	69fb      	ldr	r3, [r7, #28]
 800511a:	f003 0320 	and.w	r3, r3, #32
 800511e:	2b00      	cmp	r3, #0
 8005120:	d007      	beq.n	8005132 <HAL_UART_IRQHandler+0x112>
 8005122:	69bb      	ldr	r3, [r7, #24]
 8005124:	f003 0320 	and.w	r3, r3, #32
 8005128:	2b00      	cmp	r3, #0
 800512a:	d002      	beq.n	8005132 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 800512c:	6878      	ldr	r0, [r7, #4]
 800512e:	f000 f976 	bl	800541e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	695b      	ldr	r3, [r3, #20]
 8005138:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800513c:	2b00      	cmp	r3, #0
 800513e:	bf14      	ite	ne
 8005140:	2301      	movne	r3, #1
 8005142:	2300      	moveq	r3, #0
 8005144:	b2db      	uxtb	r3, r3
 8005146:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800514c:	f003 0308 	and.w	r3, r3, #8
 8005150:	2b00      	cmp	r3, #0
 8005152:	d102      	bne.n	800515a <HAL_UART_IRQHandler+0x13a>
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d031      	beq.n	80051be <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800515a:	6878      	ldr	r0, [r7, #4]
 800515c:	f000 f8c1 	bl	80052e2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	695b      	ldr	r3, [r3, #20]
 8005166:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800516a:	2b00      	cmp	r3, #0
 800516c:	d023      	beq.n	80051b6 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	695a      	ldr	r2, [r3, #20]
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800517c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005182:	2b00      	cmp	r3, #0
 8005184:	d013      	beq.n	80051ae <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800518a:	4a22      	ldr	r2, [pc, #136]	; (8005214 <HAL_UART_IRQHandler+0x1f4>)
 800518c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005192:	4618      	mov	r0, r3
 8005194:	f7fd f940 	bl	8002418 <HAL_DMA_Abort_IT>
 8005198:	4603      	mov	r3, r0
 800519a:	2b00      	cmp	r3, #0
 800519c:	d016      	beq.n	80051cc <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051a4:	687a      	ldr	r2, [r7, #4]
 80051a6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80051a8:	4610      	mov	r0, r2
 80051aa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051ac:	e00e      	b.n	80051cc <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80051ae:	6878      	ldr	r0, [r7, #4]
 80051b0:	f000 f844 	bl	800523c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051b4:	e00a      	b.n	80051cc <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80051b6:	6878      	ldr	r0, [r7, #4]
 80051b8:	f000 f840 	bl	800523c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051bc:	e006      	b.n	80051cc <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80051be:	6878      	ldr	r0, [r7, #4]
 80051c0:	f000 f83c 	bl	800523c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2200      	movs	r2, #0
 80051c8:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80051ca:	e01e      	b.n	800520a <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051cc:	bf00      	nop
    return;
 80051ce:	e01c      	b.n	800520a <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80051d0:	69fb      	ldr	r3, [r7, #28]
 80051d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d008      	beq.n	80051ec <HAL_UART_IRQHandler+0x1cc>
 80051da:	69bb      	ldr	r3, [r7, #24]
 80051dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d003      	beq.n	80051ec <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 80051e4:	6878      	ldr	r0, [r7, #4]
 80051e6:	f000 f8ad 	bl	8005344 <UART_Transmit_IT>
    return;
 80051ea:	e00f      	b.n	800520c <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80051ec:	69fb      	ldr	r3, [r7, #28]
 80051ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d00a      	beq.n	800520c <HAL_UART_IRQHandler+0x1ec>
 80051f6:	69bb      	ldr	r3, [r7, #24]
 80051f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d005      	beq.n	800520c <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8005200:	6878      	ldr	r0, [r7, #4]
 8005202:	f000 f8f4 	bl	80053ee <UART_EndTransmit_IT>
    return;
 8005206:	bf00      	nop
 8005208:	e000      	b.n	800520c <HAL_UART_IRQHandler+0x1ec>
    return;
 800520a:	bf00      	nop
  }
}
 800520c:	3720      	adds	r7, #32
 800520e:	46bd      	mov	sp, r7
 8005210:	bd80      	pop	{r7, pc}
 8005212:	bf00      	nop
 8005214:	0800531d 	.word	0x0800531d

08005218 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005218:	b480      	push	{r7}
 800521a:	b083      	sub	sp, #12
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005220:	bf00      	nop
 8005222:	370c      	adds	r7, #12
 8005224:	46bd      	mov	sp, r7
 8005226:	bc80      	pop	{r7}
 8005228:	4770      	bx	lr

0800522a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800522a:	b480      	push	{r7}
 800522c:	b083      	sub	sp, #12
 800522e:	af00      	add	r7, sp, #0
 8005230:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005232:	bf00      	nop
 8005234:	370c      	adds	r7, #12
 8005236:	46bd      	mov	sp, r7
 8005238:	bc80      	pop	{r7}
 800523a:	4770      	bx	lr

0800523c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800523c:	b480      	push	{r7}
 800523e:	b083      	sub	sp, #12
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005244:	bf00      	nop
 8005246:	370c      	adds	r7, #12
 8005248:	46bd      	mov	sp, r7
 800524a:	bc80      	pop	{r7}
 800524c:	4770      	bx	lr

0800524e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800524e:	b580      	push	{r7, lr}
 8005250:	b084      	sub	sp, #16
 8005252:	af00      	add	r7, sp, #0
 8005254:	60f8      	str	r0, [r7, #12]
 8005256:	60b9      	str	r1, [r7, #8]
 8005258:	603b      	str	r3, [r7, #0]
 800525a:	4613      	mov	r3, r2
 800525c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800525e:	e02c      	b.n	80052ba <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005260:	69bb      	ldr	r3, [r7, #24]
 8005262:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005266:	d028      	beq.n	80052ba <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005268:	69bb      	ldr	r3, [r7, #24]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d007      	beq.n	800527e <UART_WaitOnFlagUntilTimeout+0x30>
 800526e:	f7fc ff8f 	bl	8002190 <HAL_GetTick>
 8005272:	4602      	mov	r2, r0
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	1ad3      	subs	r3, r2, r3
 8005278:	69ba      	ldr	r2, [r7, #24]
 800527a:	429a      	cmp	r2, r3
 800527c:	d21d      	bcs.n	80052ba <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	68da      	ldr	r2, [r3, #12]
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800528c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	695a      	ldr	r2, [r3, #20]
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f022 0201 	bic.w	r2, r2, #1
 800529c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	2220      	movs	r2, #32
 80052a2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	2220      	movs	r2, #32
 80052aa:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	2200      	movs	r2, #0
 80052b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80052b6:	2303      	movs	r3, #3
 80052b8:	e00f      	b.n	80052da <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	681a      	ldr	r2, [r3, #0]
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	4013      	ands	r3, r2
 80052c4:	68ba      	ldr	r2, [r7, #8]
 80052c6:	429a      	cmp	r2, r3
 80052c8:	bf0c      	ite	eq
 80052ca:	2301      	moveq	r3, #1
 80052cc:	2300      	movne	r3, #0
 80052ce:	b2db      	uxtb	r3, r3
 80052d0:	461a      	mov	r2, r3
 80052d2:	79fb      	ldrb	r3, [r7, #7]
 80052d4:	429a      	cmp	r2, r3
 80052d6:	d0c3      	beq.n	8005260 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80052d8:	2300      	movs	r3, #0
}
 80052da:	4618      	mov	r0, r3
 80052dc:	3710      	adds	r7, #16
 80052de:	46bd      	mov	sp, r7
 80052e0:	bd80      	pop	{r7, pc}

080052e2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80052e2:	b480      	push	{r7}
 80052e4:	b083      	sub	sp, #12
 80052e6:	af00      	add	r7, sp, #0
 80052e8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	68da      	ldr	r2, [r3, #12]
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80052f8:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	695a      	ldr	r2, [r3, #20]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f022 0201 	bic.w	r2, r2, #1
 8005308:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2220      	movs	r2, #32
 800530e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8005312:	bf00      	nop
 8005314:	370c      	adds	r7, #12
 8005316:	46bd      	mov	sp, r7
 8005318:	bc80      	pop	{r7}
 800531a:	4770      	bx	lr

0800531c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b084      	sub	sp, #16
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005328:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	2200      	movs	r2, #0
 800532e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	2200      	movs	r2, #0
 8005334:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005336:	68f8      	ldr	r0, [r7, #12]
 8005338:	f7ff ff80 	bl	800523c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800533c:	bf00      	nop
 800533e:	3710      	adds	r7, #16
 8005340:	46bd      	mov	sp, r7
 8005342:	bd80      	pop	{r7, pc}

08005344 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005344:	b480      	push	{r7}
 8005346:	b085      	sub	sp, #20
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005352:	b2db      	uxtb	r3, r3
 8005354:	2b21      	cmp	r3, #33	; 0x21
 8005356:	d144      	bne.n	80053e2 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	689b      	ldr	r3, [r3, #8]
 800535c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005360:	d11a      	bne.n	8005398 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6a1b      	ldr	r3, [r3, #32]
 8005366:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	881b      	ldrh	r3, [r3, #0]
 800536c:	461a      	mov	r2, r3
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005376:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	691b      	ldr	r3, [r3, #16]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d105      	bne.n	800538c <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6a1b      	ldr	r3, [r3, #32]
 8005384:	1c9a      	adds	r2, r3, #2
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	621a      	str	r2, [r3, #32]
 800538a:	e00e      	b.n	80053aa <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6a1b      	ldr	r3, [r3, #32]
 8005390:	1c5a      	adds	r2, r3, #1
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	621a      	str	r2, [r3, #32]
 8005396:	e008      	b.n	80053aa <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6a1b      	ldr	r3, [r3, #32]
 800539c:	1c59      	adds	r1, r3, #1
 800539e:	687a      	ldr	r2, [r7, #4]
 80053a0:	6211      	str	r1, [r2, #32]
 80053a2:	781a      	ldrb	r2, [r3, #0]
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80053ae:	b29b      	uxth	r3, r3
 80053b0:	3b01      	subs	r3, #1
 80053b2:	b29b      	uxth	r3, r3
 80053b4:	687a      	ldr	r2, [r7, #4]
 80053b6:	4619      	mov	r1, r3
 80053b8:	84d1      	strh	r1, [r2, #38]	; 0x26
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d10f      	bne.n	80053de <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	68da      	ldr	r2, [r3, #12]
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80053cc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	68da      	ldr	r2, [r3, #12]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80053dc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80053de:	2300      	movs	r3, #0
 80053e0:	e000      	b.n	80053e4 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80053e2:	2302      	movs	r3, #2
  }
}
 80053e4:	4618      	mov	r0, r3
 80053e6:	3714      	adds	r7, #20
 80053e8:	46bd      	mov	sp, r7
 80053ea:	bc80      	pop	{r7}
 80053ec:	4770      	bx	lr

080053ee <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80053ee:	b580      	push	{r7, lr}
 80053f0:	b082      	sub	sp, #8
 80053f2:	af00      	add	r7, sp, #0
 80053f4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	68da      	ldr	r2, [r3, #12]
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005404:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2220      	movs	r2, #32
 800540a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800540e:	6878      	ldr	r0, [r7, #4]
 8005410:	f7ff ff02 	bl	8005218 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005414:	2300      	movs	r3, #0
}
 8005416:	4618      	mov	r0, r3
 8005418:	3708      	adds	r7, #8
 800541a:	46bd      	mov	sp, r7
 800541c:	bd80      	pop	{r7, pc}

0800541e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800541e:	b580      	push	{r7, lr}
 8005420:	b084      	sub	sp, #16
 8005422:	af00      	add	r7, sp, #0
 8005424:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800542c:	b2db      	uxtb	r3, r3
 800542e:	2b22      	cmp	r3, #34	; 0x22
 8005430:	d171      	bne.n	8005516 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	689b      	ldr	r3, [r3, #8]
 8005436:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800543a:	d123      	bne.n	8005484 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005440:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	691b      	ldr	r3, [r3, #16]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d10e      	bne.n	8005468 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	685b      	ldr	r3, [r3, #4]
 8005450:	b29b      	uxth	r3, r3
 8005452:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005456:	b29a      	uxth	r2, r3
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005460:	1c9a      	adds	r2, r3, #2
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	629a      	str	r2, [r3, #40]	; 0x28
 8005466:	e029      	b.n	80054bc <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	685b      	ldr	r3, [r3, #4]
 800546e:	b29b      	uxth	r3, r3
 8005470:	b2db      	uxtb	r3, r3
 8005472:	b29a      	uxth	r2, r3
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800547c:	1c5a      	adds	r2, r3, #1
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	629a      	str	r2, [r3, #40]	; 0x28
 8005482:	e01b      	b.n	80054bc <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	691b      	ldr	r3, [r3, #16]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d10a      	bne.n	80054a2 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	6858      	ldr	r0, [r3, #4]
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005496:	1c59      	adds	r1, r3, #1
 8005498:	687a      	ldr	r2, [r7, #4]
 800549a:	6291      	str	r1, [r2, #40]	; 0x28
 800549c:	b2c2      	uxtb	r2, r0
 800549e:	701a      	strb	r2, [r3, #0]
 80054a0:	e00c      	b.n	80054bc <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	685b      	ldr	r3, [r3, #4]
 80054a8:	b2da      	uxtb	r2, r3
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054ae:	1c58      	adds	r0, r3, #1
 80054b0:	6879      	ldr	r1, [r7, #4]
 80054b2:	6288      	str	r0, [r1, #40]	; 0x28
 80054b4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80054b8:	b2d2      	uxtb	r2, r2
 80054ba:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80054c0:	b29b      	uxth	r3, r3
 80054c2:	3b01      	subs	r3, #1
 80054c4:	b29b      	uxth	r3, r3
 80054c6:	687a      	ldr	r2, [r7, #4]
 80054c8:	4619      	mov	r1, r3
 80054ca:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d120      	bne.n	8005512 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	68da      	ldr	r2, [r3, #12]
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f022 0220 	bic.w	r2, r2, #32
 80054de:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	68da      	ldr	r2, [r3, #12]
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80054ee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	695a      	ldr	r2, [r3, #20]
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f022 0201 	bic.w	r2, r2, #1
 80054fe:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2220      	movs	r2, #32
 8005504:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8005508:	6878      	ldr	r0, [r7, #4]
 800550a:	f7ff fe8e 	bl	800522a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800550e:	2300      	movs	r3, #0
 8005510:	e002      	b.n	8005518 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8005512:	2300      	movs	r3, #0
 8005514:	e000      	b.n	8005518 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8005516:	2302      	movs	r3, #2
  }
}
 8005518:	4618      	mov	r0, r3
 800551a:	3710      	adds	r7, #16
 800551c:	46bd      	mov	sp, r7
 800551e:	bd80      	pop	{r7, pc}

08005520 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b084      	sub	sp, #16
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	691b      	ldr	r3, [r3, #16]
 800552e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	68da      	ldr	r2, [r3, #12]
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	430a      	orrs	r2, r1
 800553c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	689a      	ldr	r2, [r3, #8]
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	691b      	ldr	r3, [r3, #16]
 8005546:	431a      	orrs	r2, r3
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	695b      	ldr	r3, [r3, #20]
 800554c:	4313      	orrs	r3, r2
 800554e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	68db      	ldr	r3, [r3, #12]
 8005556:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800555a:	f023 030c 	bic.w	r3, r3, #12
 800555e:	687a      	ldr	r2, [r7, #4]
 8005560:	6812      	ldr	r2, [r2, #0]
 8005562:	68f9      	ldr	r1, [r7, #12]
 8005564:	430b      	orrs	r3, r1
 8005566:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	695b      	ldr	r3, [r3, #20]
 800556e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	699a      	ldr	r2, [r3, #24]
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	430a      	orrs	r2, r1
 800557c:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4a52      	ldr	r2, [pc, #328]	; (80056cc <UART_SetConfig+0x1ac>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d14e      	bne.n	8005626 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005588:	f7ff f964 	bl	8004854 <HAL_RCC_GetPCLK2Freq>
 800558c:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800558e:	68ba      	ldr	r2, [r7, #8]
 8005590:	4613      	mov	r3, r2
 8005592:	009b      	lsls	r3, r3, #2
 8005594:	4413      	add	r3, r2
 8005596:	009a      	lsls	r2, r3, #2
 8005598:	441a      	add	r2, r3
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	685b      	ldr	r3, [r3, #4]
 800559e:	009b      	lsls	r3, r3, #2
 80055a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80055a4:	4a4a      	ldr	r2, [pc, #296]	; (80056d0 <UART_SetConfig+0x1b0>)
 80055a6:	fba2 2303 	umull	r2, r3, r2, r3
 80055aa:	095b      	lsrs	r3, r3, #5
 80055ac:	0119      	lsls	r1, r3, #4
 80055ae:	68ba      	ldr	r2, [r7, #8]
 80055b0:	4613      	mov	r3, r2
 80055b2:	009b      	lsls	r3, r3, #2
 80055b4:	4413      	add	r3, r2
 80055b6:	009a      	lsls	r2, r3, #2
 80055b8:	441a      	add	r2, r3
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	009b      	lsls	r3, r3, #2
 80055c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80055c4:	4b42      	ldr	r3, [pc, #264]	; (80056d0 <UART_SetConfig+0x1b0>)
 80055c6:	fba3 0302 	umull	r0, r3, r3, r2
 80055ca:	095b      	lsrs	r3, r3, #5
 80055cc:	2064      	movs	r0, #100	; 0x64
 80055ce:	fb00 f303 	mul.w	r3, r0, r3
 80055d2:	1ad3      	subs	r3, r2, r3
 80055d4:	011b      	lsls	r3, r3, #4
 80055d6:	3332      	adds	r3, #50	; 0x32
 80055d8:	4a3d      	ldr	r2, [pc, #244]	; (80056d0 <UART_SetConfig+0x1b0>)
 80055da:	fba2 2303 	umull	r2, r3, r2, r3
 80055de:	095b      	lsrs	r3, r3, #5
 80055e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80055e4:	4419      	add	r1, r3
 80055e6:	68ba      	ldr	r2, [r7, #8]
 80055e8:	4613      	mov	r3, r2
 80055ea:	009b      	lsls	r3, r3, #2
 80055ec:	4413      	add	r3, r2
 80055ee:	009a      	lsls	r2, r3, #2
 80055f0:	441a      	add	r2, r3
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	685b      	ldr	r3, [r3, #4]
 80055f6:	009b      	lsls	r3, r3, #2
 80055f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80055fc:	4b34      	ldr	r3, [pc, #208]	; (80056d0 <UART_SetConfig+0x1b0>)
 80055fe:	fba3 0302 	umull	r0, r3, r3, r2
 8005602:	095b      	lsrs	r3, r3, #5
 8005604:	2064      	movs	r0, #100	; 0x64
 8005606:	fb00 f303 	mul.w	r3, r0, r3
 800560a:	1ad3      	subs	r3, r2, r3
 800560c:	011b      	lsls	r3, r3, #4
 800560e:	3332      	adds	r3, #50	; 0x32
 8005610:	4a2f      	ldr	r2, [pc, #188]	; (80056d0 <UART_SetConfig+0x1b0>)
 8005612:	fba2 2303 	umull	r2, r3, r2, r3
 8005616:	095b      	lsrs	r3, r3, #5
 8005618:	f003 020f 	and.w	r2, r3, #15
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	440a      	add	r2, r1
 8005622:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8005624:	e04d      	b.n	80056c2 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8005626:	f7ff f901 	bl	800482c <HAL_RCC_GetPCLK1Freq>
 800562a:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800562c:	68ba      	ldr	r2, [r7, #8]
 800562e:	4613      	mov	r3, r2
 8005630:	009b      	lsls	r3, r3, #2
 8005632:	4413      	add	r3, r2
 8005634:	009a      	lsls	r2, r3, #2
 8005636:	441a      	add	r2, r3
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	685b      	ldr	r3, [r3, #4]
 800563c:	009b      	lsls	r3, r3, #2
 800563e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005642:	4a23      	ldr	r2, [pc, #140]	; (80056d0 <UART_SetConfig+0x1b0>)
 8005644:	fba2 2303 	umull	r2, r3, r2, r3
 8005648:	095b      	lsrs	r3, r3, #5
 800564a:	0119      	lsls	r1, r3, #4
 800564c:	68ba      	ldr	r2, [r7, #8]
 800564e:	4613      	mov	r3, r2
 8005650:	009b      	lsls	r3, r3, #2
 8005652:	4413      	add	r3, r2
 8005654:	009a      	lsls	r2, r3, #2
 8005656:	441a      	add	r2, r3
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	685b      	ldr	r3, [r3, #4]
 800565c:	009b      	lsls	r3, r3, #2
 800565e:	fbb2 f2f3 	udiv	r2, r2, r3
 8005662:	4b1b      	ldr	r3, [pc, #108]	; (80056d0 <UART_SetConfig+0x1b0>)
 8005664:	fba3 0302 	umull	r0, r3, r3, r2
 8005668:	095b      	lsrs	r3, r3, #5
 800566a:	2064      	movs	r0, #100	; 0x64
 800566c:	fb00 f303 	mul.w	r3, r0, r3
 8005670:	1ad3      	subs	r3, r2, r3
 8005672:	011b      	lsls	r3, r3, #4
 8005674:	3332      	adds	r3, #50	; 0x32
 8005676:	4a16      	ldr	r2, [pc, #88]	; (80056d0 <UART_SetConfig+0x1b0>)
 8005678:	fba2 2303 	umull	r2, r3, r2, r3
 800567c:	095b      	lsrs	r3, r3, #5
 800567e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005682:	4419      	add	r1, r3
 8005684:	68ba      	ldr	r2, [r7, #8]
 8005686:	4613      	mov	r3, r2
 8005688:	009b      	lsls	r3, r3, #2
 800568a:	4413      	add	r3, r2
 800568c:	009a      	lsls	r2, r3, #2
 800568e:	441a      	add	r2, r3
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	685b      	ldr	r3, [r3, #4]
 8005694:	009b      	lsls	r3, r3, #2
 8005696:	fbb2 f2f3 	udiv	r2, r2, r3
 800569a:	4b0d      	ldr	r3, [pc, #52]	; (80056d0 <UART_SetConfig+0x1b0>)
 800569c:	fba3 0302 	umull	r0, r3, r3, r2
 80056a0:	095b      	lsrs	r3, r3, #5
 80056a2:	2064      	movs	r0, #100	; 0x64
 80056a4:	fb00 f303 	mul.w	r3, r0, r3
 80056a8:	1ad3      	subs	r3, r2, r3
 80056aa:	011b      	lsls	r3, r3, #4
 80056ac:	3332      	adds	r3, #50	; 0x32
 80056ae:	4a08      	ldr	r2, [pc, #32]	; (80056d0 <UART_SetConfig+0x1b0>)
 80056b0:	fba2 2303 	umull	r2, r3, r2, r3
 80056b4:	095b      	lsrs	r3, r3, #5
 80056b6:	f003 020f 	and.w	r2, r3, #15
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	440a      	add	r2, r1
 80056c0:	609a      	str	r2, [r3, #8]
}
 80056c2:	bf00      	nop
 80056c4:	3710      	adds	r7, #16
 80056c6:	46bd      	mov	sp, r7
 80056c8:	bd80      	pop	{r7, pc}
 80056ca:	bf00      	nop
 80056cc:	40013800 	.word	0x40013800
 80056d0:	51eb851f 	.word	0x51eb851f

080056d4 <__errno>:
 80056d4:	4b01      	ldr	r3, [pc, #4]	; (80056dc <__errno+0x8>)
 80056d6:	6818      	ldr	r0, [r3, #0]
 80056d8:	4770      	bx	lr
 80056da:	bf00      	nop
 80056dc:	20000010 	.word	0x20000010

080056e0 <__libc_init_array>:
 80056e0:	b570      	push	{r4, r5, r6, lr}
 80056e2:	2500      	movs	r5, #0
 80056e4:	4e0c      	ldr	r6, [pc, #48]	; (8005718 <__libc_init_array+0x38>)
 80056e6:	4c0d      	ldr	r4, [pc, #52]	; (800571c <__libc_init_array+0x3c>)
 80056e8:	1ba4      	subs	r4, r4, r6
 80056ea:	10a4      	asrs	r4, r4, #2
 80056ec:	42a5      	cmp	r5, r4
 80056ee:	d109      	bne.n	8005704 <__libc_init_array+0x24>
 80056f0:	f002 fc58 	bl	8007fa4 <_init>
 80056f4:	2500      	movs	r5, #0
 80056f6:	4e0a      	ldr	r6, [pc, #40]	; (8005720 <__libc_init_array+0x40>)
 80056f8:	4c0a      	ldr	r4, [pc, #40]	; (8005724 <__libc_init_array+0x44>)
 80056fa:	1ba4      	subs	r4, r4, r6
 80056fc:	10a4      	asrs	r4, r4, #2
 80056fe:	42a5      	cmp	r5, r4
 8005700:	d105      	bne.n	800570e <__libc_init_array+0x2e>
 8005702:	bd70      	pop	{r4, r5, r6, pc}
 8005704:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005708:	4798      	blx	r3
 800570a:	3501      	adds	r5, #1
 800570c:	e7ee      	b.n	80056ec <__libc_init_array+0xc>
 800570e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005712:	4798      	blx	r3
 8005714:	3501      	adds	r5, #1
 8005716:	e7f2      	b.n	80056fe <__libc_init_array+0x1e>
 8005718:	08008428 	.word	0x08008428
 800571c:	08008428 	.word	0x08008428
 8005720:	08008428 	.word	0x08008428
 8005724:	0800842c 	.word	0x0800842c

08005728 <memset>:
 8005728:	4603      	mov	r3, r0
 800572a:	4402      	add	r2, r0
 800572c:	4293      	cmp	r3, r2
 800572e:	d100      	bne.n	8005732 <memset+0xa>
 8005730:	4770      	bx	lr
 8005732:	f803 1b01 	strb.w	r1, [r3], #1
 8005736:	e7f9      	b.n	800572c <memset+0x4>

08005738 <__cvt>:
 8005738:	2b00      	cmp	r3, #0
 800573a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800573e:	461e      	mov	r6, r3
 8005740:	bfbb      	ittet	lt
 8005742:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8005746:	461e      	movlt	r6, r3
 8005748:	2300      	movge	r3, #0
 800574a:	232d      	movlt	r3, #45	; 0x2d
 800574c:	b088      	sub	sp, #32
 800574e:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8005750:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 8005754:	f027 0720 	bic.w	r7, r7, #32
 8005758:	2f46      	cmp	r7, #70	; 0x46
 800575a:	4614      	mov	r4, r2
 800575c:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800575e:	700b      	strb	r3, [r1, #0]
 8005760:	d004      	beq.n	800576c <__cvt+0x34>
 8005762:	2f45      	cmp	r7, #69	; 0x45
 8005764:	d100      	bne.n	8005768 <__cvt+0x30>
 8005766:	3501      	adds	r5, #1
 8005768:	2302      	movs	r3, #2
 800576a:	e000      	b.n	800576e <__cvt+0x36>
 800576c:	2303      	movs	r3, #3
 800576e:	aa07      	add	r2, sp, #28
 8005770:	9204      	str	r2, [sp, #16]
 8005772:	aa06      	add	r2, sp, #24
 8005774:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005778:	e9cd 3500 	strd	r3, r5, [sp]
 800577c:	4622      	mov	r2, r4
 800577e:	4633      	mov	r3, r6
 8005780:	f000 fea2 	bl	80064c8 <_dtoa_r>
 8005784:	2f47      	cmp	r7, #71	; 0x47
 8005786:	4680      	mov	r8, r0
 8005788:	d102      	bne.n	8005790 <__cvt+0x58>
 800578a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800578c:	07db      	lsls	r3, r3, #31
 800578e:	d526      	bpl.n	80057de <__cvt+0xa6>
 8005790:	2f46      	cmp	r7, #70	; 0x46
 8005792:	eb08 0905 	add.w	r9, r8, r5
 8005796:	d111      	bne.n	80057bc <__cvt+0x84>
 8005798:	f898 3000 	ldrb.w	r3, [r8]
 800579c:	2b30      	cmp	r3, #48	; 0x30
 800579e:	d10a      	bne.n	80057b6 <__cvt+0x7e>
 80057a0:	2200      	movs	r2, #0
 80057a2:	2300      	movs	r3, #0
 80057a4:	4620      	mov	r0, r4
 80057a6:	4631      	mov	r1, r6
 80057a8:	f7fb f8fe 	bl	80009a8 <__aeabi_dcmpeq>
 80057ac:	b918      	cbnz	r0, 80057b6 <__cvt+0x7e>
 80057ae:	f1c5 0501 	rsb	r5, r5, #1
 80057b2:	f8ca 5000 	str.w	r5, [sl]
 80057b6:	f8da 3000 	ldr.w	r3, [sl]
 80057ba:	4499      	add	r9, r3
 80057bc:	2200      	movs	r2, #0
 80057be:	2300      	movs	r3, #0
 80057c0:	4620      	mov	r0, r4
 80057c2:	4631      	mov	r1, r6
 80057c4:	f7fb f8f0 	bl	80009a8 <__aeabi_dcmpeq>
 80057c8:	b938      	cbnz	r0, 80057da <__cvt+0xa2>
 80057ca:	2230      	movs	r2, #48	; 0x30
 80057cc:	9b07      	ldr	r3, [sp, #28]
 80057ce:	454b      	cmp	r3, r9
 80057d0:	d205      	bcs.n	80057de <__cvt+0xa6>
 80057d2:	1c59      	adds	r1, r3, #1
 80057d4:	9107      	str	r1, [sp, #28]
 80057d6:	701a      	strb	r2, [r3, #0]
 80057d8:	e7f8      	b.n	80057cc <__cvt+0x94>
 80057da:	f8cd 901c 	str.w	r9, [sp, #28]
 80057de:	4640      	mov	r0, r8
 80057e0:	9b07      	ldr	r3, [sp, #28]
 80057e2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80057e4:	eba3 0308 	sub.w	r3, r3, r8
 80057e8:	6013      	str	r3, [r2, #0]
 80057ea:	b008      	add	sp, #32
 80057ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080057f0 <__exponent>:
 80057f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80057f2:	2900      	cmp	r1, #0
 80057f4:	bfb4      	ite	lt
 80057f6:	232d      	movlt	r3, #45	; 0x2d
 80057f8:	232b      	movge	r3, #43	; 0x2b
 80057fa:	4604      	mov	r4, r0
 80057fc:	bfb8      	it	lt
 80057fe:	4249      	neglt	r1, r1
 8005800:	2909      	cmp	r1, #9
 8005802:	f804 2b02 	strb.w	r2, [r4], #2
 8005806:	7043      	strb	r3, [r0, #1]
 8005808:	dd21      	ble.n	800584e <__exponent+0x5e>
 800580a:	f10d 0307 	add.w	r3, sp, #7
 800580e:	461f      	mov	r7, r3
 8005810:	260a      	movs	r6, #10
 8005812:	fb91 f5f6 	sdiv	r5, r1, r6
 8005816:	fb06 1115 	mls	r1, r6, r5, r1
 800581a:	2d09      	cmp	r5, #9
 800581c:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8005820:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005824:	f103 32ff 	add.w	r2, r3, #4294967295
 8005828:	4629      	mov	r1, r5
 800582a:	dc09      	bgt.n	8005840 <__exponent+0x50>
 800582c:	3130      	adds	r1, #48	; 0x30
 800582e:	3b02      	subs	r3, #2
 8005830:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005834:	42bb      	cmp	r3, r7
 8005836:	4622      	mov	r2, r4
 8005838:	d304      	bcc.n	8005844 <__exponent+0x54>
 800583a:	1a10      	subs	r0, r2, r0
 800583c:	b003      	add	sp, #12
 800583e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005840:	4613      	mov	r3, r2
 8005842:	e7e6      	b.n	8005812 <__exponent+0x22>
 8005844:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005848:	f804 2b01 	strb.w	r2, [r4], #1
 800584c:	e7f2      	b.n	8005834 <__exponent+0x44>
 800584e:	2330      	movs	r3, #48	; 0x30
 8005850:	4419      	add	r1, r3
 8005852:	7083      	strb	r3, [r0, #2]
 8005854:	1d02      	adds	r2, r0, #4
 8005856:	70c1      	strb	r1, [r0, #3]
 8005858:	e7ef      	b.n	800583a <__exponent+0x4a>
	...

0800585c <_printf_float>:
 800585c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005860:	b091      	sub	sp, #68	; 0x44
 8005862:	460c      	mov	r4, r1
 8005864:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8005866:	4693      	mov	fp, r2
 8005868:	461e      	mov	r6, r3
 800586a:	4605      	mov	r5, r0
 800586c:	f001 fd5a 	bl	8007324 <_localeconv_r>
 8005870:	6803      	ldr	r3, [r0, #0]
 8005872:	4618      	mov	r0, r3
 8005874:	9309      	str	r3, [sp, #36]	; 0x24
 8005876:	f7fa fc6b 	bl	8000150 <strlen>
 800587a:	2300      	movs	r3, #0
 800587c:	930e      	str	r3, [sp, #56]	; 0x38
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	900a      	str	r0, [sp, #40]	; 0x28
 8005882:	3307      	adds	r3, #7
 8005884:	f023 0307 	bic.w	r3, r3, #7
 8005888:	f103 0208 	add.w	r2, r3, #8
 800588c:	f894 8018 	ldrb.w	r8, [r4, #24]
 8005890:	f8d4 a000 	ldr.w	sl, [r4]
 8005894:	603a      	str	r2, [r7, #0]
 8005896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800589a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800589e:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 80058a2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80058a6:	930b      	str	r3, [sp, #44]	; 0x2c
 80058a8:	f04f 32ff 	mov.w	r2, #4294967295
 80058ac:	4ba6      	ldr	r3, [pc, #664]	; (8005b48 <_printf_float+0x2ec>)
 80058ae:	4638      	mov	r0, r7
 80058b0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80058b2:	f7fb f8ab 	bl	8000a0c <__aeabi_dcmpun>
 80058b6:	bb68      	cbnz	r0, 8005914 <_printf_float+0xb8>
 80058b8:	f04f 32ff 	mov.w	r2, #4294967295
 80058bc:	4ba2      	ldr	r3, [pc, #648]	; (8005b48 <_printf_float+0x2ec>)
 80058be:	4638      	mov	r0, r7
 80058c0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80058c2:	f7fb f885 	bl	80009d0 <__aeabi_dcmple>
 80058c6:	bb28      	cbnz	r0, 8005914 <_printf_float+0xb8>
 80058c8:	2200      	movs	r2, #0
 80058ca:	2300      	movs	r3, #0
 80058cc:	4638      	mov	r0, r7
 80058ce:	4649      	mov	r1, r9
 80058d0:	f7fb f874 	bl	80009bc <__aeabi_dcmplt>
 80058d4:	b110      	cbz	r0, 80058dc <_printf_float+0x80>
 80058d6:	232d      	movs	r3, #45	; 0x2d
 80058d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80058dc:	4f9b      	ldr	r7, [pc, #620]	; (8005b4c <_printf_float+0x2f0>)
 80058de:	4b9c      	ldr	r3, [pc, #624]	; (8005b50 <_printf_float+0x2f4>)
 80058e0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80058e4:	bf98      	it	ls
 80058e6:	461f      	movls	r7, r3
 80058e8:	2303      	movs	r3, #3
 80058ea:	f04f 0900 	mov.w	r9, #0
 80058ee:	6123      	str	r3, [r4, #16]
 80058f0:	f02a 0304 	bic.w	r3, sl, #4
 80058f4:	6023      	str	r3, [r4, #0]
 80058f6:	9600      	str	r6, [sp, #0]
 80058f8:	465b      	mov	r3, fp
 80058fa:	aa0f      	add	r2, sp, #60	; 0x3c
 80058fc:	4621      	mov	r1, r4
 80058fe:	4628      	mov	r0, r5
 8005900:	f000 f9e2 	bl	8005cc8 <_printf_common>
 8005904:	3001      	adds	r0, #1
 8005906:	f040 8090 	bne.w	8005a2a <_printf_float+0x1ce>
 800590a:	f04f 30ff 	mov.w	r0, #4294967295
 800590e:	b011      	add	sp, #68	; 0x44
 8005910:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005914:	463a      	mov	r2, r7
 8005916:	464b      	mov	r3, r9
 8005918:	4638      	mov	r0, r7
 800591a:	4649      	mov	r1, r9
 800591c:	f7fb f876 	bl	8000a0c <__aeabi_dcmpun>
 8005920:	b110      	cbz	r0, 8005928 <_printf_float+0xcc>
 8005922:	4f8c      	ldr	r7, [pc, #560]	; (8005b54 <_printf_float+0x2f8>)
 8005924:	4b8c      	ldr	r3, [pc, #560]	; (8005b58 <_printf_float+0x2fc>)
 8005926:	e7db      	b.n	80058e0 <_printf_float+0x84>
 8005928:	6863      	ldr	r3, [r4, #4]
 800592a:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 800592e:	1c59      	adds	r1, r3, #1
 8005930:	a80d      	add	r0, sp, #52	; 0x34
 8005932:	a90e      	add	r1, sp, #56	; 0x38
 8005934:	d140      	bne.n	80059b8 <_printf_float+0x15c>
 8005936:	2306      	movs	r3, #6
 8005938:	6063      	str	r3, [r4, #4]
 800593a:	f04f 0c00 	mov.w	ip, #0
 800593e:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 8005942:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8005946:	6863      	ldr	r3, [r4, #4]
 8005948:	6022      	str	r2, [r4, #0]
 800594a:	e9cd 0803 	strd	r0, r8, [sp, #12]
 800594e:	9300      	str	r3, [sp, #0]
 8005950:	463a      	mov	r2, r7
 8005952:	464b      	mov	r3, r9
 8005954:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8005958:	4628      	mov	r0, r5
 800595a:	f7ff feed 	bl	8005738 <__cvt>
 800595e:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 8005962:	2b47      	cmp	r3, #71	; 0x47
 8005964:	4607      	mov	r7, r0
 8005966:	d109      	bne.n	800597c <_printf_float+0x120>
 8005968:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800596a:	1cd8      	adds	r0, r3, #3
 800596c:	db02      	blt.n	8005974 <_printf_float+0x118>
 800596e:	6862      	ldr	r2, [r4, #4]
 8005970:	4293      	cmp	r3, r2
 8005972:	dd47      	ble.n	8005a04 <_printf_float+0x1a8>
 8005974:	f1a8 0802 	sub.w	r8, r8, #2
 8005978:	fa5f f888 	uxtb.w	r8, r8
 800597c:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8005980:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005982:	d824      	bhi.n	80059ce <_printf_float+0x172>
 8005984:	3901      	subs	r1, #1
 8005986:	4642      	mov	r2, r8
 8005988:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800598c:	910d      	str	r1, [sp, #52]	; 0x34
 800598e:	f7ff ff2f 	bl	80057f0 <__exponent>
 8005992:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005994:	4681      	mov	r9, r0
 8005996:	1813      	adds	r3, r2, r0
 8005998:	2a01      	cmp	r2, #1
 800599a:	6123      	str	r3, [r4, #16]
 800599c:	dc02      	bgt.n	80059a4 <_printf_float+0x148>
 800599e:	6822      	ldr	r2, [r4, #0]
 80059a0:	07d1      	lsls	r1, r2, #31
 80059a2:	d501      	bpl.n	80059a8 <_printf_float+0x14c>
 80059a4:	3301      	adds	r3, #1
 80059a6:	6123      	str	r3, [r4, #16]
 80059a8:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d0a2      	beq.n	80058f6 <_printf_float+0x9a>
 80059b0:	232d      	movs	r3, #45	; 0x2d
 80059b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80059b6:	e79e      	b.n	80058f6 <_printf_float+0x9a>
 80059b8:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 80059bc:	f000 816e 	beq.w	8005c9c <_printf_float+0x440>
 80059c0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80059c4:	d1b9      	bne.n	800593a <_printf_float+0xde>
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d1b7      	bne.n	800593a <_printf_float+0xde>
 80059ca:	2301      	movs	r3, #1
 80059cc:	e7b4      	b.n	8005938 <_printf_float+0xdc>
 80059ce:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 80059d2:	d119      	bne.n	8005a08 <_printf_float+0x1ac>
 80059d4:	2900      	cmp	r1, #0
 80059d6:	6863      	ldr	r3, [r4, #4]
 80059d8:	dd0c      	ble.n	80059f4 <_printf_float+0x198>
 80059da:	6121      	str	r1, [r4, #16]
 80059dc:	b913      	cbnz	r3, 80059e4 <_printf_float+0x188>
 80059de:	6822      	ldr	r2, [r4, #0]
 80059e0:	07d2      	lsls	r2, r2, #31
 80059e2:	d502      	bpl.n	80059ea <_printf_float+0x18e>
 80059e4:	3301      	adds	r3, #1
 80059e6:	440b      	add	r3, r1
 80059e8:	6123      	str	r3, [r4, #16]
 80059ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80059ec:	f04f 0900 	mov.w	r9, #0
 80059f0:	65a3      	str	r3, [r4, #88]	; 0x58
 80059f2:	e7d9      	b.n	80059a8 <_printf_float+0x14c>
 80059f4:	b913      	cbnz	r3, 80059fc <_printf_float+0x1a0>
 80059f6:	6822      	ldr	r2, [r4, #0]
 80059f8:	07d0      	lsls	r0, r2, #31
 80059fa:	d501      	bpl.n	8005a00 <_printf_float+0x1a4>
 80059fc:	3302      	adds	r3, #2
 80059fe:	e7f3      	b.n	80059e8 <_printf_float+0x18c>
 8005a00:	2301      	movs	r3, #1
 8005a02:	e7f1      	b.n	80059e8 <_printf_float+0x18c>
 8005a04:	f04f 0867 	mov.w	r8, #103	; 0x67
 8005a08:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	db05      	blt.n	8005a1c <_printf_float+0x1c0>
 8005a10:	6822      	ldr	r2, [r4, #0]
 8005a12:	6123      	str	r3, [r4, #16]
 8005a14:	07d1      	lsls	r1, r2, #31
 8005a16:	d5e8      	bpl.n	80059ea <_printf_float+0x18e>
 8005a18:	3301      	adds	r3, #1
 8005a1a:	e7e5      	b.n	80059e8 <_printf_float+0x18c>
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	bfcc      	ite	gt
 8005a20:	2301      	movgt	r3, #1
 8005a22:	f1c3 0302 	rsble	r3, r3, #2
 8005a26:	4413      	add	r3, r2
 8005a28:	e7de      	b.n	80059e8 <_printf_float+0x18c>
 8005a2a:	6823      	ldr	r3, [r4, #0]
 8005a2c:	055a      	lsls	r2, r3, #21
 8005a2e:	d407      	bmi.n	8005a40 <_printf_float+0x1e4>
 8005a30:	6923      	ldr	r3, [r4, #16]
 8005a32:	463a      	mov	r2, r7
 8005a34:	4659      	mov	r1, fp
 8005a36:	4628      	mov	r0, r5
 8005a38:	47b0      	blx	r6
 8005a3a:	3001      	adds	r0, #1
 8005a3c:	d129      	bne.n	8005a92 <_printf_float+0x236>
 8005a3e:	e764      	b.n	800590a <_printf_float+0xae>
 8005a40:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8005a44:	f240 80d7 	bls.w	8005bf6 <_printf_float+0x39a>
 8005a48:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	2300      	movs	r3, #0
 8005a50:	f7fa ffaa 	bl	80009a8 <__aeabi_dcmpeq>
 8005a54:	b388      	cbz	r0, 8005aba <_printf_float+0x25e>
 8005a56:	2301      	movs	r3, #1
 8005a58:	4a40      	ldr	r2, [pc, #256]	; (8005b5c <_printf_float+0x300>)
 8005a5a:	4659      	mov	r1, fp
 8005a5c:	4628      	mov	r0, r5
 8005a5e:	47b0      	blx	r6
 8005a60:	3001      	adds	r0, #1
 8005a62:	f43f af52 	beq.w	800590a <_printf_float+0xae>
 8005a66:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005a6a:	429a      	cmp	r2, r3
 8005a6c:	db02      	blt.n	8005a74 <_printf_float+0x218>
 8005a6e:	6823      	ldr	r3, [r4, #0]
 8005a70:	07d8      	lsls	r0, r3, #31
 8005a72:	d50e      	bpl.n	8005a92 <_printf_float+0x236>
 8005a74:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005a78:	4659      	mov	r1, fp
 8005a7a:	4628      	mov	r0, r5
 8005a7c:	47b0      	blx	r6
 8005a7e:	3001      	adds	r0, #1
 8005a80:	f43f af43 	beq.w	800590a <_printf_float+0xae>
 8005a84:	2700      	movs	r7, #0
 8005a86:	f104 081a 	add.w	r8, r4, #26
 8005a8a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005a8c:	3b01      	subs	r3, #1
 8005a8e:	42bb      	cmp	r3, r7
 8005a90:	dc09      	bgt.n	8005aa6 <_printf_float+0x24a>
 8005a92:	6823      	ldr	r3, [r4, #0]
 8005a94:	079f      	lsls	r7, r3, #30
 8005a96:	f100 80fd 	bmi.w	8005c94 <_printf_float+0x438>
 8005a9a:	68e0      	ldr	r0, [r4, #12]
 8005a9c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005a9e:	4298      	cmp	r0, r3
 8005aa0:	bfb8      	it	lt
 8005aa2:	4618      	movlt	r0, r3
 8005aa4:	e733      	b.n	800590e <_printf_float+0xb2>
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	4642      	mov	r2, r8
 8005aaa:	4659      	mov	r1, fp
 8005aac:	4628      	mov	r0, r5
 8005aae:	47b0      	blx	r6
 8005ab0:	3001      	adds	r0, #1
 8005ab2:	f43f af2a 	beq.w	800590a <_printf_float+0xae>
 8005ab6:	3701      	adds	r7, #1
 8005ab8:	e7e7      	b.n	8005a8a <_printf_float+0x22e>
 8005aba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	dc2b      	bgt.n	8005b18 <_printf_float+0x2bc>
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	4a26      	ldr	r2, [pc, #152]	; (8005b5c <_printf_float+0x300>)
 8005ac4:	4659      	mov	r1, fp
 8005ac6:	4628      	mov	r0, r5
 8005ac8:	47b0      	blx	r6
 8005aca:	3001      	adds	r0, #1
 8005acc:	f43f af1d 	beq.w	800590a <_printf_float+0xae>
 8005ad0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005ad2:	b923      	cbnz	r3, 8005ade <_printf_float+0x282>
 8005ad4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005ad6:	b913      	cbnz	r3, 8005ade <_printf_float+0x282>
 8005ad8:	6823      	ldr	r3, [r4, #0]
 8005ada:	07d9      	lsls	r1, r3, #31
 8005adc:	d5d9      	bpl.n	8005a92 <_printf_float+0x236>
 8005ade:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005ae2:	4659      	mov	r1, fp
 8005ae4:	4628      	mov	r0, r5
 8005ae6:	47b0      	blx	r6
 8005ae8:	3001      	adds	r0, #1
 8005aea:	f43f af0e 	beq.w	800590a <_printf_float+0xae>
 8005aee:	f04f 0800 	mov.w	r8, #0
 8005af2:	f104 091a 	add.w	r9, r4, #26
 8005af6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005af8:	425b      	negs	r3, r3
 8005afa:	4543      	cmp	r3, r8
 8005afc:	dc01      	bgt.n	8005b02 <_printf_float+0x2a6>
 8005afe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005b00:	e797      	b.n	8005a32 <_printf_float+0x1d6>
 8005b02:	2301      	movs	r3, #1
 8005b04:	464a      	mov	r2, r9
 8005b06:	4659      	mov	r1, fp
 8005b08:	4628      	mov	r0, r5
 8005b0a:	47b0      	blx	r6
 8005b0c:	3001      	adds	r0, #1
 8005b0e:	f43f aefc 	beq.w	800590a <_printf_float+0xae>
 8005b12:	f108 0801 	add.w	r8, r8, #1
 8005b16:	e7ee      	b.n	8005af6 <_printf_float+0x29a>
 8005b18:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005b1a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005b1c:	429a      	cmp	r2, r3
 8005b1e:	bfa8      	it	ge
 8005b20:	461a      	movge	r2, r3
 8005b22:	2a00      	cmp	r2, #0
 8005b24:	4690      	mov	r8, r2
 8005b26:	dd07      	ble.n	8005b38 <_printf_float+0x2dc>
 8005b28:	4613      	mov	r3, r2
 8005b2a:	4659      	mov	r1, fp
 8005b2c:	463a      	mov	r2, r7
 8005b2e:	4628      	mov	r0, r5
 8005b30:	47b0      	blx	r6
 8005b32:	3001      	adds	r0, #1
 8005b34:	f43f aee9 	beq.w	800590a <_printf_float+0xae>
 8005b38:	f104 031a 	add.w	r3, r4, #26
 8005b3c:	f04f 0a00 	mov.w	sl, #0
 8005b40:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8005b44:	930b      	str	r3, [sp, #44]	; 0x2c
 8005b46:	e015      	b.n	8005b74 <_printf_float+0x318>
 8005b48:	7fefffff 	.word	0x7fefffff
 8005b4c:	08008170 	.word	0x08008170
 8005b50:	0800816c 	.word	0x0800816c
 8005b54:	08008178 	.word	0x08008178
 8005b58:	08008174 	.word	0x08008174
 8005b5c:	0800817c 	.word	0x0800817c
 8005b60:	2301      	movs	r3, #1
 8005b62:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005b64:	4659      	mov	r1, fp
 8005b66:	4628      	mov	r0, r5
 8005b68:	47b0      	blx	r6
 8005b6a:	3001      	adds	r0, #1
 8005b6c:	f43f aecd 	beq.w	800590a <_printf_float+0xae>
 8005b70:	f10a 0a01 	add.w	sl, sl, #1
 8005b74:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8005b78:	eba9 0308 	sub.w	r3, r9, r8
 8005b7c:	4553      	cmp	r3, sl
 8005b7e:	dcef      	bgt.n	8005b60 <_printf_float+0x304>
 8005b80:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005b84:	429a      	cmp	r2, r3
 8005b86:	444f      	add	r7, r9
 8005b88:	db14      	blt.n	8005bb4 <_printf_float+0x358>
 8005b8a:	6823      	ldr	r3, [r4, #0]
 8005b8c:	07da      	lsls	r2, r3, #31
 8005b8e:	d411      	bmi.n	8005bb4 <_printf_float+0x358>
 8005b90:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005b92:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005b94:	eba3 0209 	sub.w	r2, r3, r9
 8005b98:	eba3 0901 	sub.w	r9, r3, r1
 8005b9c:	4591      	cmp	r9, r2
 8005b9e:	bfa8      	it	ge
 8005ba0:	4691      	movge	r9, r2
 8005ba2:	f1b9 0f00 	cmp.w	r9, #0
 8005ba6:	dc0d      	bgt.n	8005bc4 <_printf_float+0x368>
 8005ba8:	2700      	movs	r7, #0
 8005baa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005bae:	f104 081a 	add.w	r8, r4, #26
 8005bb2:	e018      	b.n	8005be6 <_printf_float+0x38a>
 8005bb4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005bb8:	4659      	mov	r1, fp
 8005bba:	4628      	mov	r0, r5
 8005bbc:	47b0      	blx	r6
 8005bbe:	3001      	adds	r0, #1
 8005bc0:	d1e6      	bne.n	8005b90 <_printf_float+0x334>
 8005bc2:	e6a2      	b.n	800590a <_printf_float+0xae>
 8005bc4:	464b      	mov	r3, r9
 8005bc6:	463a      	mov	r2, r7
 8005bc8:	4659      	mov	r1, fp
 8005bca:	4628      	mov	r0, r5
 8005bcc:	47b0      	blx	r6
 8005bce:	3001      	adds	r0, #1
 8005bd0:	d1ea      	bne.n	8005ba8 <_printf_float+0x34c>
 8005bd2:	e69a      	b.n	800590a <_printf_float+0xae>
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	4642      	mov	r2, r8
 8005bd8:	4659      	mov	r1, fp
 8005bda:	4628      	mov	r0, r5
 8005bdc:	47b0      	blx	r6
 8005bde:	3001      	adds	r0, #1
 8005be0:	f43f ae93 	beq.w	800590a <_printf_float+0xae>
 8005be4:	3701      	adds	r7, #1
 8005be6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005bea:	1a9b      	subs	r3, r3, r2
 8005bec:	eba3 0309 	sub.w	r3, r3, r9
 8005bf0:	42bb      	cmp	r3, r7
 8005bf2:	dcef      	bgt.n	8005bd4 <_printf_float+0x378>
 8005bf4:	e74d      	b.n	8005a92 <_printf_float+0x236>
 8005bf6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005bf8:	2a01      	cmp	r2, #1
 8005bfa:	dc01      	bgt.n	8005c00 <_printf_float+0x3a4>
 8005bfc:	07db      	lsls	r3, r3, #31
 8005bfe:	d538      	bpl.n	8005c72 <_printf_float+0x416>
 8005c00:	2301      	movs	r3, #1
 8005c02:	463a      	mov	r2, r7
 8005c04:	4659      	mov	r1, fp
 8005c06:	4628      	mov	r0, r5
 8005c08:	47b0      	blx	r6
 8005c0a:	3001      	adds	r0, #1
 8005c0c:	f43f ae7d 	beq.w	800590a <_printf_float+0xae>
 8005c10:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005c14:	4659      	mov	r1, fp
 8005c16:	4628      	mov	r0, r5
 8005c18:	47b0      	blx	r6
 8005c1a:	3001      	adds	r0, #1
 8005c1c:	f107 0701 	add.w	r7, r7, #1
 8005c20:	f43f ae73 	beq.w	800590a <_printf_float+0xae>
 8005c24:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005c28:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	f103 38ff 	add.w	r8, r3, #4294967295
 8005c30:	2300      	movs	r3, #0
 8005c32:	f7fa feb9 	bl	80009a8 <__aeabi_dcmpeq>
 8005c36:	b9c0      	cbnz	r0, 8005c6a <_printf_float+0x40e>
 8005c38:	4643      	mov	r3, r8
 8005c3a:	463a      	mov	r2, r7
 8005c3c:	4659      	mov	r1, fp
 8005c3e:	4628      	mov	r0, r5
 8005c40:	47b0      	blx	r6
 8005c42:	3001      	adds	r0, #1
 8005c44:	d10d      	bne.n	8005c62 <_printf_float+0x406>
 8005c46:	e660      	b.n	800590a <_printf_float+0xae>
 8005c48:	2301      	movs	r3, #1
 8005c4a:	4642      	mov	r2, r8
 8005c4c:	4659      	mov	r1, fp
 8005c4e:	4628      	mov	r0, r5
 8005c50:	47b0      	blx	r6
 8005c52:	3001      	adds	r0, #1
 8005c54:	f43f ae59 	beq.w	800590a <_printf_float+0xae>
 8005c58:	3701      	adds	r7, #1
 8005c5a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005c5c:	3b01      	subs	r3, #1
 8005c5e:	42bb      	cmp	r3, r7
 8005c60:	dcf2      	bgt.n	8005c48 <_printf_float+0x3ec>
 8005c62:	464b      	mov	r3, r9
 8005c64:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005c68:	e6e4      	b.n	8005a34 <_printf_float+0x1d8>
 8005c6a:	2700      	movs	r7, #0
 8005c6c:	f104 081a 	add.w	r8, r4, #26
 8005c70:	e7f3      	b.n	8005c5a <_printf_float+0x3fe>
 8005c72:	2301      	movs	r3, #1
 8005c74:	e7e1      	b.n	8005c3a <_printf_float+0x3de>
 8005c76:	2301      	movs	r3, #1
 8005c78:	4642      	mov	r2, r8
 8005c7a:	4659      	mov	r1, fp
 8005c7c:	4628      	mov	r0, r5
 8005c7e:	47b0      	blx	r6
 8005c80:	3001      	adds	r0, #1
 8005c82:	f43f ae42 	beq.w	800590a <_printf_float+0xae>
 8005c86:	3701      	adds	r7, #1
 8005c88:	68e3      	ldr	r3, [r4, #12]
 8005c8a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005c8c:	1a9b      	subs	r3, r3, r2
 8005c8e:	42bb      	cmp	r3, r7
 8005c90:	dcf1      	bgt.n	8005c76 <_printf_float+0x41a>
 8005c92:	e702      	b.n	8005a9a <_printf_float+0x23e>
 8005c94:	2700      	movs	r7, #0
 8005c96:	f104 0819 	add.w	r8, r4, #25
 8005c9a:	e7f5      	b.n	8005c88 <_printf_float+0x42c>
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	f43f ae94 	beq.w	80059ca <_printf_float+0x16e>
 8005ca2:	f04f 0c00 	mov.w	ip, #0
 8005ca6:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8005caa:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 8005cae:	6022      	str	r2, [r4, #0]
 8005cb0:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8005cb4:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8005cb8:	9300      	str	r3, [sp, #0]
 8005cba:	463a      	mov	r2, r7
 8005cbc:	464b      	mov	r3, r9
 8005cbe:	4628      	mov	r0, r5
 8005cc0:	f7ff fd3a 	bl	8005738 <__cvt>
 8005cc4:	4607      	mov	r7, r0
 8005cc6:	e64f      	b.n	8005968 <_printf_float+0x10c>

08005cc8 <_printf_common>:
 8005cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ccc:	4691      	mov	r9, r2
 8005cce:	461f      	mov	r7, r3
 8005cd0:	688a      	ldr	r2, [r1, #8]
 8005cd2:	690b      	ldr	r3, [r1, #16]
 8005cd4:	4606      	mov	r6, r0
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	bfb8      	it	lt
 8005cda:	4613      	movlt	r3, r2
 8005cdc:	f8c9 3000 	str.w	r3, [r9]
 8005ce0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005ce4:	460c      	mov	r4, r1
 8005ce6:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005cea:	b112      	cbz	r2, 8005cf2 <_printf_common+0x2a>
 8005cec:	3301      	adds	r3, #1
 8005cee:	f8c9 3000 	str.w	r3, [r9]
 8005cf2:	6823      	ldr	r3, [r4, #0]
 8005cf4:	0699      	lsls	r1, r3, #26
 8005cf6:	bf42      	ittt	mi
 8005cf8:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005cfc:	3302      	addmi	r3, #2
 8005cfe:	f8c9 3000 	strmi.w	r3, [r9]
 8005d02:	6825      	ldr	r5, [r4, #0]
 8005d04:	f015 0506 	ands.w	r5, r5, #6
 8005d08:	d107      	bne.n	8005d1a <_printf_common+0x52>
 8005d0a:	f104 0a19 	add.w	sl, r4, #25
 8005d0e:	68e3      	ldr	r3, [r4, #12]
 8005d10:	f8d9 2000 	ldr.w	r2, [r9]
 8005d14:	1a9b      	subs	r3, r3, r2
 8005d16:	42ab      	cmp	r3, r5
 8005d18:	dc29      	bgt.n	8005d6e <_printf_common+0xa6>
 8005d1a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005d1e:	6822      	ldr	r2, [r4, #0]
 8005d20:	3300      	adds	r3, #0
 8005d22:	bf18      	it	ne
 8005d24:	2301      	movne	r3, #1
 8005d26:	0692      	lsls	r2, r2, #26
 8005d28:	d42e      	bmi.n	8005d88 <_printf_common+0xc0>
 8005d2a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005d2e:	4639      	mov	r1, r7
 8005d30:	4630      	mov	r0, r6
 8005d32:	47c0      	blx	r8
 8005d34:	3001      	adds	r0, #1
 8005d36:	d021      	beq.n	8005d7c <_printf_common+0xb4>
 8005d38:	6823      	ldr	r3, [r4, #0]
 8005d3a:	68e5      	ldr	r5, [r4, #12]
 8005d3c:	f003 0306 	and.w	r3, r3, #6
 8005d40:	2b04      	cmp	r3, #4
 8005d42:	bf18      	it	ne
 8005d44:	2500      	movne	r5, #0
 8005d46:	f8d9 2000 	ldr.w	r2, [r9]
 8005d4a:	f04f 0900 	mov.w	r9, #0
 8005d4e:	bf08      	it	eq
 8005d50:	1aad      	subeq	r5, r5, r2
 8005d52:	68a3      	ldr	r3, [r4, #8]
 8005d54:	6922      	ldr	r2, [r4, #16]
 8005d56:	bf08      	it	eq
 8005d58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	bfc4      	itt	gt
 8005d60:	1a9b      	subgt	r3, r3, r2
 8005d62:	18ed      	addgt	r5, r5, r3
 8005d64:	341a      	adds	r4, #26
 8005d66:	454d      	cmp	r5, r9
 8005d68:	d11a      	bne.n	8005da0 <_printf_common+0xd8>
 8005d6a:	2000      	movs	r0, #0
 8005d6c:	e008      	b.n	8005d80 <_printf_common+0xb8>
 8005d6e:	2301      	movs	r3, #1
 8005d70:	4652      	mov	r2, sl
 8005d72:	4639      	mov	r1, r7
 8005d74:	4630      	mov	r0, r6
 8005d76:	47c0      	blx	r8
 8005d78:	3001      	adds	r0, #1
 8005d7a:	d103      	bne.n	8005d84 <_printf_common+0xbc>
 8005d7c:	f04f 30ff 	mov.w	r0, #4294967295
 8005d80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d84:	3501      	adds	r5, #1
 8005d86:	e7c2      	b.n	8005d0e <_printf_common+0x46>
 8005d88:	2030      	movs	r0, #48	; 0x30
 8005d8a:	18e1      	adds	r1, r4, r3
 8005d8c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005d90:	1c5a      	adds	r2, r3, #1
 8005d92:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005d96:	4422      	add	r2, r4
 8005d98:	3302      	adds	r3, #2
 8005d9a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005d9e:	e7c4      	b.n	8005d2a <_printf_common+0x62>
 8005da0:	2301      	movs	r3, #1
 8005da2:	4622      	mov	r2, r4
 8005da4:	4639      	mov	r1, r7
 8005da6:	4630      	mov	r0, r6
 8005da8:	47c0      	blx	r8
 8005daa:	3001      	adds	r0, #1
 8005dac:	d0e6      	beq.n	8005d7c <_printf_common+0xb4>
 8005dae:	f109 0901 	add.w	r9, r9, #1
 8005db2:	e7d8      	b.n	8005d66 <_printf_common+0x9e>

08005db4 <_printf_i>:
 8005db4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005db8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005dbc:	460c      	mov	r4, r1
 8005dbe:	7e09      	ldrb	r1, [r1, #24]
 8005dc0:	b085      	sub	sp, #20
 8005dc2:	296e      	cmp	r1, #110	; 0x6e
 8005dc4:	4617      	mov	r7, r2
 8005dc6:	4606      	mov	r6, r0
 8005dc8:	4698      	mov	r8, r3
 8005dca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005dcc:	f000 80b3 	beq.w	8005f36 <_printf_i+0x182>
 8005dd0:	d822      	bhi.n	8005e18 <_printf_i+0x64>
 8005dd2:	2963      	cmp	r1, #99	; 0x63
 8005dd4:	d036      	beq.n	8005e44 <_printf_i+0x90>
 8005dd6:	d80a      	bhi.n	8005dee <_printf_i+0x3a>
 8005dd8:	2900      	cmp	r1, #0
 8005dda:	f000 80b9 	beq.w	8005f50 <_printf_i+0x19c>
 8005dde:	2958      	cmp	r1, #88	; 0x58
 8005de0:	f000 8083 	beq.w	8005eea <_printf_i+0x136>
 8005de4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005de8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005dec:	e032      	b.n	8005e54 <_printf_i+0xa0>
 8005dee:	2964      	cmp	r1, #100	; 0x64
 8005df0:	d001      	beq.n	8005df6 <_printf_i+0x42>
 8005df2:	2969      	cmp	r1, #105	; 0x69
 8005df4:	d1f6      	bne.n	8005de4 <_printf_i+0x30>
 8005df6:	6820      	ldr	r0, [r4, #0]
 8005df8:	6813      	ldr	r3, [r2, #0]
 8005dfa:	0605      	lsls	r5, r0, #24
 8005dfc:	f103 0104 	add.w	r1, r3, #4
 8005e00:	d52a      	bpl.n	8005e58 <_printf_i+0xa4>
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	6011      	str	r1, [r2, #0]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	da03      	bge.n	8005e12 <_printf_i+0x5e>
 8005e0a:	222d      	movs	r2, #45	; 0x2d
 8005e0c:	425b      	negs	r3, r3
 8005e0e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005e12:	486f      	ldr	r0, [pc, #444]	; (8005fd0 <_printf_i+0x21c>)
 8005e14:	220a      	movs	r2, #10
 8005e16:	e039      	b.n	8005e8c <_printf_i+0xd8>
 8005e18:	2973      	cmp	r1, #115	; 0x73
 8005e1a:	f000 809d 	beq.w	8005f58 <_printf_i+0x1a4>
 8005e1e:	d808      	bhi.n	8005e32 <_printf_i+0x7e>
 8005e20:	296f      	cmp	r1, #111	; 0x6f
 8005e22:	d020      	beq.n	8005e66 <_printf_i+0xb2>
 8005e24:	2970      	cmp	r1, #112	; 0x70
 8005e26:	d1dd      	bne.n	8005de4 <_printf_i+0x30>
 8005e28:	6823      	ldr	r3, [r4, #0]
 8005e2a:	f043 0320 	orr.w	r3, r3, #32
 8005e2e:	6023      	str	r3, [r4, #0]
 8005e30:	e003      	b.n	8005e3a <_printf_i+0x86>
 8005e32:	2975      	cmp	r1, #117	; 0x75
 8005e34:	d017      	beq.n	8005e66 <_printf_i+0xb2>
 8005e36:	2978      	cmp	r1, #120	; 0x78
 8005e38:	d1d4      	bne.n	8005de4 <_printf_i+0x30>
 8005e3a:	2378      	movs	r3, #120	; 0x78
 8005e3c:	4865      	ldr	r0, [pc, #404]	; (8005fd4 <_printf_i+0x220>)
 8005e3e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005e42:	e055      	b.n	8005ef0 <_printf_i+0x13c>
 8005e44:	6813      	ldr	r3, [r2, #0]
 8005e46:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005e4a:	1d19      	adds	r1, r3, #4
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	6011      	str	r1, [r2, #0]
 8005e50:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005e54:	2301      	movs	r3, #1
 8005e56:	e08c      	b.n	8005f72 <_printf_i+0x1be>
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005e5e:	6011      	str	r1, [r2, #0]
 8005e60:	bf18      	it	ne
 8005e62:	b21b      	sxthne	r3, r3
 8005e64:	e7cf      	b.n	8005e06 <_printf_i+0x52>
 8005e66:	6813      	ldr	r3, [r2, #0]
 8005e68:	6825      	ldr	r5, [r4, #0]
 8005e6a:	1d18      	adds	r0, r3, #4
 8005e6c:	6010      	str	r0, [r2, #0]
 8005e6e:	0628      	lsls	r0, r5, #24
 8005e70:	d501      	bpl.n	8005e76 <_printf_i+0xc2>
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	e002      	b.n	8005e7c <_printf_i+0xc8>
 8005e76:	0668      	lsls	r0, r5, #25
 8005e78:	d5fb      	bpl.n	8005e72 <_printf_i+0xbe>
 8005e7a:	881b      	ldrh	r3, [r3, #0]
 8005e7c:	296f      	cmp	r1, #111	; 0x6f
 8005e7e:	bf14      	ite	ne
 8005e80:	220a      	movne	r2, #10
 8005e82:	2208      	moveq	r2, #8
 8005e84:	4852      	ldr	r0, [pc, #328]	; (8005fd0 <_printf_i+0x21c>)
 8005e86:	2100      	movs	r1, #0
 8005e88:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005e8c:	6865      	ldr	r5, [r4, #4]
 8005e8e:	2d00      	cmp	r5, #0
 8005e90:	60a5      	str	r5, [r4, #8]
 8005e92:	f2c0 8095 	blt.w	8005fc0 <_printf_i+0x20c>
 8005e96:	6821      	ldr	r1, [r4, #0]
 8005e98:	f021 0104 	bic.w	r1, r1, #4
 8005e9c:	6021      	str	r1, [r4, #0]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d13d      	bne.n	8005f1e <_printf_i+0x16a>
 8005ea2:	2d00      	cmp	r5, #0
 8005ea4:	f040 808e 	bne.w	8005fc4 <_printf_i+0x210>
 8005ea8:	4665      	mov	r5, ip
 8005eaa:	2a08      	cmp	r2, #8
 8005eac:	d10b      	bne.n	8005ec6 <_printf_i+0x112>
 8005eae:	6823      	ldr	r3, [r4, #0]
 8005eb0:	07db      	lsls	r3, r3, #31
 8005eb2:	d508      	bpl.n	8005ec6 <_printf_i+0x112>
 8005eb4:	6923      	ldr	r3, [r4, #16]
 8005eb6:	6862      	ldr	r2, [r4, #4]
 8005eb8:	429a      	cmp	r2, r3
 8005eba:	bfde      	ittt	le
 8005ebc:	2330      	movle	r3, #48	; 0x30
 8005ebe:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005ec2:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005ec6:	ebac 0305 	sub.w	r3, ip, r5
 8005eca:	6123      	str	r3, [r4, #16]
 8005ecc:	f8cd 8000 	str.w	r8, [sp]
 8005ed0:	463b      	mov	r3, r7
 8005ed2:	aa03      	add	r2, sp, #12
 8005ed4:	4621      	mov	r1, r4
 8005ed6:	4630      	mov	r0, r6
 8005ed8:	f7ff fef6 	bl	8005cc8 <_printf_common>
 8005edc:	3001      	adds	r0, #1
 8005ede:	d14d      	bne.n	8005f7c <_printf_i+0x1c8>
 8005ee0:	f04f 30ff 	mov.w	r0, #4294967295
 8005ee4:	b005      	add	sp, #20
 8005ee6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005eea:	4839      	ldr	r0, [pc, #228]	; (8005fd0 <_printf_i+0x21c>)
 8005eec:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005ef0:	6813      	ldr	r3, [r2, #0]
 8005ef2:	6821      	ldr	r1, [r4, #0]
 8005ef4:	1d1d      	adds	r5, r3, #4
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	6015      	str	r5, [r2, #0]
 8005efa:	060a      	lsls	r2, r1, #24
 8005efc:	d50b      	bpl.n	8005f16 <_printf_i+0x162>
 8005efe:	07ca      	lsls	r2, r1, #31
 8005f00:	bf44      	itt	mi
 8005f02:	f041 0120 	orrmi.w	r1, r1, #32
 8005f06:	6021      	strmi	r1, [r4, #0]
 8005f08:	b91b      	cbnz	r3, 8005f12 <_printf_i+0x15e>
 8005f0a:	6822      	ldr	r2, [r4, #0]
 8005f0c:	f022 0220 	bic.w	r2, r2, #32
 8005f10:	6022      	str	r2, [r4, #0]
 8005f12:	2210      	movs	r2, #16
 8005f14:	e7b7      	b.n	8005e86 <_printf_i+0xd2>
 8005f16:	064d      	lsls	r5, r1, #25
 8005f18:	bf48      	it	mi
 8005f1a:	b29b      	uxthmi	r3, r3
 8005f1c:	e7ef      	b.n	8005efe <_printf_i+0x14a>
 8005f1e:	4665      	mov	r5, ip
 8005f20:	fbb3 f1f2 	udiv	r1, r3, r2
 8005f24:	fb02 3311 	mls	r3, r2, r1, r3
 8005f28:	5cc3      	ldrb	r3, [r0, r3]
 8005f2a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005f2e:	460b      	mov	r3, r1
 8005f30:	2900      	cmp	r1, #0
 8005f32:	d1f5      	bne.n	8005f20 <_printf_i+0x16c>
 8005f34:	e7b9      	b.n	8005eaa <_printf_i+0xf6>
 8005f36:	6813      	ldr	r3, [r2, #0]
 8005f38:	6825      	ldr	r5, [r4, #0]
 8005f3a:	1d18      	adds	r0, r3, #4
 8005f3c:	6961      	ldr	r1, [r4, #20]
 8005f3e:	6010      	str	r0, [r2, #0]
 8005f40:	0628      	lsls	r0, r5, #24
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	d501      	bpl.n	8005f4a <_printf_i+0x196>
 8005f46:	6019      	str	r1, [r3, #0]
 8005f48:	e002      	b.n	8005f50 <_printf_i+0x19c>
 8005f4a:	066a      	lsls	r2, r5, #25
 8005f4c:	d5fb      	bpl.n	8005f46 <_printf_i+0x192>
 8005f4e:	8019      	strh	r1, [r3, #0]
 8005f50:	2300      	movs	r3, #0
 8005f52:	4665      	mov	r5, ip
 8005f54:	6123      	str	r3, [r4, #16]
 8005f56:	e7b9      	b.n	8005ecc <_printf_i+0x118>
 8005f58:	6813      	ldr	r3, [r2, #0]
 8005f5a:	1d19      	adds	r1, r3, #4
 8005f5c:	6011      	str	r1, [r2, #0]
 8005f5e:	681d      	ldr	r5, [r3, #0]
 8005f60:	6862      	ldr	r2, [r4, #4]
 8005f62:	2100      	movs	r1, #0
 8005f64:	4628      	mov	r0, r5
 8005f66:	f001 fa57 	bl	8007418 <memchr>
 8005f6a:	b108      	cbz	r0, 8005f70 <_printf_i+0x1bc>
 8005f6c:	1b40      	subs	r0, r0, r5
 8005f6e:	6060      	str	r0, [r4, #4]
 8005f70:	6863      	ldr	r3, [r4, #4]
 8005f72:	6123      	str	r3, [r4, #16]
 8005f74:	2300      	movs	r3, #0
 8005f76:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f7a:	e7a7      	b.n	8005ecc <_printf_i+0x118>
 8005f7c:	6923      	ldr	r3, [r4, #16]
 8005f7e:	462a      	mov	r2, r5
 8005f80:	4639      	mov	r1, r7
 8005f82:	4630      	mov	r0, r6
 8005f84:	47c0      	blx	r8
 8005f86:	3001      	adds	r0, #1
 8005f88:	d0aa      	beq.n	8005ee0 <_printf_i+0x12c>
 8005f8a:	6823      	ldr	r3, [r4, #0]
 8005f8c:	079b      	lsls	r3, r3, #30
 8005f8e:	d413      	bmi.n	8005fb8 <_printf_i+0x204>
 8005f90:	68e0      	ldr	r0, [r4, #12]
 8005f92:	9b03      	ldr	r3, [sp, #12]
 8005f94:	4298      	cmp	r0, r3
 8005f96:	bfb8      	it	lt
 8005f98:	4618      	movlt	r0, r3
 8005f9a:	e7a3      	b.n	8005ee4 <_printf_i+0x130>
 8005f9c:	2301      	movs	r3, #1
 8005f9e:	464a      	mov	r2, r9
 8005fa0:	4639      	mov	r1, r7
 8005fa2:	4630      	mov	r0, r6
 8005fa4:	47c0      	blx	r8
 8005fa6:	3001      	adds	r0, #1
 8005fa8:	d09a      	beq.n	8005ee0 <_printf_i+0x12c>
 8005faa:	3501      	adds	r5, #1
 8005fac:	68e3      	ldr	r3, [r4, #12]
 8005fae:	9a03      	ldr	r2, [sp, #12]
 8005fb0:	1a9b      	subs	r3, r3, r2
 8005fb2:	42ab      	cmp	r3, r5
 8005fb4:	dcf2      	bgt.n	8005f9c <_printf_i+0x1e8>
 8005fb6:	e7eb      	b.n	8005f90 <_printf_i+0x1dc>
 8005fb8:	2500      	movs	r5, #0
 8005fba:	f104 0919 	add.w	r9, r4, #25
 8005fbe:	e7f5      	b.n	8005fac <_printf_i+0x1f8>
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d1ac      	bne.n	8005f1e <_printf_i+0x16a>
 8005fc4:	7803      	ldrb	r3, [r0, #0]
 8005fc6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005fca:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005fce:	e76c      	b.n	8005eaa <_printf_i+0xf6>
 8005fd0:	0800817e 	.word	0x0800817e
 8005fd4:	0800818f 	.word	0x0800818f

08005fd8 <iprintf>:
 8005fd8:	b40f      	push	{r0, r1, r2, r3}
 8005fda:	4b0a      	ldr	r3, [pc, #40]	; (8006004 <iprintf+0x2c>)
 8005fdc:	b513      	push	{r0, r1, r4, lr}
 8005fde:	681c      	ldr	r4, [r3, #0]
 8005fe0:	b124      	cbz	r4, 8005fec <iprintf+0x14>
 8005fe2:	69a3      	ldr	r3, [r4, #24]
 8005fe4:	b913      	cbnz	r3, 8005fec <iprintf+0x14>
 8005fe6:	4620      	mov	r0, r4
 8005fe8:	f001 f912 	bl	8007210 <__sinit>
 8005fec:	ab05      	add	r3, sp, #20
 8005fee:	9a04      	ldr	r2, [sp, #16]
 8005ff0:	68a1      	ldr	r1, [r4, #8]
 8005ff2:	4620      	mov	r0, r4
 8005ff4:	9301      	str	r3, [sp, #4]
 8005ff6:	f001 fde1 	bl	8007bbc <_vfiprintf_r>
 8005ffa:	b002      	add	sp, #8
 8005ffc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006000:	b004      	add	sp, #16
 8006002:	4770      	bx	lr
 8006004:	20000010 	.word	0x20000010

08006008 <_puts_r>:
 8006008:	b570      	push	{r4, r5, r6, lr}
 800600a:	460e      	mov	r6, r1
 800600c:	4605      	mov	r5, r0
 800600e:	b118      	cbz	r0, 8006018 <_puts_r+0x10>
 8006010:	6983      	ldr	r3, [r0, #24]
 8006012:	b90b      	cbnz	r3, 8006018 <_puts_r+0x10>
 8006014:	f001 f8fc 	bl	8007210 <__sinit>
 8006018:	69ab      	ldr	r3, [r5, #24]
 800601a:	68ac      	ldr	r4, [r5, #8]
 800601c:	b913      	cbnz	r3, 8006024 <_puts_r+0x1c>
 800601e:	4628      	mov	r0, r5
 8006020:	f001 f8f6 	bl	8007210 <__sinit>
 8006024:	4b23      	ldr	r3, [pc, #140]	; (80060b4 <_puts_r+0xac>)
 8006026:	429c      	cmp	r4, r3
 8006028:	d117      	bne.n	800605a <_puts_r+0x52>
 800602a:	686c      	ldr	r4, [r5, #4]
 800602c:	89a3      	ldrh	r3, [r4, #12]
 800602e:	071b      	lsls	r3, r3, #28
 8006030:	d51d      	bpl.n	800606e <_puts_r+0x66>
 8006032:	6923      	ldr	r3, [r4, #16]
 8006034:	b1db      	cbz	r3, 800606e <_puts_r+0x66>
 8006036:	3e01      	subs	r6, #1
 8006038:	68a3      	ldr	r3, [r4, #8]
 800603a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800603e:	3b01      	subs	r3, #1
 8006040:	60a3      	str	r3, [r4, #8]
 8006042:	b9e9      	cbnz	r1, 8006080 <_puts_r+0x78>
 8006044:	2b00      	cmp	r3, #0
 8006046:	da2e      	bge.n	80060a6 <_puts_r+0x9e>
 8006048:	4622      	mov	r2, r4
 800604a:	210a      	movs	r1, #10
 800604c:	4628      	mov	r0, r5
 800604e:	f000 f8ed 	bl	800622c <__swbuf_r>
 8006052:	3001      	adds	r0, #1
 8006054:	d011      	beq.n	800607a <_puts_r+0x72>
 8006056:	200a      	movs	r0, #10
 8006058:	e011      	b.n	800607e <_puts_r+0x76>
 800605a:	4b17      	ldr	r3, [pc, #92]	; (80060b8 <_puts_r+0xb0>)
 800605c:	429c      	cmp	r4, r3
 800605e:	d101      	bne.n	8006064 <_puts_r+0x5c>
 8006060:	68ac      	ldr	r4, [r5, #8]
 8006062:	e7e3      	b.n	800602c <_puts_r+0x24>
 8006064:	4b15      	ldr	r3, [pc, #84]	; (80060bc <_puts_r+0xb4>)
 8006066:	429c      	cmp	r4, r3
 8006068:	bf08      	it	eq
 800606a:	68ec      	ldreq	r4, [r5, #12]
 800606c:	e7de      	b.n	800602c <_puts_r+0x24>
 800606e:	4621      	mov	r1, r4
 8006070:	4628      	mov	r0, r5
 8006072:	f000 f92d 	bl	80062d0 <__swsetup_r>
 8006076:	2800      	cmp	r0, #0
 8006078:	d0dd      	beq.n	8006036 <_puts_r+0x2e>
 800607a:	f04f 30ff 	mov.w	r0, #4294967295
 800607e:	bd70      	pop	{r4, r5, r6, pc}
 8006080:	2b00      	cmp	r3, #0
 8006082:	da04      	bge.n	800608e <_puts_r+0x86>
 8006084:	69a2      	ldr	r2, [r4, #24]
 8006086:	429a      	cmp	r2, r3
 8006088:	dc06      	bgt.n	8006098 <_puts_r+0x90>
 800608a:	290a      	cmp	r1, #10
 800608c:	d004      	beq.n	8006098 <_puts_r+0x90>
 800608e:	6823      	ldr	r3, [r4, #0]
 8006090:	1c5a      	adds	r2, r3, #1
 8006092:	6022      	str	r2, [r4, #0]
 8006094:	7019      	strb	r1, [r3, #0]
 8006096:	e7cf      	b.n	8006038 <_puts_r+0x30>
 8006098:	4622      	mov	r2, r4
 800609a:	4628      	mov	r0, r5
 800609c:	f000 f8c6 	bl	800622c <__swbuf_r>
 80060a0:	3001      	adds	r0, #1
 80060a2:	d1c9      	bne.n	8006038 <_puts_r+0x30>
 80060a4:	e7e9      	b.n	800607a <_puts_r+0x72>
 80060a6:	200a      	movs	r0, #10
 80060a8:	6823      	ldr	r3, [r4, #0]
 80060aa:	1c5a      	adds	r2, r3, #1
 80060ac:	6022      	str	r2, [r4, #0]
 80060ae:	7018      	strb	r0, [r3, #0]
 80060b0:	e7e5      	b.n	800607e <_puts_r+0x76>
 80060b2:	bf00      	nop
 80060b4:	080081d0 	.word	0x080081d0
 80060b8:	080081f0 	.word	0x080081f0
 80060bc:	080081b0 	.word	0x080081b0

080060c0 <puts>:
 80060c0:	4b02      	ldr	r3, [pc, #8]	; (80060cc <puts+0xc>)
 80060c2:	4601      	mov	r1, r0
 80060c4:	6818      	ldr	r0, [r3, #0]
 80060c6:	f7ff bf9f 	b.w	8006008 <_puts_r>
 80060ca:	bf00      	nop
 80060cc:	20000010 	.word	0x20000010

080060d0 <setvbuf>:
 80060d0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80060d4:	461d      	mov	r5, r3
 80060d6:	4b51      	ldr	r3, [pc, #324]	; (800621c <setvbuf+0x14c>)
 80060d8:	4604      	mov	r4, r0
 80060da:	681e      	ldr	r6, [r3, #0]
 80060dc:	460f      	mov	r7, r1
 80060de:	4690      	mov	r8, r2
 80060e0:	b126      	cbz	r6, 80060ec <setvbuf+0x1c>
 80060e2:	69b3      	ldr	r3, [r6, #24]
 80060e4:	b913      	cbnz	r3, 80060ec <setvbuf+0x1c>
 80060e6:	4630      	mov	r0, r6
 80060e8:	f001 f892 	bl	8007210 <__sinit>
 80060ec:	4b4c      	ldr	r3, [pc, #304]	; (8006220 <setvbuf+0x150>)
 80060ee:	429c      	cmp	r4, r3
 80060f0:	d152      	bne.n	8006198 <setvbuf+0xc8>
 80060f2:	6874      	ldr	r4, [r6, #4]
 80060f4:	f1b8 0f02 	cmp.w	r8, #2
 80060f8:	d006      	beq.n	8006108 <setvbuf+0x38>
 80060fa:	f1b8 0f01 	cmp.w	r8, #1
 80060fe:	f200 8089 	bhi.w	8006214 <setvbuf+0x144>
 8006102:	2d00      	cmp	r5, #0
 8006104:	f2c0 8086 	blt.w	8006214 <setvbuf+0x144>
 8006108:	4621      	mov	r1, r4
 800610a:	4630      	mov	r0, r6
 800610c:	f001 f816 	bl	800713c <_fflush_r>
 8006110:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006112:	b141      	cbz	r1, 8006126 <setvbuf+0x56>
 8006114:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006118:	4299      	cmp	r1, r3
 800611a:	d002      	beq.n	8006122 <setvbuf+0x52>
 800611c:	4630      	mov	r0, r6
 800611e:	f001 fc7f 	bl	8007a20 <_free_r>
 8006122:	2300      	movs	r3, #0
 8006124:	6363      	str	r3, [r4, #52]	; 0x34
 8006126:	2300      	movs	r3, #0
 8006128:	61a3      	str	r3, [r4, #24]
 800612a:	6063      	str	r3, [r4, #4]
 800612c:	89a3      	ldrh	r3, [r4, #12]
 800612e:	061b      	lsls	r3, r3, #24
 8006130:	d503      	bpl.n	800613a <setvbuf+0x6a>
 8006132:	6921      	ldr	r1, [r4, #16]
 8006134:	4630      	mov	r0, r6
 8006136:	f001 fc73 	bl	8007a20 <_free_r>
 800613a:	89a3      	ldrh	r3, [r4, #12]
 800613c:	f1b8 0f02 	cmp.w	r8, #2
 8006140:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8006144:	f023 0303 	bic.w	r3, r3, #3
 8006148:	81a3      	strh	r3, [r4, #12]
 800614a:	d05d      	beq.n	8006208 <setvbuf+0x138>
 800614c:	ab01      	add	r3, sp, #4
 800614e:	466a      	mov	r2, sp
 8006150:	4621      	mov	r1, r4
 8006152:	4630      	mov	r0, r6
 8006154:	f001 f8f4 	bl	8007340 <__swhatbuf_r>
 8006158:	89a3      	ldrh	r3, [r4, #12]
 800615a:	4318      	orrs	r0, r3
 800615c:	81a0      	strh	r0, [r4, #12]
 800615e:	bb2d      	cbnz	r5, 80061ac <setvbuf+0xdc>
 8006160:	9d00      	ldr	r5, [sp, #0]
 8006162:	4628      	mov	r0, r5
 8006164:	f001 f950 	bl	8007408 <malloc>
 8006168:	4607      	mov	r7, r0
 800616a:	2800      	cmp	r0, #0
 800616c:	d14e      	bne.n	800620c <setvbuf+0x13c>
 800616e:	f8dd 9000 	ldr.w	r9, [sp]
 8006172:	45a9      	cmp	r9, r5
 8006174:	d13c      	bne.n	80061f0 <setvbuf+0x120>
 8006176:	f04f 30ff 	mov.w	r0, #4294967295
 800617a:	89a3      	ldrh	r3, [r4, #12]
 800617c:	f043 0302 	orr.w	r3, r3, #2
 8006180:	81a3      	strh	r3, [r4, #12]
 8006182:	2300      	movs	r3, #0
 8006184:	60a3      	str	r3, [r4, #8]
 8006186:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800618a:	6023      	str	r3, [r4, #0]
 800618c:	6123      	str	r3, [r4, #16]
 800618e:	2301      	movs	r3, #1
 8006190:	6163      	str	r3, [r4, #20]
 8006192:	b003      	add	sp, #12
 8006194:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006198:	4b22      	ldr	r3, [pc, #136]	; (8006224 <setvbuf+0x154>)
 800619a:	429c      	cmp	r4, r3
 800619c:	d101      	bne.n	80061a2 <setvbuf+0xd2>
 800619e:	68b4      	ldr	r4, [r6, #8]
 80061a0:	e7a8      	b.n	80060f4 <setvbuf+0x24>
 80061a2:	4b21      	ldr	r3, [pc, #132]	; (8006228 <setvbuf+0x158>)
 80061a4:	429c      	cmp	r4, r3
 80061a6:	bf08      	it	eq
 80061a8:	68f4      	ldreq	r4, [r6, #12]
 80061aa:	e7a3      	b.n	80060f4 <setvbuf+0x24>
 80061ac:	2f00      	cmp	r7, #0
 80061ae:	d0d8      	beq.n	8006162 <setvbuf+0x92>
 80061b0:	69b3      	ldr	r3, [r6, #24]
 80061b2:	b913      	cbnz	r3, 80061ba <setvbuf+0xea>
 80061b4:	4630      	mov	r0, r6
 80061b6:	f001 f82b 	bl	8007210 <__sinit>
 80061ba:	f1b8 0f01 	cmp.w	r8, #1
 80061be:	bf08      	it	eq
 80061c0:	89a3      	ldrheq	r3, [r4, #12]
 80061c2:	6027      	str	r7, [r4, #0]
 80061c4:	bf04      	itt	eq
 80061c6:	f043 0301 	orreq.w	r3, r3, #1
 80061ca:	81a3      	strheq	r3, [r4, #12]
 80061cc:	89a3      	ldrh	r3, [r4, #12]
 80061ce:	e9c4 7504 	strd	r7, r5, [r4, #16]
 80061d2:	f013 0008 	ands.w	r0, r3, #8
 80061d6:	d01b      	beq.n	8006210 <setvbuf+0x140>
 80061d8:	f013 0001 	ands.w	r0, r3, #1
 80061dc:	f04f 0300 	mov.w	r3, #0
 80061e0:	bf1f      	itttt	ne
 80061e2:	426d      	negne	r5, r5
 80061e4:	60a3      	strne	r3, [r4, #8]
 80061e6:	61a5      	strne	r5, [r4, #24]
 80061e8:	4618      	movne	r0, r3
 80061ea:	bf08      	it	eq
 80061ec:	60a5      	streq	r5, [r4, #8]
 80061ee:	e7d0      	b.n	8006192 <setvbuf+0xc2>
 80061f0:	4648      	mov	r0, r9
 80061f2:	f001 f909 	bl	8007408 <malloc>
 80061f6:	4607      	mov	r7, r0
 80061f8:	2800      	cmp	r0, #0
 80061fa:	d0bc      	beq.n	8006176 <setvbuf+0xa6>
 80061fc:	89a3      	ldrh	r3, [r4, #12]
 80061fe:	464d      	mov	r5, r9
 8006200:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006204:	81a3      	strh	r3, [r4, #12]
 8006206:	e7d3      	b.n	80061b0 <setvbuf+0xe0>
 8006208:	2000      	movs	r0, #0
 800620a:	e7b6      	b.n	800617a <setvbuf+0xaa>
 800620c:	46a9      	mov	r9, r5
 800620e:	e7f5      	b.n	80061fc <setvbuf+0x12c>
 8006210:	60a0      	str	r0, [r4, #8]
 8006212:	e7be      	b.n	8006192 <setvbuf+0xc2>
 8006214:	f04f 30ff 	mov.w	r0, #4294967295
 8006218:	e7bb      	b.n	8006192 <setvbuf+0xc2>
 800621a:	bf00      	nop
 800621c:	20000010 	.word	0x20000010
 8006220:	080081d0 	.word	0x080081d0
 8006224:	080081f0 	.word	0x080081f0
 8006228:	080081b0 	.word	0x080081b0

0800622c <__swbuf_r>:
 800622c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800622e:	460e      	mov	r6, r1
 8006230:	4614      	mov	r4, r2
 8006232:	4605      	mov	r5, r0
 8006234:	b118      	cbz	r0, 800623e <__swbuf_r+0x12>
 8006236:	6983      	ldr	r3, [r0, #24]
 8006238:	b90b      	cbnz	r3, 800623e <__swbuf_r+0x12>
 800623a:	f000 ffe9 	bl	8007210 <__sinit>
 800623e:	4b21      	ldr	r3, [pc, #132]	; (80062c4 <__swbuf_r+0x98>)
 8006240:	429c      	cmp	r4, r3
 8006242:	d12a      	bne.n	800629a <__swbuf_r+0x6e>
 8006244:	686c      	ldr	r4, [r5, #4]
 8006246:	69a3      	ldr	r3, [r4, #24]
 8006248:	60a3      	str	r3, [r4, #8]
 800624a:	89a3      	ldrh	r3, [r4, #12]
 800624c:	071a      	lsls	r2, r3, #28
 800624e:	d52e      	bpl.n	80062ae <__swbuf_r+0x82>
 8006250:	6923      	ldr	r3, [r4, #16]
 8006252:	b363      	cbz	r3, 80062ae <__swbuf_r+0x82>
 8006254:	6923      	ldr	r3, [r4, #16]
 8006256:	6820      	ldr	r0, [r4, #0]
 8006258:	b2f6      	uxtb	r6, r6
 800625a:	1ac0      	subs	r0, r0, r3
 800625c:	6963      	ldr	r3, [r4, #20]
 800625e:	4637      	mov	r7, r6
 8006260:	4283      	cmp	r3, r0
 8006262:	dc04      	bgt.n	800626e <__swbuf_r+0x42>
 8006264:	4621      	mov	r1, r4
 8006266:	4628      	mov	r0, r5
 8006268:	f000 ff68 	bl	800713c <_fflush_r>
 800626c:	bb28      	cbnz	r0, 80062ba <__swbuf_r+0x8e>
 800626e:	68a3      	ldr	r3, [r4, #8]
 8006270:	3001      	adds	r0, #1
 8006272:	3b01      	subs	r3, #1
 8006274:	60a3      	str	r3, [r4, #8]
 8006276:	6823      	ldr	r3, [r4, #0]
 8006278:	1c5a      	adds	r2, r3, #1
 800627a:	6022      	str	r2, [r4, #0]
 800627c:	701e      	strb	r6, [r3, #0]
 800627e:	6963      	ldr	r3, [r4, #20]
 8006280:	4283      	cmp	r3, r0
 8006282:	d004      	beq.n	800628e <__swbuf_r+0x62>
 8006284:	89a3      	ldrh	r3, [r4, #12]
 8006286:	07db      	lsls	r3, r3, #31
 8006288:	d519      	bpl.n	80062be <__swbuf_r+0x92>
 800628a:	2e0a      	cmp	r6, #10
 800628c:	d117      	bne.n	80062be <__swbuf_r+0x92>
 800628e:	4621      	mov	r1, r4
 8006290:	4628      	mov	r0, r5
 8006292:	f000 ff53 	bl	800713c <_fflush_r>
 8006296:	b190      	cbz	r0, 80062be <__swbuf_r+0x92>
 8006298:	e00f      	b.n	80062ba <__swbuf_r+0x8e>
 800629a:	4b0b      	ldr	r3, [pc, #44]	; (80062c8 <__swbuf_r+0x9c>)
 800629c:	429c      	cmp	r4, r3
 800629e:	d101      	bne.n	80062a4 <__swbuf_r+0x78>
 80062a0:	68ac      	ldr	r4, [r5, #8]
 80062a2:	e7d0      	b.n	8006246 <__swbuf_r+0x1a>
 80062a4:	4b09      	ldr	r3, [pc, #36]	; (80062cc <__swbuf_r+0xa0>)
 80062a6:	429c      	cmp	r4, r3
 80062a8:	bf08      	it	eq
 80062aa:	68ec      	ldreq	r4, [r5, #12]
 80062ac:	e7cb      	b.n	8006246 <__swbuf_r+0x1a>
 80062ae:	4621      	mov	r1, r4
 80062b0:	4628      	mov	r0, r5
 80062b2:	f000 f80d 	bl	80062d0 <__swsetup_r>
 80062b6:	2800      	cmp	r0, #0
 80062b8:	d0cc      	beq.n	8006254 <__swbuf_r+0x28>
 80062ba:	f04f 37ff 	mov.w	r7, #4294967295
 80062be:	4638      	mov	r0, r7
 80062c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80062c2:	bf00      	nop
 80062c4:	080081d0 	.word	0x080081d0
 80062c8:	080081f0 	.word	0x080081f0
 80062cc:	080081b0 	.word	0x080081b0

080062d0 <__swsetup_r>:
 80062d0:	4b32      	ldr	r3, [pc, #200]	; (800639c <__swsetup_r+0xcc>)
 80062d2:	b570      	push	{r4, r5, r6, lr}
 80062d4:	681d      	ldr	r5, [r3, #0]
 80062d6:	4606      	mov	r6, r0
 80062d8:	460c      	mov	r4, r1
 80062da:	b125      	cbz	r5, 80062e6 <__swsetup_r+0x16>
 80062dc:	69ab      	ldr	r3, [r5, #24]
 80062de:	b913      	cbnz	r3, 80062e6 <__swsetup_r+0x16>
 80062e0:	4628      	mov	r0, r5
 80062e2:	f000 ff95 	bl	8007210 <__sinit>
 80062e6:	4b2e      	ldr	r3, [pc, #184]	; (80063a0 <__swsetup_r+0xd0>)
 80062e8:	429c      	cmp	r4, r3
 80062ea:	d10f      	bne.n	800630c <__swsetup_r+0x3c>
 80062ec:	686c      	ldr	r4, [r5, #4]
 80062ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80062f2:	b29a      	uxth	r2, r3
 80062f4:	0715      	lsls	r5, r2, #28
 80062f6:	d42c      	bmi.n	8006352 <__swsetup_r+0x82>
 80062f8:	06d0      	lsls	r0, r2, #27
 80062fa:	d411      	bmi.n	8006320 <__swsetup_r+0x50>
 80062fc:	2209      	movs	r2, #9
 80062fe:	6032      	str	r2, [r6, #0]
 8006300:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006304:	81a3      	strh	r3, [r4, #12]
 8006306:	f04f 30ff 	mov.w	r0, #4294967295
 800630a:	e03e      	b.n	800638a <__swsetup_r+0xba>
 800630c:	4b25      	ldr	r3, [pc, #148]	; (80063a4 <__swsetup_r+0xd4>)
 800630e:	429c      	cmp	r4, r3
 8006310:	d101      	bne.n	8006316 <__swsetup_r+0x46>
 8006312:	68ac      	ldr	r4, [r5, #8]
 8006314:	e7eb      	b.n	80062ee <__swsetup_r+0x1e>
 8006316:	4b24      	ldr	r3, [pc, #144]	; (80063a8 <__swsetup_r+0xd8>)
 8006318:	429c      	cmp	r4, r3
 800631a:	bf08      	it	eq
 800631c:	68ec      	ldreq	r4, [r5, #12]
 800631e:	e7e6      	b.n	80062ee <__swsetup_r+0x1e>
 8006320:	0751      	lsls	r1, r2, #29
 8006322:	d512      	bpl.n	800634a <__swsetup_r+0x7a>
 8006324:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006326:	b141      	cbz	r1, 800633a <__swsetup_r+0x6a>
 8006328:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800632c:	4299      	cmp	r1, r3
 800632e:	d002      	beq.n	8006336 <__swsetup_r+0x66>
 8006330:	4630      	mov	r0, r6
 8006332:	f001 fb75 	bl	8007a20 <_free_r>
 8006336:	2300      	movs	r3, #0
 8006338:	6363      	str	r3, [r4, #52]	; 0x34
 800633a:	89a3      	ldrh	r3, [r4, #12]
 800633c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006340:	81a3      	strh	r3, [r4, #12]
 8006342:	2300      	movs	r3, #0
 8006344:	6063      	str	r3, [r4, #4]
 8006346:	6923      	ldr	r3, [r4, #16]
 8006348:	6023      	str	r3, [r4, #0]
 800634a:	89a3      	ldrh	r3, [r4, #12]
 800634c:	f043 0308 	orr.w	r3, r3, #8
 8006350:	81a3      	strh	r3, [r4, #12]
 8006352:	6923      	ldr	r3, [r4, #16]
 8006354:	b94b      	cbnz	r3, 800636a <__swsetup_r+0x9a>
 8006356:	89a3      	ldrh	r3, [r4, #12]
 8006358:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800635c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006360:	d003      	beq.n	800636a <__swsetup_r+0x9a>
 8006362:	4621      	mov	r1, r4
 8006364:	4630      	mov	r0, r6
 8006366:	f001 f80f 	bl	8007388 <__smakebuf_r>
 800636a:	89a2      	ldrh	r2, [r4, #12]
 800636c:	f012 0301 	ands.w	r3, r2, #1
 8006370:	d00c      	beq.n	800638c <__swsetup_r+0xbc>
 8006372:	2300      	movs	r3, #0
 8006374:	60a3      	str	r3, [r4, #8]
 8006376:	6963      	ldr	r3, [r4, #20]
 8006378:	425b      	negs	r3, r3
 800637a:	61a3      	str	r3, [r4, #24]
 800637c:	6923      	ldr	r3, [r4, #16]
 800637e:	b953      	cbnz	r3, 8006396 <__swsetup_r+0xc6>
 8006380:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006384:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8006388:	d1ba      	bne.n	8006300 <__swsetup_r+0x30>
 800638a:	bd70      	pop	{r4, r5, r6, pc}
 800638c:	0792      	lsls	r2, r2, #30
 800638e:	bf58      	it	pl
 8006390:	6963      	ldrpl	r3, [r4, #20]
 8006392:	60a3      	str	r3, [r4, #8]
 8006394:	e7f2      	b.n	800637c <__swsetup_r+0xac>
 8006396:	2000      	movs	r0, #0
 8006398:	e7f7      	b.n	800638a <__swsetup_r+0xba>
 800639a:	bf00      	nop
 800639c:	20000010 	.word	0x20000010
 80063a0:	080081d0 	.word	0x080081d0
 80063a4:	080081f0 	.word	0x080081f0
 80063a8:	080081b0 	.word	0x080081b0

080063ac <quorem>:
 80063ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063b0:	6903      	ldr	r3, [r0, #16]
 80063b2:	690c      	ldr	r4, [r1, #16]
 80063b4:	4680      	mov	r8, r0
 80063b6:	42a3      	cmp	r3, r4
 80063b8:	f2c0 8084 	blt.w	80064c4 <quorem+0x118>
 80063bc:	3c01      	subs	r4, #1
 80063be:	f101 0714 	add.w	r7, r1, #20
 80063c2:	f100 0614 	add.w	r6, r0, #20
 80063c6:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80063ca:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80063ce:	3501      	adds	r5, #1
 80063d0:	fbb0 f5f5 	udiv	r5, r0, r5
 80063d4:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80063d8:	eb06 030c 	add.w	r3, r6, ip
 80063dc:	eb07 090c 	add.w	r9, r7, ip
 80063e0:	9301      	str	r3, [sp, #4]
 80063e2:	b39d      	cbz	r5, 800644c <quorem+0xa0>
 80063e4:	f04f 0a00 	mov.w	sl, #0
 80063e8:	4638      	mov	r0, r7
 80063ea:	46b6      	mov	lr, r6
 80063ec:	46d3      	mov	fp, sl
 80063ee:	f850 2b04 	ldr.w	r2, [r0], #4
 80063f2:	b293      	uxth	r3, r2
 80063f4:	fb05 a303 	mla	r3, r5, r3, sl
 80063f8:	0c12      	lsrs	r2, r2, #16
 80063fa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80063fe:	fb05 a202 	mla	r2, r5, r2, sl
 8006402:	b29b      	uxth	r3, r3
 8006404:	ebab 0303 	sub.w	r3, fp, r3
 8006408:	f8de b000 	ldr.w	fp, [lr]
 800640c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8006410:	fa1f fb8b 	uxth.w	fp, fp
 8006414:	445b      	add	r3, fp
 8006416:	fa1f fb82 	uxth.w	fp, r2
 800641a:	f8de 2000 	ldr.w	r2, [lr]
 800641e:	4581      	cmp	r9, r0
 8006420:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8006424:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006428:	b29b      	uxth	r3, r3
 800642a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800642e:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8006432:	f84e 3b04 	str.w	r3, [lr], #4
 8006436:	d2da      	bcs.n	80063ee <quorem+0x42>
 8006438:	f856 300c 	ldr.w	r3, [r6, ip]
 800643c:	b933      	cbnz	r3, 800644c <quorem+0xa0>
 800643e:	9b01      	ldr	r3, [sp, #4]
 8006440:	3b04      	subs	r3, #4
 8006442:	429e      	cmp	r6, r3
 8006444:	461a      	mov	r2, r3
 8006446:	d331      	bcc.n	80064ac <quorem+0x100>
 8006448:	f8c8 4010 	str.w	r4, [r8, #16]
 800644c:	4640      	mov	r0, r8
 800644e:	f001 fa11 	bl	8007874 <__mcmp>
 8006452:	2800      	cmp	r0, #0
 8006454:	db26      	blt.n	80064a4 <quorem+0xf8>
 8006456:	4630      	mov	r0, r6
 8006458:	f04f 0c00 	mov.w	ip, #0
 800645c:	3501      	adds	r5, #1
 800645e:	f857 1b04 	ldr.w	r1, [r7], #4
 8006462:	f8d0 e000 	ldr.w	lr, [r0]
 8006466:	b28b      	uxth	r3, r1
 8006468:	ebac 0303 	sub.w	r3, ip, r3
 800646c:	fa1f f28e 	uxth.w	r2, lr
 8006470:	4413      	add	r3, r2
 8006472:	0c0a      	lsrs	r2, r1, #16
 8006474:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006478:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800647c:	b29b      	uxth	r3, r3
 800647e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006482:	45b9      	cmp	r9, r7
 8006484:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006488:	f840 3b04 	str.w	r3, [r0], #4
 800648c:	d2e7      	bcs.n	800645e <quorem+0xb2>
 800648e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8006492:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8006496:	b92a      	cbnz	r2, 80064a4 <quorem+0xf8>
 8006498:	3b04      	subs	r3, #4
 800649a:	429e      	cmp	r6, r3
 800649c:	461a      	mov	r2, r3
 800649e:	d30b      	bcc.n	80064b8 <quorem+0x10c>
 80064a0:	f8c8 4010 	str.w	r4, [r8, #16]
 80064a4:	4628      	mov	r0, r5
 80064a6:	b003      	add	sp, #12
 80064a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064ac:	6812      	ldr	r2, [r2, #0]
 80064ae:	3b04      	subs	r3, #4
 80064b0:	2a00      	cmp	r2, #0
 80064b2:	d1c9      	bne.n	8006448 <quorem+0x9c>
 80064b4:	3c01      	subs	r4, #1
 80064b6:	e7c4      	b.n	8006442 <quorem+0x96>
 80064b8:	6812      	ldr	r2, [r2, #0]
 80064ba:	3b04      	subs	r3, #4
 80064bc:	2a00      	cmp	r2, #0
 80064be:	d1ef      	bne.n	80064a0 <quorem+0xf4>
 80064c0:	3c01      	subs	r4, #1
 80064c2:	e7ea      	b.n	800649a <quorem+0xee>
 80064c4:	2000      	movs	r0, #0
 80064c6:	e7ee      	b.n	80064a6 <quorem+0xfa>

080064c8 <_dtoa_r>:
 80064c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064cc:	4616      	mov	r6, r2
 80064ce:	461f      	mov	r7, r3
 80064d0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80064d2:	b095      	sub	sp, #84	; 0x54
 80064d4:	4604      	mov	r4, r0
 80064d6:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 80064da:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80064de:	b93d      	cbnz	r5, 80064f0 <_dtoa_r+0x28>
 80064e0:	2010      	movs	r0, #16
 80064e2:	f000 ff91 	bl	8007408 <malloc>
 80064e6:	6260      	str	r0, [r4, #36]	; 0x24
 80064e8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80064ec:	6005      	str	r5, [r0, #0]
 80064ee:	60c5      	str	r5, [r0, #12]
 80064f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80064f2:	6819      	ldr	r1, [r3, #0]
 80064f4:	b151      	cbz	r1, 800650c <_dtoa_r+0x44>
 80064f6:	685a      	ldr	r2, [r3, #4]
 80064f8:	2301      	movs	r3, #1
 80064fa:	4093      	lsls	r3, r2
 80064fc:	604a      	str	r2, [r1, #4]
 80064fe:	608b      	str	r3, [r1, #8]
 8006500:	4620      	mov	r0, r4
 8006502:	f000 ffd6 	bl	80074b2 <_Bfree>
 8006506:	2200      	movs	r2, #0
 8006508:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800650a:	601a      	str	r2, [r3, #0]
 800650c:	1e3b      	subs	r3, r7, #0
 800650e:	bfaf      	iteee	ge
 8006510:	2300      	movge	r3, #0
 8006512:	2201      	movlt	r2, #1
 8006514:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006518:	9303      	strlt	r3, [sp, #12]
 800651a:	bfac      	ite	ge
 800651c:	f8c8 3000 	strge.w	r3, [r8]
 8006520:	f8c8 2000 	strlt.w	r2, [r8]
 8006524:	4bae      	ldr	r3, [pc, #696]	; (80067e0 <_dtoa_r+0x318>)
 8006526:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800652a:	ea33 0308 	bics.w	r3, r3, r8
 800652e:	d11b      	bne.n	8006568 <_dtoa_r+0xa0>
 8006530:	f242 730f 	movw	r3, #9999	; 0x270f
 8006534:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006536:	6013      	str	r3, [r2, #0]
 8006538:	9b02      	ldr	r3, [sp, #8]
 800653a:	b923      	cbnz	r3, 8006546 <_dtoa_r+0x7e>
 800653c:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8006540:	2800      	cmp	r0, #0
 8006542:	f000 8545 	beq.w	8006fd0 <_dtoa_r+0xb08>
 8006546:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006548:	b953      	cbnz	r3, 8006560 <_dtoa_r+0x98>
 800654a:	4ba6      	ldr	r3, [pc, #664]	; (80067e4 <_dtoa_r+0x31c>)
 800654c:	e021      	b.n	8006592 <_dtoa_r+0xca>
 800654e:	4ba6      	ldr	r3, [pc, #664]	; (80067e8 <_dtoa_r+0x320>)
 8006550:	9306      	str	r3, [sp, #24]
 8006552:	3308      	adds	r3, #8
 8006554:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006556:	6013      	str	r3, [r2, #0]
 8006558:	9806      	ldr	r0, [sp, #24]
 800655a:	b015      	add	sp, #84	; 0x54
 800655c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006560:	4ba0      	ldr	r3, [pc, #640]	; (80067e4 <_dtoa_r+0x31c>)
 8006562:	9306      	str	r3, [sp, #24]
 8006564:	3303      	adds	r3, #3
 8006566:	e7f5      	b.n	8006554 <_dtoa_r+0x8c>
 8006568:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800656c:	2200      	movs	r2, #0
 800656e:	2300      	movs	r3, #0
 8006570:	4630      	mov	r0, r6
 8006572:	4639      	mov	r1, r7
 8006574:	f7fa fa18 	bl	80009a8 <__aeabi_dcmpeq>
 8006578:	4682      	mov	sl, r0
 800657a:	b160      	cbz	r0, 8006596 <_dtoa_r+0xce>
 800657c:	2301      	movs	r3, #1
 800657e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006580:	6013      	str	r3, [r2, #0]
 8006582:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006584:	2b00      	cmp	r3, #0
 8006586:	f000 8520 	beq.w	8006fca <_dtoa_r+0xb02>
 800658a:	4b98      	ldr	r3, [pc, #608]	; (80067ec <_dtoa_r+0x324>)
 800658c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800658e:	6013      	str	r3, [r2, #0]
 8006590:	3b01      	subs	r3, #1
 8006592:	9306      	str	r3, [sp, #24]
 8006594:	e7e0      	b.n	8006558 <_dtoa_r+0x90>
 8006596:	ab12      	add	r3, sp, #72	; 0x48
 8006598:	9301      	str	r3, [sp, #4]
 800659a:	ab13      	add	r3, sp, #76	; 0x4c
 800659c:	9300      	str	r3, [sp, #0]
 800659e:	4632      	mov	r2, r6
 80065a0:	463b      	mov	r3, r7
 80065a2:	4620      	mov	r0, r4
 80065a4:	f001 f9de 	bl	8007964 <__d2b>
 80065a8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80065ac:	4683      	mov	fp, r0
 80065ae:	2d00      	cmp	r5, #0
 80065b0:	d07d      	beq.n	80066ae <_dtoa_r+0x1e6>
 80065b2:	46b0      	mov	r8, r6
 80065b4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80065b8:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 80065bc:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 80065c0:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80065c4:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 80065c8:	2200      	movs	r2, #0
 80065ca:	4b89      	ldr	r3, [pc, #548]	; (80067f0 <_dtoa_r+0x328>)
 80065cc:	4640      	mov	r0, r8
 80065ce:	4649      	mov	r1, r9
 80065d0:	f7f9 fdca 	bl	8000168 <__aeabi_dsub>
 80065d4:	a37c      	add	r3, pc, #496	; (adr r3, 80067c8 <_dtoa_r+0x300>)
 80065d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065da:	f7f9 ff7d 	bl	80004d8 <__aeabi_dmul>
 80065de:	a37c      	add	r3, pc, #496	; (adr r3, 80067d0 <_dtoa_r+0x308>)
 80065e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065e4:	f7f9 fdc2 	bl	800016c <__adddf3>
 80065e8:	4606      	mov	r6, r0
 80065ea:	4628      	mov	r0, r5
 80065ec:	460f      	mov	r7, r1
 80065ee:	f7f9 ff09 	bl	8000404 <__aeabi_i2d>
 80065f2:	a379      	add	r3, pc, #484	; (adr r3, 80067d8 <_dtoa_r+0x310>)
 80065f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065f8:	f7f9 ff6e 	bl	80004d8 <__aeabi_dmul>
 80065fc:	4602      	mov	r2, r0
 80065fe:	460b      	mov	r3, r1
 8006600:	4630      	mov	r0, r6
 8006602:	4639      	mov	r1, r7
 8006604:	f7f9 fdb2 	bl	800016c <__adddf3>
 8006608:	4606      	mov	r6, r0
 800660a:	460f      	mov	r7, r1
 800660c:	f7fa fa14 	bl	8000a38 <__aeabi_d2iz>
 8006610:	2200      	movs	r2, #0
 8006612:	4682      	mov	sl, r0
 8006614:	2300      	movs	r3, #0
 8006616:	4630      	mov	r0, r6
 8006618:	4639      	mov	r1, r7
 800661a:	f7fa f9cf 	bl	80009bc <__aeabi_dcmplt>
 800661e:	b148      	cbz	r0, 8006634 <_dtoa_r+0x16c>
 8006620:	4650      	mov	r0, sl
 8006622:	f7f9 feef 	bl	8000404 <__aeabi_i2d>
 8006626:	4632      	mov	r2, r6
 8006628:	463b      	mov	r3, r7
 800662a:	f7fa f9bd 	bl	80009a8 <__aeabi_dcmpeq>
 800662e:	b908      	cbnz	r0, 8006634 <_dtoa_r+0x16c>
 8006630:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006634:	f1ba 0f16 	cmp.w	sl, #22
 8006638:	d85a      	bhi.n	80066f0 <_dtoa_r+0x228>
 800663a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800663e:	496d      	ldr	r1, [pc, #436]	; (80067f4 <_dtoa_r+0x32c>)
 8006640:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8006644:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006648:	f7fa f9d6 	bl	80009f8 <__aeabi_dcmpgt>
 800664c:	2800      	cmp	r0, #0
 800664e:	d051      	beq.n	80066f4 <_dtoa_r+0x22c>
 8006650:	2300      	movs	r3, #0
 8006652:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006656:	930d      	str	r3, [sp, #52]	; 0x34
 8006658:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800665a:	1b5d      	subs	r5, r3, r5
 800665c:	1e6b      	subs	r3, r5, #1
 800665e:	9307      	str	r3, [sp, #28]
 8006660:	bf43      	ittte	mi
 8006662:	2300      	movmi	r3, #0
 8006664:	f1c5 0901 	rsbmi	r9, r5, #1
 8006668:	9307      	strmi	r3, [sp, #28]
 800666a:	f04f 0900 	movpl.w	r9, #0
 800666e:	f1ba 0f00 	cmp.w	sl, #0
 8006672:	db41      	blt.n	80066f8 <_dtoa_r+0x230>
 8006674:	9b07      	ldr	r3, [sp, #28]
 8006676:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 800667a:	4453      	add	r3, sl
 800667c:	9307      	str	r3, [sp, #28]
 800667e:	2300      	movs	r3, #0
 8006680:	9308      	str	r3, [sp, #32]
 8006682:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006684:	2b09      	cmp	r3, #9
 8006686:	f200 808f 	bhi.w	80067a8 <_dtoa_r+0x2e0>
 800668a:	2b05      	cmp	r3, #5
 800668c:	bfc4      	itt	gt
 800668e:	3b04      	subgt	r3, #4
 8006690:	931e      	strgt	r3, [sp, #120]	; 0x78
 8006692:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006694:	bfc8      	it	gt
 8006696:	2500      	movgt	r5, #0
 8006698:	f1a3 0302 	sub.w	r3, r3, #2
 800669c:	bfd8      	it	le
 800669e:	2501      	movle	r5, #1
 80066a0:	2b03      	cmp	r3, #3
 80066a2:	f200 808d 	bhi.w	80067c0 <_dtoa_r+0x2f8>
 80066a6:	e8df f003 	tbb	[pc, r3]
 80066aa:	7d7b      	.short	0x7d7b
 80066ac:	6f2f      	.short	0x6f2f
 80066ae:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80066b2:	441d      	add	r5, r3
 80066b4:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80066b8:	2820      	cmp	r0, #32
 80066ba:	dd13      	ble.n	80066e4 <_dtoa_r+0x21c>
 80066bc:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80066c0:	9b02      	ldr	r3, [sp, #8]
 80066c2:	fa08 f800 	lsl.w	r8, r8, r0
 80066c6:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80066ca:	fa23 f000 	lsr.w	r0, r3, r0
 80066ce:	ea48 0000 	orr.w	r0, r8, r0
 80066d2:	f7f9 fe87 	bl	80003e4 <__aeabi_ui2d>
 80066d6:	2301      	movs	r3, #1
 80066d8:	4680      	mov	r8, r0
 80066da:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 80066de:	3d01      	subs	r5, #1
 80066e0:	9310      	str	r3, [sp, #64]	; 0x40
 80066e2:	e771      	b.n	80065c8 <_dtoa_r+0x100>
 80066e4:	9b02      	ldr	r3, [sp, #8]
 80066e6:	f1c0 0020 	rsb	r0, r0, #32
 80066ea:	fa03 f000 	lsl.w	r0, r3, r0
 80066ee:	e7f0      	b.n	80066d2 <_dtoa_r+0x20a>
 80066f0:	2301      	movs	r3, #1
 80066f2:	e7b0      	b.n	8006656 <_dtoa_r+0x18e>
 80066f4:	900d      	str	r0, [sp, #52]	; 0x34
 80066f6:	e7af      	b.n	8006658 <_dtoa_r+0x190>
 80066f8:	f1ca 0300 	rsb	r3, sl, #0
 80066fc:	9308      	str	r3, [sp, #32]
 80066fe:	2300      	movs	r3, #0
 8006700:	eba9 090a 	sub.w	r9, r9, sl
 8006704:	930c      	str	r3, [sp, #48]	; 0x30
 8006706:	e7bc      	b.n	8006682 <_dtoa_r+0x1ba>
 8006708:	2301      	movs	r3, #1
 800670a:	9309      	str	r3, [sp, #36]	; 0x24
 800670c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800670e:	2b00      	cmp	r3, #0
 8006710:	dd74      	ble.n	80067fc <_dtoa_r+0x334>
 8006712:	4698      	mov	r8, r3
 8006714:	9304      	str	r3, [sp, #16]
 8006716:	2200      	movs	r2, #0
 8006718:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800671a:	6072      	str	r2, [r6, #4]
 800671c:	2204      	movs	r2, #4
 800671e:	f102 0014 	add.w	r0, r2, #20
 8006722:	4298      	cmp	r0, r3
 8006724:	6871      	ldr	r1, [r6, #4]
 8006726:	d96e      	bls.n	8006806 <_dtoa_r+0x33e>
 8006728:	4620      	mov	r0, r4
 800672a:	f000 fe8e 	bl	800744a <_Balloc>
 800672e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006730:	6030      	str	r0, [r6, #0]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f1b8 0f0e 	cmp.w	r8, #14
 8006738:	9306      	str	r3, [sp, #24]
 800673a:	f200 80ed 	bhi.w	8006918 <_dtoa_r+0x450>
 800673e:	2d00      	cmp	r5, #0
 8006740:	f000 80ea 	beq.w	8006918 <_dtoa_r+0x450>
 8006744:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006748:	f1ba 0f00 	cmp.w	sl, #0
 800674c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8006750:	dd77      	ble.n	8006842 <_dtoa_r+0x37a>
 8006752:	4a28      	ldr	r2, [pc, #160]	; (80067f4 <_dtoa_r+0x32c>)
 8006754:	f00a 030f 	and.w	r3, sl, #15
 8006758:	ea4f 162a 	mov.w	r6, sl, asr #4
 800675c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006760:	06f0      	lsls	r0, r6, #27
 8006762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006766:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800676a:	d568      	bpl.n	800683e <_dtoa_r+0x376>
 800676c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8006770:	4b21      	ldr	r3, [pc, #132]	; (80067f8 <_dtoa_r+0x330>)
 8006772:	2503      	movs	r5, #3
 8006774:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006778:	f7f9 ffd8 	bl	800072c <__aeabi_ddiv>
 800677c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006780:	f006 060f 	and.w	r6, r6, #15
 8006784:	4f1c      	ldr	r7, [pc, #112]	; (80067f8 <_dtoa_r+0x330>)
 8006786:	e04f      	b.n	8006828 <_dtoa_r+0x360>
 8006788:	2301      	movs	r3, #1
 800678a:	9309      	str	r3, [sp, #36]	; 0x24
 800678c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800678e:	4453      	add	r3, sl
 8006790:	f103 0801 	add.w	r8, r3, #1
 8006794:	9304      	str	r3, [sp, #16]
 8006796:	4643      	mov	r3, r8
 8006798:	2b01      	cmp	r3, #1
 800679a:	bfb8      	it	lt
 800679c:	2301      	movlt	r3, #1
 800679e:	e7ba      	b.n	8006716 <_dtoa_r+0x24e>
 80067a0:	2300      	movs	r3, #0
 80067a2:	e7b2      	b.n	800670a <_dtoa_r+0x242>
 80067a4:	2300      	movs	r3, #0
 80067a6:	e7f0      	b.n	800678a <_dtoa_r+0x2c2>
 80067a8:	2501      	movs	r5, #1
 80067aa:	2300      	movs	r3, #0
 80067ac:	9509      	str	r5, [sp, #36]	; 0x24
 80067ae:	931e      	str	r3, [sp, #120]	; 0x78
 80067b0:	f04f 33ff 	mov.w	r3, #4294967295
 80067b4:	2200      	movs	r2, #0
 80067b6:	9304      	str	r3, [sp, #16]
 80067b8:	4698      	mov	r8, r3
 80067ba:	2312      	movs	r3, #18
 80067bc:	921f      	str	r2, [sp, #124]	; 0x7c
 80067be:	e7aa      	b.n	8006716 <_dtoa_r+0x24e>
 80067c0:	2301      	movs	r3, #1
 80067c2:	9309      	str	r3, [sp, #36]	; 0x24
 80067c4:	e7f4      	b.n	80067b0 <_dtoa_r+0x2e8>
 80067c6:	bf00      	nop
 80067c8:	636f4361 	.word	0x636f4361
 80067cc:	3fd287a7 	.word	0x3fd287a7
 80067d0:	8b60c8b3 	.word	0x8b60c8b3
 80067d4:	3fc68a28 	.word	0x3fc68a28
 80067d8:	509f79fb 	.word	0x509f79fb
 80067dc:	3fd34413 	.word	0x3fd34413
 80067e0:	7ff00000 	.word	0x7ff00000
 80067e4:	080081a9 	.word	0x080081a9
 80067e8:	080081a0 	.word	0x080081a0
 80067ec:	0800817d 	.word	0x0800817d
 80067f0:	3ff80000 	.word	0x3ff80000
 80067f4:	08008238 	.word	0x08008238
 80067f8:	08008210 	.word	0x08008210
 80067fc:	2301      	movs	r3, #1
 80067fe:	9304      	str	r3, [sp, #16]
 8006800:	4698      	mov	r8, r3
 8006802:	461a      	mov	r2, r3
 8006804:	e7da      	b.n	80067bc <_dtoa_r+0x2f4>
 8006806:	3101      	adds	r1, #1
 8006808:	6071      	str	r1, [r6, #4]
 800680a:	0052      	lsls	r2, r2, #1
 800680c:	e787      	b.n	800671e <_dtoa_r+0x256>
 800680e:	07f1      	lsls	r1, r6, #31
 8006810:	d508      	bpl.n	8006824 <_dtoa_r+0x35c>
 8006812:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006816:	e9d7 2300 	ldrd	r2, r3, [r7]
 800681a:	f7f9 fe5d 	bl	80004d8 <__aeabi_dmul>
 800681e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006822:	3501      	adds	r5, #1
 8006824:	1076      	asrs	r6, r6, #1
 8006826:	3708      	adds	r7, #8
 8006828:	2e00      	cmp	r6, #0
 800682a:	d1f0      	bne.n	800680e <_dtoa_r+0x346>
 800682c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006830:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006834:	f7f9 ff7a 	bl	800072c <__aeabi_ddiv>
 8006838:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800683c:	e01b      	b.n	8006876 <_dtoa_r+0x3ae>
 800683e:	2502      	movs	r5, #2
 8006840:	e7a0      	b.n	8006784 <_dtoa_r+0x2bc>
 8006842:	f000 80a4 	beq.w	800698e <_dtoa_r+0x4c6>
 8006846:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800684a:	f1ca 0600 	rsb	r6, sl, #0
 800684e:	4ba0      	ldr	r3, [pc, #640]	; (8006ad0 <_dtoa_r+0x608>)
 8006850:	f006 020f 	and.w	r2, r6, #15
 8006854:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800685c:	f7f9 fe3c 	bl	80004d8 <__aeabi_dmul>
 8006860:	2502      	movs	r5, #2
 8006862:	2300      	movs	r3, #0
 8006864:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006868:	4f9a      	ldr	r7, [pc, #616]	; (8006ad4 <_dtoa_r+0x60c>)
 800686a:	1136      	asrs	r6, r6, #4
 800686c:	2e00      	cmp	r6, #0
 800686e:	f040 8083 	bne.w	8006978 <_dtoa_r+0x4b0>
 8006872:	2b00      	cmp	r3, #0
 8006874:	d1e0      	bne.n	8006838 <_dtoa_r+0x370>
 8006876:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006878:	2b00      	cmp	r3, #0
 800687a:	f000 808a 	beq.w	8006992 <_dtoa_r+0x4ca>
 800687e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006882:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8006886:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800688a:	2200      	movs	r2, #0
 800688c:	4b92      	ldr	r3, [pc, #584]	; (8006ad8 <_dtoa_r+0x610>)
 800688e:	f7fa f895 	bl	80009bc <__aeabi_dcmplt>
 8006892:	2800      	cmp	r0, #0
 8006894:	d07d      	beq.n	8006992 <_dtoa_r+0x4ca>
 8006896:	f1b8 0f00 	cmp.w	r8, #0
 800689a:	d07a      	beq.n	8006992 <_dtoa_r+0x4ca>
 800689c:	9b04      	ldr	r3, [sp, #16]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	dd36      	ble.n	8006910 <_dtoa_r+0x448>
 80068a2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80068a6:	2200      	movs	r2, #0
 80068a8:	4b8c      	ldr	r3, [pc, #560]	; (8006adc <_dtoa_r+0x614>)
 80068aa:	f7f9 fe15 	bl	80004d8 <__aeabi_dmul>
 80068ae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80068b2:	9e04      	ldr	r6, [sp, #16]
 80068b4:	f10a 37ff 	add.w	r7, sl, #4294967295
 80068b8:	3501      	adds	r5, #1
 80068ba:	4628      	mov	r0, r5
 80068bc:	f7f9 fda2 	bl	8000404 <__aeabi_i2d>
 80068c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80068c4:	f7f9 fe08 	bl	80004d8 <__aeabi_dmul>
 80068c8:	2200      	movs	r2, #0
 80068ca:	4b85      	ldr	r3, [pc, #532]	; (8006ae0 <_dtoa_r+0x618>)
 80068cc:	f7f9 fc4e 	bl	800016c <__adddf3>
 80068d0:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 80068d4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80068d8:	950b      	str	r5, [sp, #44]	; 0x2c
 80068da:	2e00      	cmp	r6, #0
 80068dc:	d15c      	bne.n	8006998 <_dtoa_r+0x4d0>
 80068de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80068e2:	2200      	movs	r2, #0
 80068e4:	4b7f      	ldr	r3, [pc, #508]	; (8006ae4 <_dtoa_r+0x61c>)
 80068e6:	f7f9 fc3f 	bl	8000168 <__aeabi_dsub>
 80068ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80068ec:	462b      	mov	r3, r5
 80068ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80068f2:	f7fa f881 	bl	80009f8 <__aeabi_dcmpgt>
 80068f6:	2800      	cmp	r0, #0
 80068f8:	f040 8281 	bne.w	8006dfe <_dtoa_r+0x936>
 80068fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006900:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006902:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8006906:	f7fa f859 	bl	80009bc <__aeabi_dcmplt>
 800690a:	2800      	cmp	r0, #0
 800690c:	f040 8275 	bne.w	8006dfa <_dtoa_r+0x932>
 8006910:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8006914:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006918:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800691a:	2b00      	cmp	r3, #0
 800691c:	f2c0 814b 	blt.w	8006bb6 <_dtoa_r+0x6ee>
 8006920:	f1ba 0f0e 	cmp.w	sl, #14
 8006924:	f300 8147 	bgt.w	8006bb6 <_dtoa_r+0x6ee>
 8006928:	4b69      	ldr	r3, [pc, #420]	; (8006ad0 <_dtoa_r+0x608>)
 800692a:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800692e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006932:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006936:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006938:	2b00      	cmp	r3, #0
 800693a:	f280 80d7 	bge.w	8006aec <_dtoa_r+0x624>
 800693e:	f1b8 0f00 	cmp.w	r8, #0
 8006942:	f300 80d3 	bgt.w	8006aec <_dtoa_r+0x624>
 8006946:	f040 8257 	bne.w	8006df8 <_dtoa_r+0x930>
 800694a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800694e:	2200      	movs	r2, #0
 8006950:	4b64      	ldr	r3, [pc, #400]	; (8006ae4 <_dtoa_r+0x61c>)
 8006952:	f7f9 fdc1 	bl	80004d8 <__aeabi_dmul>
 8006956:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800695a:	f7fa f843 	bl	80009e4 <__aeabi_dcmpge>
 800695e:	4646      	mov	r6, r8
 8006960:	4647      	mov	r7, r8
 8006962:	2800      	cmp	r0, #0
 8006964:	f040 822d 	bne.w	8006dc2 <_dtoa_r+0x8fa>
 8006968:	9b06      	ldr	r3, [sp, #24]
 800696a:	9a06      	ldr	r2, [sp, #24]
 800696c:	1c5d      	adds	r5, r3, #1
 800696e:	2331      	movs	r3, #49	; 0x31
 8006970:	f10a 0a01 	add.w	sl, sl, #1
 8006974:	7013      	strb	r3, [r2, #0]
 8006976:	e228      	b.n	8006dca <_dtoa_r+0x902>
 8006978:	07f2      	lsls	r2, r6, #31
 800697a:	d505      	bpl.n	8006988 <_dtoa_r+0x4c0>
 800697c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006980:	f7f9 fdaa 	bl	80004d8 <__aeabi_dmul>
 8006984:	2301      	movs	r3, #1
 8006986:	3501      	adds	r5, #1
 8006988:	1076      	asrs	r6, r6, #1
 800698a:	3708      	adds	r7, #8
 800698c:	e76e      	b.n	800686c <_dtoa_r+0x3a4>
 800698e:	2502      	movs	r5, #2
 8006990:	e771      	b.n	8006876 <_dtoa_r+0x3ae>
 8006992:	4657      	mov	r7, sl
 8006994:	4646      	mov	r6, r8
 8006996:	e790      	b.n	80068ba <_dtoa_r+0x3f2>
 8006998:	4b4d      	ldr	r3, [pc, #308]	; (8006ad0 <_dtoa_r+0x608>)
 800699a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800699e:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80069a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d048      	beq.n	8006a3a <_dtoa_r+0x572>
 80069a8:	4602      	mov	r2, r0
 80069aa:	460b      	mov	r3, r1
 80069ac:	2000      	movs	r0, #0
 80069ae:	494e      	ldr	r1, [pc, #312]	; (8006ae8 <_dtoa_r+0x620>)
 80069b0:	f7f9 febc 	bl	800072c <__aeabi_ddiv>
 80069b4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80069b8:	f7f9 fbd6 	bl	8000168 <__aeabi_dsub>
 80069bc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80069c0:	9d06      	ldr	r5, [sp, #24]
 80069c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80069c6:	f7fa f837 	bl	8000a38 <__aeabi_d2iz>
 80069ca:	9011      	str	r0, [sp, #68]	; 0x44
 80069cc:	f7f9 fd1a 	bl	8000404 <__aeabi_i2d>
 80069d0:	4602      	mov	r2, r0
 80069d2:	460b      	mov	r3, r1
 80069d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80069d8:	f7f9 fbc6 	bl	8000168 <__aeabi_dsub>
 80069dc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80069de:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80069e2:	3330      	adds	r3, #48	; 0x30
 80069e4:	f805 3b01 	strb.w	r3, [r5], #1
 80069e8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80069ec:	f7f9 ffe6 	bl	80009bc <__aeabi_dcmplt>
 80069f0:	2800      	cmp	r0, #0
 80069f2:	d163      	bne.n	8006abc <_dtoa_r+0x5f4>
 80069f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80069f8:	2000      	movs	r0, #0
 80069fa:	4937      	ldr	r1, [pc, #220]	; (8006ad8 <_dtoa_r+0x610>)
 80069fc:	f7f9 fbb4 	bl	8000168 <__aeabi_dsub>
 8006a00:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006a04:	f7f9 ffda 	bl	80009bc <__aeabi_dcmplt>
 8006a08:	2800      	cmp	r0, #0
 8006a0a:	f040 80b5 	bne.w	8006b78 <_dtoa_r+0x6b0>
 8006a0e:	9b06      	ldr	r3, [sp, #24]
 8006a10:	1aeb      	subs	r3, r5, r3
 8006a12:	429e      	cmp	r6, r3
 8006a14:	f77f af7c 	ble.w	8006910 <_dtoa_r+0x448>
 8006a18:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	4b2f      	ldr	r3, [pc, #188]	; (8006adc <_dtoa_r+0x614>)
 8006a20:	f7f9 fd5a 	bl	80004d8 <__aeabi_dmul>
 8006a24:	2200      	movs	r2, #0
 8006a26:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006a2a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006a2e:	4b2b      	ldr	r3, [pc, #172]	; (8006adc <_dtoa_r+0x614>)
 8006a30:	f7f9 fd52 	bl	80004d8 <__aeabi_dmul>
 8006a34:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006a38:	e7c3      	b.n	80069c2 <_dtoa_r+0x4fa>
 8006a3a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006a3e:	f7f9 fd4b 	bl	80004d8 <__aeabi_dmul>
 8006a42:	9b06      	ldr	r3, [sp, #24]
 8006a44:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006a48:	199d      	adds	r5, r3, r6
 8006a4a:	461e      	mov	r6, r3
 8006a4c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006a50:	f7f9 fff2 	bl	8000a38 <__aeabi_d2iz>
 8006a54:	9011      	str	r0, [sp, #68]	; 0x44
 8006a56:	f7f9 fcd5 	bl	8000404 <__aeabi_i2d>
 8006a5a:	4602      	mov	r2, r0
 8006a5c:	460b      	mov	r3, r1
 8006a5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006a62:	f7f9 fb81 	bl	8000168 <__aeabi_dsub>
 8006a66:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006a68:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006a6c:	3330      	adds	r3, #48	; 0x30
 8006a6e:	f806 3b01 	strb.w	r3, [r6], #1
 8006a72:	42ae      	cmp	r6, r5
 8006a74:	f04f 0200 	mov.w	r2, #0
 8006a78:	d124      	bne.n	8006ac4 <_dtoa_r+0x5fc>
 8006a7a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006a7e:	4b1a      	ldr	r3, [pc, #104]	; (8006ae8 <_dtoa_r+0x620>)
 8006a80:	f7f9 fb74 	bl	800016c <__adddf3>
 8006a84:	4602      	mov	r2, r0
 8006a86:	460b      	mov	r3, r1
 8006a88:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006a8c:	f7f9 ffb4 	bl	80009f8 <__aeabi_dcmpgt>
 8006a90:	2800      	cmp	r0, #0
 8006a92:	d171      	bne.n	8006b78 <_dtoa_r+0x6b0>
 8006a94:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006a98:	2000      	movs	r0, #0
 8006a9a:	4913      	ldr	r1, [pc, #76]	; (8006ae8 <_dtoa_r+0x620>)
 8006a9c:	f7f9 fb64 	bl	8000168 <__aeabi_dsub>
 8006aa0:	4602      	mov	r2, r0
 8006aa2:	460b      	mov	r3, r1
 8006aa4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006aa8:	f7f9 ff88 	bl	80009bc <__aeabi_dcmplt>
 8006aac:	2800      	cmp	r0, #0
 8006aae:	f43f af2f 	beq.w	8006910 <_dtoa_r+0x448>
 8006ab2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006ab6:	1e6a      	subs	r2, r5, #1
 8006ab8:	2b30      	cmp	r3, #48	; 0x30
 8006aba:	d001      	beq.n	8006ac0 <_dtoa_r+0x5f8>
 8006abc:	46ba      	mov	sl, r7
 8006abe:	e04a      	b.n	8006b56 <_dtoa_r+0x68e>
 8006ac0:	4615      	mov	r5, r2
 8006ac2:	e7f6      	b.n	8006ab2 <_dtoa_r+0x5ea>
 8006ac4:	4b05      	ldr	r3, [pc, #20]	; (8006adc <_dtoa_r+0x614>)
 8006ac6:	f7f9 fd07 	bl	80004d8 <__aeabi_dmul>
 8006aca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006ace:	e7bd      	b.n	8006a4c <_dtoa_r+0x584>
 8006ad0:	08008238 	.word	0x08008238
 8006ad4:	08008210 	.word	0x08008210
 8006ad8:	3ff00000 	.word	0x3ff00000
 8006adc:	40240000 	.word	0x40240000
 8006ae0:	401c0000 	.word	0x401c0000
 8006ae4:	40140000 	.word	0x40140000
 8006ae8:	3fe00000 	.word	0x3fe00000
 8006aec:	9d06      	ldr	r5, [sp, #24]
 8006aee:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006af2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006af6:	4630      	mov	r0, r6
 8006af8:	4639      	mov	r1, r7
 8006afa:	f7f9 fe17 	bl	800072c <__aeabi_ddiv>
 8006afe:	f7f9 ff9b 	bl	8000a38 <__aeabi_d2iz>
 8006b02:	4681      	mov	r9, r0
 8006b04:	f7f9 fc7e 	bl	8000404 <__aeabi_i2d>
 8006b08:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006b0c:	f7f9 fce4 	bl	80004d8 <__aeabi_dmul>
 8006b10:	4602      	mov	r2, r0
 8006b12:	460b      	mov	r3, r1
 8006b14:	4630      	mov	r0, r6
 8006b16:	4639      	mov	r1, r7
 8006b18:	f7f9 fb26 	bl	8000168 <__aeabi_dsub>
 8006b1c:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8006b20:	f805 6b01 	strb.w	r6, [r5], #1
 8006b24:	9e06      	ldr	r6, [sp, #24]
 8006b26:	4602      	mov	r2, r0
 8006b28:	1bae      	subs	r6, r5, r6
 8006b2a:	45b0      	cmp	r8, r6
 8006b2c:	460b      	mov	r3, r1
 8006b2e:	d135      	bne.n	8006b9c <_dtoa_r+0x6d4>
 8006b30:	f7f9 fb1c 	bl	800016c <__adddf3>
 8006b34:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006b38:	4606      	mov	r6, r0
 8006b3a:	460f      	mov	r7, r1
 8006b3c:	f7f9 ff5c 	bl	80009f8 <__aeabi_dcmpgt>
 8006b40:	b9c8      	cbnz	r0, 8006b76 <_dtoa_r+0x6ae>
 8006b42:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006b46:	4630      	mov	r0, r6
 8006b48:	4639      	mov	r1, r7
 8006b4a:	f7f9 ff2d 	bl	80009a8 <__aeabi_dcmpeq>
 8006b4e:	b110      	cbz	r0, 8006b56 <_dtoa_r+0x68e>
 8006b50:	f019 0f01 	tst.w	r9, #1
 8006b54:	d10f      	bne.n	8006b76 <_dtoa_r+0x6ae>
 8006b56:	4659      	mov	r1, fp
 8006b58:	4620      	mov	r0, r4
 8006b5a:	f000 fcaa 	bl	80074b2 <_Bfree>
 8006b5e:	2300      	movs	r3, #0
 8006b60:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006b62:	702b      	strb	r3, [r5, #0]
 8006b64:	f10a 0301 	add.w	r3, sl, #1
 8006b68:	6013      	str	r3, [r2, #0]
 8006b6a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	f43f acf3 	beq.w	8006558 <_dtoa_r+0x90>
 8006b72:	601d      	str	r5, [r3, #0]
 8006b74:	e4f0      	b.n	8006558 <_dtoa_r+0x90>
 8006b76:	4657      	mov	r7, sl
 8006b78:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006b7c:	1e6b      	subs	r3, r5, #1
 8006b7e:	2a39      	cmp	r2, #57	; 0x39
 8006b80:	d106      	bne.n	8006b90 <_dtoa_r+0x6c8>
 8006b82:	9a06      	ldr	r2, [sp, #24]
 8006b84:	429a      	cmp	r2, r3
 8006b86:	d107      	bne.n	8006b98 <_dtoa_r+0x6d0>
 8006b88:	2330      	movs	r3, #48	; 0x30
 8006b8a:	7013      	strb	r3, [r2, #0]
 8006b8c:	4613      	mov	r3, r2
 8006b8e:	3701      	adds	r7, #1
 8006b90:	781a      	ldrb	r2, [r3, #0]
 8006b92:	3201      	adds	r2, #1
 8006b94:	701a      	strb	r2, [r3, #0]
 8006b96:	e791      	b.n	8006abc <_dtoa_r+0x5f4>
 8006b98:	461d      	mov	r5, r3
 8006b9a:	e7ed      	b.n	8006b78 <_dtoa_r+0x6b0>
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	4b99      	ldr	r3, [pc, #612]	; (8006e04 <_dtoa_r+0x93c>)
 8006ba0:	f7f9 fc9a 	bl	80004d8 <__aeabi_dmul>
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	4606      	mov	r6, r0
 8006baa:	460f      	mov	r7, r1
 8006bac:	f7f9 fefc 	bl	80009a8 <__aeabi_dcmpeq>
 8006bb0:	2800      	cmp	r0, #0
 8006bb2:	d09e      	beq.n	8006af2 <_dtoa_r+0x62a>
 8006bb4:	e7cf      	b.n	8006b56 <_dtoa_r+0x68e>
 8006bb6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006bb8:	2a00      	cmp	r2, #0
 8006bba:	f000 8088 	beq.w	8006cce <_dtoa_r+0x806>
 8006bbe:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006bc0:	2a01      	cmp	r2, #1
 8006bc2:	dc6d      	bgt.n	8006ca0 <_dtoa_r+0x7d8>
 8006bc4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006bc6:	2a00      	cmp	r2, #0
 8006bc8:	d066      	beq.n	8006c98 <_dtoa_r+0x7d0>
 8006bca:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006bce:	464d      	mov	r5, r9
 8006bd0:	9e08      	ldr	r6, [sp, #32]
 8006bd2:	9a07      	ldr	r2, [sp, #28]
 8006bd4:	2101      	movs	r1, #1
 8006bd6:	441a      	add	r2, r3
 8006bd8:	4620      	mov	r0, r4
 8006bda:	4499      	add	r9, r3
 8006bdc:	9207      	str	r2, [sp, #28]
 8006bde:	f000 fd08 	bl	80075f2 <__i2b>
 8006be2:	4607      	mov	r7, r0
 8006be4:	2d00      	cmp	r5, #0
 8006be6:	dd0b      	ble.n	8006c00 <_dtoa_r+0x738>
 8006be8:	9b07      	ldr	r3, [sp, #28]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	dd08      	ble.n	8006c00 <_dtoa_r+0x738>
 8006bee:	42ab      	cmp	r3, r5
 8006bf0:	bfa8      	it	ge
 8006bf2:	462b      	movge	r3, r5
 8006bf4:	9a07      	ldr	r2, [sp, #28]
 8006bf6:	eba9 0903 	sub.w	r9, r9, r3
 8006bfa:	1aed      	subs	r5, r5, r3
 8006bfc:	1ad3      	subs	r3, r2, r3
 8006bfe:	9307      	str	r3, [sp, #28]
 8006c00:	9b08      	ldr	r3, [sp, #32]
 8006c02:	b1eb      	cbz	r3, 8006c40 <_dtoa_r+0x778>
 8006c04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d065      	beq.n	8006cd6 <_dtoa_r+0x80e>
 8006c0a:	b18e      	cbz	r6, 8006c30 <_dtoa_r+0x768>
 8006c0c:	4639      	mov	r1, r7
 8006c0e:	4632      	mov	r2, r6
 8006c10:	4620      	mov	r0, r4
 8006c12:	f000 fd8d 	bl	8007730 <__pow5mult>
 8006c16:	465a      	mov	r2, fp
 8006c18:	4601      	mov	r1, r0
 8006c1a:	4607      	mov	r7, r0
 8006c1c:	4620      	mov	r0, r4
 8006c1e:	f000 fcf1 	bl	8007604 <__multiply>
 8006c22:	4659      	mov	r1, fp
 8006c24:	900a      	str	r0, [sp, #40]	; 0x28
 8006c26:	4620      	mov	r0, r4
 8006c28:	f000 fc43 	bl	80074b2 <_Bfree>
 8006c2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c2e:	469b      	mov	fp, r3
 8006c30:	9b08      	ldr	r3, [sp, #32]
 8006c32:	1b9a      	subs	r2, r3, r6
 8006c34:	d004      	beq.n	8006c40 <_dtoa_r+0x778>
 8006c36:	4659      	mov	r1, fp
 8006c38:	4620      	mov	r0, r4
 8006c3a:	f000 fd79 	bl	8007730 <__pow5mult>
 8006c3e:	4683      	mov	fp, r0
 8006c40:	2101      	movs	r1, #1
 8006c42:	4620      	mov	r0, r4
 8006c44:	f000 fcd5 	bl	80075f2 <__i2b>
 8006c48:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006c4a:	4606      	mov	r6, r0
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	f000 81c6 	beq.w	8006fde <_dtoa_r+0xb16>
 8006c52:	461a      	mov	r2, r3
 8006c54:	4601      	mov	r1, r0
 8006c56:	4620      	mov	r0, r4
 8006c58:	f000 fd6a 	bl	8007730 <__pow5mult>
 8006c5c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006c5e:	4606      	mov	r6, r0
 8006c60:	2b01      	cmp	r3, #1
 8006c62:	dc3e      	bgt.n	8006ce2 <_dtoa_r+0x81a>
 8006c64:	9b02      	ldr	r3, [sp, #8]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d137      	bne.n	8006cda <_dtoa_r+0x812>
 8006c6a:	9b03      	ldr	r3, [sp, #12]
 8006c6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d134      	bne.n	8006cde <_dtoa_r+0x816>
 8006c74:	9b03      	ldr	r3, [sp, #12]
 8006c76:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006c7a:	0d1b      	lsrs	r3, r3, #20
 8006c7c:	051b      	lsls	r3, r3, #20
 8006c7e:	b12b      	cbz	r3, 8006c8c <_dtoa_r+0x7c4>
 8006c80:	9b07      	ldr	r3, [sp, #28]
 8006c82:	f109 0901 	add.w	r9, r9, #1
 8006c86:	3301      	adds	r3, #1
 8006c88:	9307      	str	r3, [sp, #28]
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	9308      	str	r3, [sp, #32]
 8006c8e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d128      	bne.n	8006ce6 <_dtoa_r+0x81e>
 8006c94:	2001      	movs	r0, #1
 8006c96:	e02e      	b.n	8006cf6 <_dtoa_r+0x82e>
 8006c98:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006c9a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006c9e:	e796      	b.n	8006bce <_dtoa_r+0x706>
 8006ca0:	9b08      	ldr	r3, [sp, #32]
 8006ca2:	f108 36ff 	add.w	r6, r8, #4294967295
 8006ca6:	42b3      	cmp	r3, r6
 8006ca8:	bfb7      	itett	lt
 8006caa:	9b08      	ldrlt	r3, [sp, #32]
 8006cac:	1b9e      	subge	r6, r3, r6
 8006cae:	1af2      	sublt	r2, r6, r3
 8006cb0:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8006cb2:	bfbf      	itttt	lt
 8006cb4:	9608      	strlt	r6, [sp, #32]
 8006cb6:	189b      	addlt	r3, r3, r2
 8006cb8:	930c      	strlt	r3, [sp, #48]	; 0x30
 8006cba:	2600      	movlt	r6, #0
 8006cbc:	f1b8 0f00 	cmp.w	r8, #0
 8006cc0:	bfb9      	ittee	lt
 8006cc2:	eba9 0508 	sublt.w	r5, r9, r8
 8006cc6:	2300      	movlt	r3, #0
 8006cc8:	464d      	movge	r5, r9
 8006cca:	4643      	movge	r3, r8
 8006ccc:	e781      	b.n	8006bd2 <_dtoa_r+0x70a>
 8006cce:	9e08      	ldr	r6, [sp, #32]
 8006cd0:	464d      	mov	r5, r9
 8006cd2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006cd4:	e786      	b.n	8006be4 <_dtoa_r+0x71c>
 8006cd6:	9a08      	ldr	r2, [sp, #32]
 8006cd8:	e7ad      	b.n	8006c36 <_dtoa_r+0x76e>
 8006cda:	2300      	movs	r3, #0
 8006cdc:	e7d6      	b.n	8006c8c <_dtoa_r+0x7c4>
 8006cde:	9b02      	ldr	r3, [sp, #8]
 8006ce0:	e7d4      	b.n	8006c8c <_dtoa_r+0x7c4>
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	9308      	str	r3, [sp, #32]
 8006ce6:	6933      	ldr	r3, [r6, #16]
 8006ce8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006cec:	6918      	ldr	r0, [r3, #16]
 8006cee:	f000 fc32 	bl	8007556 <__hi0bits>
 8006cf2:	f1c0 0020 	rsb	r0, r0, #32
 8006cf6:	9b07      	ldr	r3, [sp, #28]
 8006cf8:	4418      	add	r0, r3
 8006cfa:	f010 001f 	ands.w	r0, r0, #31
 8006cfe:	d047      	beq.n	8006d90 <_dtoa_r+0x8c8>
 8006d00:	f1c0 0320 	rsb	r3, r0, #32
 8006d04:	2b04      	cmp	r3, #4
 8006d06:	dd3b      	ble.n	8006d80 <_dtoa_r+0x8b8>
 8006d08:	9b07      	ldr	r3, [sp, #28]
 8006d0a:	f1c0 001c 	rsb	r0, r0, #28
 8006d0e:	4481      	add	r9, r0
 8006d10:	4405      	add	r5, r0
 8006d12:	4403      	add	r3, r0
 8006d14:	9307      	str	r3, [sp, #28]
 8006d16:	f1b9 0f00 	cmp.w	r9, #0
 8006d1a:	dd05      	ble.n	8006d28 <_dtoa_r+0x860>
 8006d1c:	4659      	mov	r1, fp
 8006d1e:	464a      	mov	r2, r9
 8006d20:	4620      	mov	r0, r4
 8006d22:	f000 fd53 	bl	80077cc <__lshift>
 8006d26:	4683      	mov	fp, r0
 8006d28:	9b07      	ldr	r3, [sp, #28]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	dd05      	ble.n	8006d3a <_dtoa_r+0x872>
 8006d2e:	4631      	mov	r1, r6
 8006d30:	461a      	mov	r2, r3
 8006d32:	4620      	mov	r0, r4
 8006d34:	f000 fd4a 	bl	80077cc <__lshift>
 8006d38:	4606      	mov	r6, r0
 8006d3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006d3c:	b353      	cbz	r3, 8006d94 <_dtoa_r+0x8cc>
 8006d3e:	4631      	mov	r1, r6
 8006d40:	4658      	mov	r0, fp
 8006d42:	f000 fd97 	bl	8007874 <__mcmp>
 8006d46:	2800      	cmp	r0, #0
 8006d48:	da24      	bge.n	8006d94 <_dtoa_r+0x8cc>
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	4659      	mov	r1, fp
 8006d4e:	220a      	movs	r2, #10
 8006d50:	4620      	mov	r0, r4
 8006d52:	f000 fbc5 	bl	80074e0 <__multadd>
 8006d56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d58:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006d5c:	4683      	mov	fp, r0
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	f000 8144 	beq.w	8006fec <_dtoa_r+0xb24>
 8006d64:	2300      	movs	r3, #0
 8006d66:	4639      	mov	r1, r7
 8006d68:	220a      	movs	r2, #10
 8006d6a:	4620      	mov	r0, r4
 8006d6c:	f000 fbb8 	bl	80074e0 <__multadd>
 8006d70:	9b04      	ldr	r3, [sp, #16]
 8006d72:	4607      	mov	r7, r0
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	dc4d      	bgt.n	8006e14 <_dtoa_r+0x94c>
 8006d78:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006d7a:	2b02      	cmp	r3, #2
 8006d7c:	dd4a      	ble.n	8006e14 <_dtoa_r+0x94c>
 8006d7e:	e011      	b.n	8006da4 <_dtoa_r+0x8dc>
 8006d80:	d0c9      	beq.n	8006d16 <_dtoa_r+0x84e>
 8006d82:	9a07      	ldr	r2, [sp, #28]
 8006d84:	331c      	adds	r3, #28
 8006d86:	441a      	add	r2, r3
 8006d88:	4499      	add	r9, r3
 8006d8a:	441d      	add	r5, r3
 8006d8c:	4613      	mov	r3, r2
 8006d8e:	e7c1      	b.n	8006d14 <_dtoa_r+0x84c>
 8006d90:	4603      	mov	r3, r0
 8006d92:	e7f6      	b.n	8006d82 <_dtoa_r+0x8ba>
 8006d94:	f1b8 0f00 	cmp.w	r8, #0
 8006d98:	dc36      	bgt.n	8006e08 <_dtoa_r+0x940>
 8006d9a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006d9c:	2b02      	cmp	r3, #2
 8006d9e:	dd33      	ble.n	8006e08 <_dtoa_r+0x940>
 8006da0:	f8cd 8010 	str.w	r8, [sp, #16]
 8006da4:	9b04      	ldr	r3, [sp, #16]
 8006da6:	b963      	cbnz	r3, 8006dc2 <_dtoa_r+0x8fa>
 8006da8:	4631      	mov	r1, r6
 8006daa:	2205      	movs	r2, #5
 8006dac:	4620      	mov	r0, r4
 8006dae:	f000 fb97 	bl	80074e0 <__multadd>
 8006db2:	4601      	mov	r1, r0
 8006db4:	4606      	mov	r6, r0
 8006db6:	4658      	mov	r0, fp
 8006db8:	f000 fd5c 	bl	8007874 <__mcmp>
 8006dbc:	2800      	cmp	r0, #0
 8006dbe:	f73f add3 	bgt.w	8006968 <_dtoa_r+0x4a0>
 8006dc2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006dc4:	9d06      	ldr	r5, [sp, #24]
 8006dc6:	ea6f 0a03 	mvn.w	sl, r3
 8006dca:	f04f 0900 	mov.w	r9, #0
 8006dce:	4631      	mov	r1, r6
 8006dd0:	4620      	mov	r0, r4
 8006dd2:	f000 fb6e 	bl	80074b2 <_Bfree>
 8006dd6:	2f00      	cmp	r7, #0
 8006dd8:	f43f aebd 	beq.w	8006b56 <_dtoa_r+0x68e>
 8006ddc:	f1b9 0f00 	cmp.w	r9, #0
 8006de0:	d005      	beq.n	8006dee <_dtoa_r+0x926>
 8006de2:	45b9      	cmp	r9, r7
 8006de4:	d003      	beq.n	8006dee <_dtoa_r+0x926>
 8006de6:	4649      	mov	r1, r9
 8006de8:	4620      	mov	r0, r4
 8006dea:	f000 fb62 	bl	80074b2 <_Bfree>
 8006dee:	4639      	mov	r1, r7
 8006df0:	4620      	mov	r0, r4
 8006df2:	f000 fb5e 	bl	80074b2 <_Bfree>
 8006df6:	e6ae      	b.n	8006b56 <_dtoa_r+0x68e>
 8006df8:	2600      	movs	r6, #0
 8006dfa:	4637      	mov	r7, r6
 8006dfc:	e7e1      	b.n	8006dc2 <_dtoa_r+0x8fa>
 8006dfe:	46ba      	mov	sl, r7
 8006e00:	4637      	mov	r7, r6
 8006e02:	e5b1      	b.n	8006968 <_dtoa_r+0x4a0>
 8006e04:	40240000 	.word	0x40240000
 8006e08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e0a:	f8cd 8010 	str.w	r8, [sp, #16]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	f000 80f3 	beq.w	8006ffa <_dtoa_r+0xb32>
 8006e14:	2d00      	cmp	r5, #0
 8006e16:	dd05      	ble.n	8006e24 <_dtoa_r+0x95c>
 8006e18:	4639      	mov	r1, r7
 8006e1a:	462a      	mov	r2, r5
 8006e1c:	4620      	mov	r0, r4
 8006e1e:	f000 fcd5 	bl	80077cc <__lshift>
 8006e22:	4607      	mov	r7, r0
 8006e24:	9b08      	ldr	r3, [sp, #32]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d04c      	beq.n	8006ec4 <_dtoa_r+0x9fc>
 8006e2a:	6879      	ldr	r1, [r7, #4]
 8006e2c:	4620      	mov	r0, r4
 8006e2e:	f000 fb0c 	bl	800744a <_Balloc>
 8006e32:	4605      	mov	r5, r0
 8006e34:	693a      	ldr	r2, [r7, #16]
 8006e36:	f107 010c 	add.w	r1, r7, #12
 8006e3a:	3202      	adds	r2, #2
 8006e3c:	0092      	lsls	r2, r2, #2
 8006e3e:	300c      	adds	r0, #12
 8006e40:	f000 faf8 	bl	8007434 <memcpy>
 8006e44:	2201      	movs	r2, #1
 8006e46:	4629      	mov	r1, r5
 8006e48:	4620      	mov	r0, r4
 8006e4a:	f000 fcbf 	bl	80077cc <__lshift>
 8006e4e:	46b9      	mov	r9, r7
 8006e50:	4607      	mov	r7, r0
 8006e52:	9b06      	ldr	r3, [sp, #24]
 8006e54:	9307      	str	r3, [sp, #28]
 8006e56:	9b02      	ldr	r3, [sp, #8]
 8006e58:	f003 0301 	and.w	r3, r3, #1
 8006e5c:	9308      	str	r3, [sp, #32]
 8006e5e:	4631      	mov	r1, r6
 8006e60:	4658      	mov	r0, fp
 8006e62:	f7ff faa3 	bl	80063ac <quorem>
 8006e66:	4649      	mov	r1, r9
 8006e68:	4605      	mov	r5, r0
 8006e6a:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8006e6e:	4658      	mov	r0, fp
 8006e70:	f000 fd00 	bl	8007874 <__mcmp>
 8006e74:	463a      	mov	r2, r7
 8006e76:	9002      	str	r0, [sp, #8]
 8006e78:	4631      	mov	r1, r6
 8006e7a:	4620      	mov	r0, r4
 8006e7c:	f000 fd14 	bl	80078a8 <__mdiff>
 8006e80:	68c3      	ldr	r3, [r0, #12]
 8006e82:	4602      	mov	r2, r0
 8006e84:	bb03      	cbnz	r3, 8006ec8 <_dtoa_r+0xa00>
 8006e86:	4601      	mov	r1, r0
 8006e88:	9009      	str	r0, [sp, #36]	; 0x24
 8006e8a:	4658      	mov	r0, fp
 8006e8c:	f000 fcf2 	bl	8007874 <__mcmp>
 8006e90:	4603      	mov	r3, r0
 8006e92:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006e94:	4611      	mov	r1, r2
 8006e96:	4620      	mov	r0, r4
 8006e98:	9309      	str	r3, [sp, #36]	; 0x24
 8006e9a:	f000 fb0a 	bl	80074b2 <_Bfree>
 8006e9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ea0:	b9a3      	cbnz	r3, 8006ecc <_dtoa_r+0xa04>
 8006ea2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006ea4:	b992      	cbnz	r2, 8006ecc <_dtoa_r+0xa04>
 8006ea6:	9a08      	ldr	r2, [sp, #32]
 8006ea8:	b982      	cbnz	r2, 8006ecc <_dtoa_r+0xa04>
 8006eaa:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006eae:	d029      	beq.n	8006f04 <_dtoa_r+0xa3c>
 8006eb0:	9b02      	ldr	r3, [sp, #8]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	dd01      	ble.n	8006eba <_dtoa_r+0x9f2>
 8006eb6:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8006eba:	9b07      	ldr	r3, [sp, #28]
 8006ebc:	1c5d      	adds	r5, r3, #1
 8006ebe:	f883 8000 	strb.w	r8, [r3]
 8006ec2:	e784      	b.n	8006dce <_dtoa_r+0x906>
 8006ec4:	4638      	mov	r0, r7
 8006ec6:	e7c2      	b.n	8006e4e <_dtoa_r+0x986>
 8006ec8:	2301      	movs	r3, #1
 8006eca:	e7e3      	b.n	8006e94 <_dtoa_r+0x9cc>
 8006ecc:	9a02      	ldr	r2, [sp, #8]
 8006ece:	2a00      	cmp	r2, #0
 8006ed0:	db04      	blt.n	8006edc <_dtoa_r+0xa14>
 8006ed2:	d123      	bne.n	8006f1c <_dtoa_r+0xa54>
 8006ed4:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006ed6:	bb0a      	cbnz	r2, 8006f1c <_dtoa_r+0xa54>
 8006ed8:	9a08      	ldr	r2, [sp, #32]
 8006eda:	b9fa      	cbnz	r2, 8006f1c <_dtoa_r+0xa54>
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	ddec      	ble.n	8006eba <_dtoa_r+0x9f2>
 8006ee0:	4659      	mov	r1, fp
 8006ee2:	2201      	movs	r2, #1
 8006ee4:	4620      	mov	r0, r4
 8006ee6:	f000 fc71 	bl	80077cc <__lshift>
 8006eea:	4631      	mov	r1, r6
 8006eec:	4683      	mov	fp, r0
 8006eee:	f000 fcc1 	bl	8007874 <__mcmp>
 8006ef2:	2800      	cmp	r0, #0
 8006ef4:	dc03      	bgt.n	8006efe <_dtoa_r+0xa36>
 8006ef6:	d1e0      	bne.n	8006eba <_dtoa_r+0x9f2>
 8006ef8:	f018 0f01 	tst.w	r8, #1
 8006efc:	d0dd      	beq.n	8006eba <_dtoa_r+0x9f2>
 8006efe:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006f02:	d1d8      	bne.n	8006eb6 <_dtoa_r+0x9ee>
 8006f04:	9b07      	ldr	r3, [sp, #28]
 8006f06:	9a07      	ldr	r2, [sp, #28]
 8006f08:	1c5d      	adds	r5, r3, #1
 8006f0a:	2339      	movs	r3, #57	; 0x39
 8006f0c:	7013      	strb	r3, [r2, #0]
 8006f0e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006f12:	1e6a      	subs	r2, r5, #1
 8006f14:	2b39      	cmp	r3, #57	; 0x39
 8006f16:	d04d      	beq.n	8006fb4 <_dtoa_r+0xaec>
 8006f18:	3301      	adds	r3, #1
 8006f1a:	e052      	b.n	8006fc2 <_dtoa_r+0xafa>
 8006f1c:	9a07      	ldr	r2, [sp, #28]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	f102 0501 	add.w	r5, r2, #1
 8006f24:	dd06      	ble.n	8006f34 <_dtoa_r+0xa6c>
 8006f26:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006f2a:	d0eb      	beq.n	8006f04 <_dtoa_r+0xa3c>
 8006f2c:	f108 0801 	add.w	r8, r8, #1
 8006f30:	9b07      	ldr	r3, [sp, #28]
 8006f32:	e7c4      	b.n	8006ebe <_dtoa_r+0x9f6>
 8006f34:	9b06      	ldr	r3, [sp, #24]
 8006f36:	9a04      	ldr	r2, [sp, #16]
 8006f38:	1aeb      	subs	r3, r5, r3
 8006f3a:	4293      	cmp	r3, r2
 8006f3c:	f805 8c01 	strb.w	r8, [r5, #-1]
 8006f40:	d021      	beq.n	8006f86 <_dtoa_r+0xabe>
 8006f42:	4659      	mov	r1, fp
 8006f44:	2300      	movs	r3, #0
 8006f46:	220a      	movs	r2, #10
 8006f48:	4620      	mov	r0, r4
 8006f4a:	f000 fac9 	bl	80074e0 <__multadd>
 8006f4e:	45b9      	cmp	r9, r7
 8006f50:	4683      	mov	fp, r0
 8006f52:	f04f 0300 	mov.w	r3, #0
 8006f56:	f04f 020a 	mov.w	r2, #10
 8006f5a:	4649      	mov	r1, r9
 8006f5c:	4620      	mov	r0, r4
 8006f5e:	d105      	bne.n	8006f6c <_dtoa_r+0xaa4>
 8006f60:	f000 fabe 	bl	80074e0 <__multadd>
 8006f64:	4681      	mov	r9, r0
 8006f66:	4607      	mov	r7, r0
 8006f68:	9507      	str	r5, [sp, #28]
 8006f6a:	e778      	b.n	8006e5e <_dtoa_r+0x996>
 8006f6c:	f000 fab8 	bl	80074e0 <__multadd>
 8006f70:	4639      	mov	r1, r7
 8006f72:	4681      	mov	r9, r0
 8006f74:	2300      	movs	r3, #0
 8006f76:	220a      	movs	r2, #10
 8006f78:	4620      	mov	r0, r4
 8006f7a:	f000 fab1 	bl	80074e0 <__multadd>
 8006f7e:	4607      	mov	r7, r0
 8006f80:	e7f2      	b.n	8006f68 <_dtoa_r+0xaa0>
 8006f82:	f04f 0900 	mov.w	r9, #0
 8006f86:	4659      	mov	r1, fp
 8006f88:	2201      	movs	r2, #1
 8006f8a:	4620      	mov	r0, r4
 8006f8c:	f000 fc1e 	bl	80077cc <__lshift>
 8006f90:	4631      	mov	r1, r6
 8006f92:	4683      	mov	fp, r0
 8006f94:	f000 fc6e 	bl	8007874 <__mcmp>
 8006f98:	2800      	cmp	r0, #0
 8006f9a:	dcb8      	bgt.n	8006f0e <_dtoa_r+0xa46>
 8006f9c:	d102      	bne.n	8006fa4 <_dtoa_r+0xadc>
 8006f9e:	f018 0f01 	tst.w	r8, #1
 8006fa2:	d1b4      	bne.n	8006f0e <_dtoa_r+0xa46>
 8006fa4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006fa8:	1e6a      	subs	r2, r5, #1
 8006faa:	2b30      	cmp	r3, #48	; 0x30
 8006fac:	f47f af0f 	bne.w	8006dce <_dtoa_r+0x906>
 8006fb0:	4615      	mov	r5, r2
 8006fb2:	e7f7      	b.n	8006fa4 <_dtoa_r+0xadc>
 8006fb4:	9b06      	ldr	r3, [sp, #24]
 8006fb6:	4293      	cmp	r3, r2
 8006fb8:	d105      	bne.n	8006fc6 <_dtoa_r+0xafe>
 8006fba:	2331      	movs	r3, #49	; 0x31
 8006fbc:	9a06      	ldr	r2, [sp, #24]
 8006fbe:	f10a 0a01 	add.w	sl, sl, #1
 8006fc2:	7013      	strb	r3, [r2, #0]
 8006fc4:	e703      	b.n	8006dce <_dtoa_r+0x906>
 8006fc6:	4615      	mov	r5, r2
 8006fc8:	e7a1      	b.n	8006f0e <_dtoa_r+0xa46>
 8006fca:	4b17      	ldr	r3, [pc, #92]	; (8007028 <_dtoa_r+0xb60>)
 8006fcc:	f7ff bae1 	b.w	8006592 <_dtoa_r+0xca>
 8006fd0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	f47f aabb 	bne.w	800654e <_dtoa_r+0x86>
 8006fd8:	4b14      	ldr	r3, [pc, #80]	; (800702c <_dtoa_r+0xb64>)
 8006fda:	f7ff bada 	b.w	8006592 <_dtoa_r+0xca>
 8006fde:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006fe0:	2b01      	cmp	r3, #1
 8006fe2:	f77f ae3f 	ble.w	8006c64 <_dtoa_r+0x79c>
 8006fe6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006fe8:	9308      	str	r3, [sp, #32]
 8006fea:	e653      	b.n	8006c94 <_dtoa_r+0x7cc>
 8006fec:	9b04      	ldr	r3, [sp, #16]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	dc03      	bgt.n	8006ffa <_dtoa_r+0xb32>
 8006ff2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006ff4:	2b02      	cmp	r3, #2
 8006ff6:	f73f aed5 	bgt.w	8006da4 <_dtoa_r+0x8dc>
 8006ffa:	9d06      	ldr	r5, [sp, #24]
 8006ffc:	4631      	mov	r1, r6
 8006ffe:	4658      	mov	r0, fp
 8007000:	f7ff f9d4 	bl	80063ac <quorem>
 8007004:	9b06      	ldr	r3, [sp, #24]
 8007006:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800700a:	f805 8b01 	strb.w	r8, [r5], #1
 800700e:	9a04      	ldr	r2, [sp, #16]
 8007010:	1aeb      	subs	r3, r5, r3
 8007012:	429a      	cmp	r2, r3
 8007014:	ddb5      	ble.n	8006f82 <_dtoa_r+0xaba>
 8007016:	4659      	mov	r1, fp
 8007018:	2300      	movs	r3, #0
 800701a:	220a      	movs	r2, #10
 800701c:	4620      	mov	r0, r4
 800701e:	f000 fa5f 	bl	80074e0 <__multadd>
 8007022:	4683      	mov	fp, r0
 8007024:	e7ea      	b.n	8006ffc <_dtoa_r+0xb34>
 8007026:	bf00      	nop
 8007028:	0800817c 	.word	0x0800817c
 800702c:	080081a0 	.word	0x080081a0

08007030 <__sflush_r>:
 8007030:	898a      	ldrh	r2, [r1, #12]
 8007032:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007036:	4605      	mov	r5, r0
 8007038:	0710      	lsls	r0, r2, #28
 800703a:	460c      	mov	r4, r1
 800703c:	d458      	bmi.n	80070f0 <__sflush_r+0xc0>
 800703e:	684b      	ldr	r3, [r1, #4]
 8007040:	2b00      	cmp	r3, #0
 8007042:	dc05      	bgt.n	8007050 <__sflush_r+0x20>
 8007044:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007046:	2b00      	cmp	r3, #0
 8007048:	dc02      	bgt.n	8007050 <__sflush_r+0x20>
 800704a:	2000      	movs	r0, #0
 800704c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007050:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007052:	2e00      	cmp	r6, #0
 8007054:	d0f9      	beq.n	800704a <__sflush_r+0x1a>
 8007056:	2300      	movs	r3, #0
 8007058:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800705c:	682f      	ldr	r7, [r5, #0]
 800705e:	6a21      	ldr	r1, [r4, #32]
 8007060:	602b      	str	r3, [r5, #0]
 8007062:	d032      	beq.n	80070ca <__sflush_r+0x9a>
 8007064:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007066:	89a3      	ldrh	r3, [r4, #12]
 8007068:	075a      	lsls	r2, r3, #29
 800706a:	d505      	bpl.n	8007078 <__sflush_r+0x48>
 800706c:	6863      	ldr	r3, [r4, #4]
 800706e:	1ac0      	subs	r0, r0, r3
 8007070:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007072:	b10b      	cbz	r3, 8007078 <__sflush_r+0x48>
 8007074:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007076:	1ac0      	subs	r0, r0, r3
 8007078:	2300      	movs	r3, #0
 800707a:	4602      	mov	r2, r0
 800707c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800707e:	6a21      	ldr	r1, [r4, #32]
 8007080:	4628      	mov	r0, r5
 8007082:	47b0      	blx	r6
 8007084:	1c43      	adds	r3, r0, #1
 8007086:	89a3      	ldrh	r3, [r4, #12]
 8007088:	d106      	bne.n	8007098 <__sflush_r+0x68>
 800708a:	6829      	ldr	r1, [r5, #0]
 800708c:	291d      	cmp	r1, #29
 800708e:	d848      	bhi.n	8007122 <__sflush_r+0xf2>
 8007090:	4a29      	ldr	r2, [pc, #164]	; (8007138 <__sflush_r+0x108>)
 8007092:	40ca      	lsrs	r2, r1
 8007094:	07d6      	lsls	r6, r2, #31
 8007096:	d544      	bpl.n	8007122 <__sflush_r+0xf2>
 8007098:	2200      	movs	r2, #0
 800709a:	6062      	str	r2, [r4, #4]
 800709c:	6922      	ldr	r2, [r4, #16]
 800709e:	04d9      	lsls	r1, r3, #19
 80070a0:	6022      	str	r2, [r4, #0]
 80070a2:	d504      	bpl.n	80070ae <__sflush_r+0x7e>
 80070a4:	1c42      	adds	r2, r0, #1
 80070a6:	d101      	bne.n	80070ac <__sflush_r+0x7c>
 80070a8:	682b      	ldr	r3, [r5, #0]
 80070aa:	b903      	cbnz	r3, 80070ae <__sflush_r+0x7e>
 80070ac:	6560      	str	r0, [r4, #84]	; 0x54
 80070ae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80070b0:	602f      	str	r7, [r5, #0]
 80070b2:	2900      	cmp	r1, #0
 80070b4:	d0c9      	beq.n	800704a <__sflush_r+0x1a>
 80070b6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80070ba:	4299      	cmp	r1, r3
 80070bc:	d002      	beq.n	80070c4 <__sflush_r+0x94>
 80070be:	4628      	mov	r0, r5
 80070c0:	f000 fcae 	bl	8007a20 <_free_r>
 80070c4:	2000      	movs	r0, #0
 80070c6:	6360      	str	r0, [r4, #52]	; 0x34
 80070c8:	e7c0      	b.n	800704c <__sflush_r+0x1c>
 80070ca:	2301      	movs	r3, #1
 80070cc:	4628      	mov	r0, r5
 80070ce:	47b0      	blx	r6
 80070d0:	1c41      	adds	r1, r0, #1
 80070d2:	d1c8      	bne.n	8007066 <__sflush_r+0x36>
 80070d4:	682b      	ldr	r3, [r5, #0]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d0c5      	beq.n	8007066 <__sflush_r+0x36>
 80070da:	2b1d      	cmp	r3, #29
 80070dc:	d001      	beq.n	80070e2 <__sflush_r+0xb2>
 80070de:	2b16      	cmp	r3, #22
 80070e0:	d101      	bne.n	80070e6 <__sflush_r+0xb6>
 80070e2:	602f      	str	r7, [r5, #0]
 80070e4:	e7b1      	b.n	800704a <__sflush_r+0x1a>
 80070e6:	89a3      	ldrh	r3, [r4, #12]
 80070e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80070ec:	81a3      	strh	r3, [r4, #12]
 80070ee:	e7ad      	b.n	800704c <__sflush_r+0x1c>
 80070f0:	690f      	ldr	r7, [r1, #16]
 80070f2:	2f00      	cmp	r7, #0
 80070f4:	d0a9      	beq.n	800704a <__sflush_r+0x1a>
 80070f6:	0793      	lsls	r3, r2, #30
 80070f8:	bf18      	it	ne
 80070fa:	2300      	movne	r3, #0
 80070fc:	680e      	ldr	r6, [r1, #0]
 80070fe:	bf08      	it	eq
 8007100:	694b      	ldreq	r3, [r1, #20]
 8007102:	eba6 0807 	sub.w	r8, r6, r7
 8007106:	600f      	str	r7, [r1, #0]
 8007108:	608b      	str	r3, [r1, #8]
 800710a:	f1b8 0f00 	cmp.w	r8, #0
 800710e:	dd9c      	ble.n	800704a <__sflush_r+0x1a>
 8007110:	4643      	mov	r3, r8
 8007112:	463a      	mov	r2, r7
 8007114:	6a21      	ldr	r1, [r4, #32]
 8007116:	4628      	mov	r0, r5
 8007118:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800711a:	47b0      	blx	r6
 800711c:	2800      	cmp	r0, #0
 800711e:	dc06      	bgt.n	800712e <__sflush_r+0xfe>
 8007120:	89a3      	ldrh	r3, [r4, #12]
 8007122:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007126:	81a3      	strh	r3, [r4, #12]
 8007128:	f04f 30ff 	mov.w	r0, #4294967295
 800712c:	e78e      	b.n	800704c <__sflush_r+0x1c>
 800712e:	4407      	add	r7, r0
 8007130:	eba8 0800 	sub.w	r8, r8, r0
 8007134:	e7e9      	b.n	800710a <__sflush_r+0xda>
 8007136:	bf00      	nop
 8007138:	20400001 	.word	0x20400001

0800713c <_fflush_r>:
 800713c:	b538      	push	{r3, r4, r5, lr}
 800713e:	690b      	ldr	r3, [r1, #16]
 8007140:	4605      	mov	r5, r0
 8007142:	460c      	mov	r4, r1
 8007144:	b1db      	cbz	r3, 800717e <_fflush_r+0x42>
 8007146:	b118      	cbz	r0, 8007150 <_fflush_r+0x14>
 8007148:	6983      	ldr	r3, [r0, #24]
 800714a:	b90b      	cbnz	r3, 8007150 <_fflush_r+0x14>
 800714c:	f000 f860 	bl	8007210 <__sinit>
 8007150:	4b0c      	ldr	r3, [pc, #48]	; (8007184 <_fflush_r+0x48>)
 8007152:	429c      	cmp	r4, r3
 8007154:	d109      	bne.n	800716a <_fflush_r+0x2e>
 8007156:	686c      	ldr	r4, [r5, #4]
 8007158:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800715c:	b17b      	cbz	r3, 800717e <_fflush_r+0x42>
 800715e:	4621      	mov	r1, r4
 8007160:	4628      	mov	r0, r5
 8007162:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007166:	f7ff bf63 	b.w	8007030 <__sflush_r>
 800716a:	4b07      	ldr	r3, [pc, #28]	; (8007188 <_fflush_r+0x4c>)
 800716c:	429c      	cmp	r4, r3
 800716e:	d101      	bne.n	8007174 <_fflush_r+0x38>
 8007170:	68ac      	ldr	r4, [r5, #8]
 8007172:	e7f1      	b.n	8007158 <_fflush_r+0x1c>
 8007174:	4b05      	ldr	r3, [pc, #20]	; (800718c <_fflush_r+0x50>)
 8007176:	429c      	cmp	r4, r3
 8007178:	bf08      	it	eq
 800717a:	68ec      	ldreq	r4, [r5, #12]
 800717c:	e7ec      	b.n	8007158 <_fflush_r+0x1c>
 800717e:	2000      	movs	r0, #0
 8007180:	bd38      	pop	{r3, r4, r5, pc}
 8007182:	bf00      	nop
 8007184:	080081d0 	.word	0x080081d0
 8007188:	080081f0 	.word	0x080081f0
 800718c:	080081b0 	.word	0x080081b0

08007190 <std>:
 8007190:	2300      	movs	r3, #0
 8007192:	b510      	push	{r4, lr}
 8007194:	4604      	mov	r4, r0
 8007196:	e9c0 3300 	strd	r3, r3, [r0]
 800719a:	6083      	str	r3, [r0, #8]
 800719c:	8181      	strh	r1, [r0, #12]
 800719e:	6643      	str	r3, [r0, #100]	; 0x64
 80071a0:	81c2      	strh	r2, [r0, #14]
 80071a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80071a6:	6183      	str	r3, [r0, #24]
 80071a8:	4619      	mov	r1, r3
 80071aa:	2208      	movs	r2, #8
 80071ac:	305c      	adds	r0, #92	; 0x5c
 80071ae:	f7fe fabb 	bl	8005728 <memset>
 80071b2:	4b05      	ldr	r3, [pc, #20]	; (80071c8 <std+0x38>)
 80071b4:	6224      	str	r4, [r4, #32]
 80071b6:	6263      	str	r3, [r4, #36]	; 0x24
 80071b8:	4b04      	ldr	r3, [pc, #16]	; (80071cc <std+0x3c>)
 80071ba:	62a3      	str	r3, [r4, #40]	; 0x28
 80071bc:	4b04      	ldr	r3, [pc, #16]	; (80071d0 <std+0x40>)
 80071be:	62e3      	str	r3, [r4, #44]	; 0x2c
 80071c0:	4b04      	ldr	r3, [pc, #16]	; (80071d4 <std+0x44>)
 80071c2:	6323      	str	r3, [r4, #48]	; 0x30
 80071c4:	bd10      	pop	{r4, pc}
 80071c6:	bf00      	nop
 80071c8:	08007e09 	.word	0x08007e09
 80071cc:	08007e2b 	.word	0x08007e2b
 80071d0:	08007e63 	.word	0x08007e63
 80071d4:	08007e87 	.word	0x08007e87

080071d8 <_cleanup_r>:
 80071d8:	4901      	ldr	r1, [pc, #4]	; (80071e0 <_cleanup_r+0x8>)
 80071da:	f000 b885 	b.w	80072e8 <_fwalk_reent>
 80071de:	bf00      	nop
 80071e0:	0800713d 	.word	0x0800713d

080071e4 <__sfmoreglue>:
 80071e4:	b570      	push	{r4, r5, r6, lr}
 80071e6:	2568      	movs	r5, #104	; 0x68
 80071e8:	1e4a      	subs	r2, r1, #1
 80071ea:	4355      	muls	r5, r2
 80071ec:	460e      	mov	r6, r1
 80071ee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80071f2:	f000 fc61 	bl	8007ab8 <_malloc_r>
 80071f6:	4604      	mov	r4, r0
 80071f8:	b140      	cbz	r0, 800720c <__sfmoreglue+0x28>
 80071fa:	2100      	movs	r1, #0
 80071fc:	e9c0 1600 	strd	r1, r6, [r0]
 8007200:	300c      	adds	r0, #12
 8007202:	60a0      	str	r0, [r4, #8]
 8007204:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007208:	f7fe fa8e 	bl	8005728 <memset>
 800720c:	4620      	mov	r0, r4
 800720e:	bd70      	pop	{r4, r5, r6, pc}

08007210 <__sinit>:
 8007210:	6983      	ldr	r3, [r0, #24]
 8007212:	b510      	push	{r4, lr}
 8007214:	4604      	mov	r4, r0
 8007216:	bb33      	cbnz	r3, 8007266 <__sinit+0x56>
 8007218:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800721c:	6503      	str	r3, [r0, #80]	; 0x50
 800721e:	4b12      	ldr	r3, [pc, #72]	; (8007268 <__sinit+0x58>)
 8007220:	4a12      	ldr	r2, [pc, #72]	; (800726c <__sinit+0x5c>)
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	6282      	str	r2, [r0, #40]	; 0x28
 8007226:	4298      	cmp	r0, r3
 8007228:	bf04      	itt	eq
 800722a:	2301      	moveq	r3, #1
 800722c:	6183      	streq	r3, [r0, #24]
 800722e:	f000 f81f 	bl	8007270 <__sfp>
 8007232:	6060      	str	r0, [r4, #4]
 8007234:	4620      	mov	r0, r4
 8007236:	f000 f81b 	bl	8007270 <__sfp>
 800723a:	60a0      	str	r0, [r4, #8]
 800723c:	4620      	mov	r0, r4
 800723e:	f000 f817 	bl	8007270 <__sfp>
 8007242:	2200      	movs	r2, #0
 8007244:	60e0      	str	r0, [r4, #12]
 8007246:	2104      	movs	r1, #4
 8007248:	6860      	ldr	r0, [r4, #4]
 800724a:	f7ff ffa1 	bl	8007190 <std>
 800724e:	2201      	movs	r2, #1
 8007250:	2109      	movs	r1, #9
 8007252:	68a0      	ldr	r0, [r4, #8]
 8007254:	f7ff ff9c 	bl	8007190 <std>
 8007258:	2202      	movs	r2, #2
 800725a:	2112      	movs	r1, #18
 800725c:	68e0      	ldr	r0, [r4, #12]
 800725e:	f7ff ff97 	bl	8007190 <std>
 8007262:	2301      	movs	r3, #1
 8007264:	61a3      	str	r3, [r4, #24]
 8007266:	bd10      	pop	{r4, pc}
 8007268:	08008168 	.word	0x08008168
 800726c:	080071d9 	.word	0x080071d9

08007270 <__sfp>:
 8007270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007272:	4b1b      	ldr	r3, [pc, #108]	; (80072e0 <__sfp+0x70>)
 8007274:	4607      	mov	r7, r0
 8007276:	681e      	ldr	r6, [r3, #0]
 8007278:	69b3      	ldr	r3, [r6, #24]
 800727a:	b913      	cbnz	r3, 8007282 <__sfp+0x12>
 800727c:	4630      	mov	r0, r6
 800727e:	f7ff ffc7 	bl	8007210 <__sinit>
 8007282:	3648      	adds	r6, #72	; 0x48
 8007284:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007288:	3b01      	subs	r3, #1
 800728a:	d503      	bpl.n	8007294 <__sfp+0x24>
 800728c:	6833      	ldr	r3, [r6, #0]
 800728e:	b133      	cbz	r3, 800729e <__sfp+0x2e>
 8007290:	6836      	ldr	r6, [r6, #0]
 8007292:	e7f7      	b.n	8007284 <__sfp+0x14>
 8007294:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007298:	b16d      	cbz	r5, 80072b6 <__sfp+0x46>
 800729a:	3468      	adds	r4, #104	; 0x68
 800729c:	e7f4      	b.n	8007288 <__sfp+0x18>
 800729e:	2104      	movs	r1, #4
 80072a0:	4638      	mov	r0, r7
 80072a2:	f7ff ff9f 	bl	80071e4 <__sfmoreglue>
 80072a6:	6030      	str	r0, [r6, #0]
 80072a8:	2800      	cmp	r0, #0
 80072aa:	d1f1      	bne.n	8007290 <__sfp+0x20>
 80072ac:	230c      	movs	r3, #12
 80072ae:	4604      	mov	r4, r0
 80072b0:	603b      	str	r3, [r7, #0]
 80072b2:	4620      	mov	r0, r4
 80072b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80072b6:	4b0b      	ldr	r3, [pc, #44]	; (80072e4 <__sfp+0x74>)
 80072b8:	6665      	str	r5, [r4, #100]	; 0x64
 80072ba:	e9c4 5500 	strd	r5, r5, [r4]
 80072be:	60a5      	str	r5, [r4, #8]
 80072c0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80072c4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80072c8:	2208      	movs	r2, #8
 80072ca:	4629      	mov	r1, r5
 80072cc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80072d0:	f7fe fa2a 	bl	8005728 <memset>
 80072d4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80072d8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80072dc:	e7e9      	b.n	80072b2 <__sfp+0x42>
 80072de:	bf00      	nop
 80072e0:	08008168 	.word	0x08008168
 80072e4:	ffff0001 	.word	0xffff0001

080072e8 <_fwalk_reent>:
 80072e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80072ec:	4680      	mov	r8, r0
 80072ee:	4689      	mov	r9, r1
 80072f0:	2600      	movs	r6, #0
 80072f2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80072f6:	b914      	cbnz	r4, 80072fe <_fwalk_reent+0x16>
 80072f8:	4630      	mov	r0, r6
 80072fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80072fe:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8007302:	3f01      	subs	r7, #1
 8007304:	d501      	bpl.n	800730a <_fwalk_reent+0x22>
 8007306:	6824      	ldr	r4, [r4, #0]
 8007308:	e7f5      	b.n	80072f6 <_fwalk_reent+0xe>
 800730a:	89ab      	ldrh	r3, [r5, #12]
 800730c:	2b01      	cmp	r3, #1
 800730e:	d907      	bls.n	8007320 <_fwalk_reent+0x38>
 8007310:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007314:	3301      	adds	r3, #1
 8007316:	d003      	beq.n	8007320 <_fwalk_reent+0x38>
 8007318:	4629      	mov	r1, r5
 800731a:	4640      	mov	r0, r8
 800731c:	47c8      	blx	r9
 800731e:	4306      	orrs	r6, r0
 8007320:	3568      	adds	r5, #104	; 0x68
 8007322:	e7ee      	b.n	8007302 <_fwalk_reent+0x1a>

08007324 <_localeconv_r>:
 8007324:	4b04      	ldr	r3, [pc, #16]	; (8007338 <_localeconv_r+0x14>)
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	6a18      	ldr	r0, [r3, #32]
 800732a:	4b04      	ldr	r3, [pc, #16]	; (800733c <_localeconv_r+0x18>)
 800732c:	2800      	cmp	r0, #0
 800732e:	bf08      	it	eq
 8007330:	4618      	moveq	r0, r3
 8007332:	30f0      	adds	r0, #240	; 0xf0
 8007334:	4770      	bx	lr
 8007336:	bf00      	nop
 8007338:	20000010 	.word	0x20000010
 800733c:	20000074 	.word	0x20000074

08007340 <__swhatbuf_r>:
 8007340:	b570      	push	{r4, r5, r6, lr}
 8007342:	460e      	mov	r6, r1
 8007344:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007348:	b096      	sub	sp, #88	; 0x58
 800734a:	2900      	cmp	r1, #0
 800734c:	4614      	mov	r4, r2
 800734e:	461d      	mov	r5, r3
 8007350:	da07      	bge.n	8007362 <__swhatbuf_r+0x22>
 8007352:	2300      	movs	r3, #0
 8007354:	602b      	str	r3, [r5, #0]
 8007356:	89b3      	ldrh	r3, [r6, #12]
 8007358:	061a      	lsls	r2, r3, #24
 800735a:	d410      	bmi.n	800737e <__swhatbuf_r+0x3e>
 800735c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007360:	e00e      	b.n	8007380 <__swhatbuf_r+0x40>
 8007362:	466a      	mov	r2, sp
 8007364:	f000 fdb6 	bl	8007ed4 <_fstat_r>
 8007368:	2800      	cmp	r0, #0
 800736a:	dbf2      	blt.n	8007352 <__swhatbuf_r+0x12>
 800736c:	9a01      	ldr	r2, [sp, #4]
 800736e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007372:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007376:	425a      	negs	r2, r3
 8007378:	415a      	adcs	r2, r3
 800737a:	602a      	str	r2, [r5, #0]
 800737c:	e7ee      	b.n	800735c <__swhatbuf_r+0x1c>
 800737e:	2340      	movs	r3, #64	; 0x40
 8007380:	2000      	movs	r0, #0
 8007382:	6023      	str	r3, [r4, #0]
 8007384:	b016      	add	sp, #88	; 0x58
 8007386:	bd70      	pop	{r4, r5, r6, pc}

08007388 <__smakebuf_r>:
 8007388:	898b      	ldrh	r3, [r1, #12]
 800738a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800738c:	079d      	lsls	r5, r3, #30
 800738e:	4606      	mov	r6, r0
 8007390:	460c      	mov	r4, r1
 8007392:	d507      	bpl.n	80073a4 <__smakebuf_r+0x1c>
 8007394:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007398:	6023      	str	r3, [r4, #0]
 800739a:	6123      	str	r3, [r4, #16]
 800739c:	2301      	movs	r3, #1
 800739e:	6163      	str	r3, [r4, #20]
 80073a0:	b002      	add	sp, #8
 80073a2:	bd70      	pop	{r4, r5, r6, pc}
 80073a4:	ab01      	add	r3, sp, #4
 80073a6:	466a      	mov	r2, sp
 80073a8:	f7ff ffca 	bl	8007340 <__swhatbuf_r>
 80073ac:	9900      	ldr	r1, [sp, #0]
 80073ae:	4605      	mov	r5, r0
 80073b0:	4630      	mov	r0, r6
 80073b2:	f000 fb81 	bl	8007ab8 <_malloc_r>
 80073b6:	b948      	cbnz	r0, 80073cc <__smakebuf_r+0x44>
 80073b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80073bc:	059a      	lsls	r2, r3, #22
 80073be:	d4ef      	bmi.n	80073a0 <__smakebuf_r+0x18>
 80073c0:	f023 0303 	bic.w	r3, r3, #3
 80073c4:	f043 0302 	orr.w	r3, r3, #2
 80073c8:	81a3      	strh	r3, [r4, #12]
 80073ca:	e7e3      	b.n	8007394 <__smakebuf_r+0xc>
 80073cc:	4b0d      	ldr	r3, [pc, #52]	; (8007404 <__smakebuf_r+0x7c>)
 80073ce:	62b3      	str	r3, [r6, #40]	; 0x28
 80073d0:	89a3      	ldrh	r3, [r4, #12]
 80073d2:	6020      	str	r0, [r4, #0]
 80073d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073d8:	81a3      	strh	r3, [r4, #12]
 80073da:	9b00      	ldr	r3, [sp, #0]
 80073dc:	6120      	str	r0, [r4, #16]
 80073de:	6163      	str	r3, [r4, #20]
 80073e0:	9b01      	ldr	r3, [sp, #4]
 80073e2:	b15b      	cbz	r3, 80073fc <__smakebuf_r+0x74>
 80073e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80073e8:	4630      	mov	r0, r6
 80073ea:	f000 fd85 	bl	8007ef8 <_isatty_r>
 80073ee:	b128      	cbz	r0, 80073fc <__smakebuf_r+0x74>
 80073f0:	89a3      	ldrh	r3, [r4, #12]
 80073f2:	f023 0303 	bic.w	r3, r3, #3
 80073f6:	f043 0301 	orr.w	r3, r3, #1
 80073fa:	81a3      	strh	r3, [r4, #12]
 80073fc:	89a3      	ldrh	r3, [r4, #12]
 80073fe:	431d      	orrs	r5, r3
 8007400:	81a5      	strh	r5, [r4, #12]
 8007402:	e7cd      	b.n	80073a0 <__smakebuf_r+0x18>
 8007404:	080071d9 	.word	0x080071d9

08007408 <malloc>:
 8007408:	4b02      	ldr	r3, [pc, #8]	; (8007414 <malloc+0xc>)
 800740a:	4601      	mov	r1, r0
 800740c:	6818      	ldr	r0, [r3, #0]
 800740e:	f000 bb53 	b.w	8007ab8 <_malloc_r>
 8007412:	bf00      	nop
 8007414:	20000010 	.word	0x20000010

08007418 <memchr>:
 8007418:	b510      	push	{r4, lr}
 800741a:	b2c9      	uxtb	r1, r1
 800741c:	4402      	add	r2, r0
 800741e:	4290      	cmp	r0, r2
 8007420:	4603      	mov	r3, r0
 8007422:	d101      	bne.n	8007428 <memchr+0x10>
 8007424:	2300      	movs	r3, #0
 8007426:	e003      	b.n	8007430 <memchr+0x18>
 8007428:	781c      	ldrb	r4, [r3, #0]
 800742a:	3001      	adds	r0, #1
 800742c:	428c      	cmp	r4, r1
 800742e:	d1f6      	bne.n	800741e <memchr+0x6>
 8007430:	4618      	mov	r0, r3
 8007432:	bd10      	pop	{r4, pc}

08007434 <memcpy>:
 8007434:	b510      	push	{r4, lr}
 8007436:	1e43      	subs	r3, r0, #1
 8007438:	440a      	add	r2, r1
 800743a:	4291      	cmp	r1, r2
 800743c:	d100      	bne.n	8007440 <memcpy+0xc>
 800743e:	bd10      	pop	{r4, pc}
 8007440:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007444:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007448:	e7f7      	b.n	800743a <memcpy+0x6>

0800744a <_Balloc>:
 800744a:	b570      	push	{r4, r5, r6, lr}
 800744c:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800744e:	4604      	mov	r4, r0
 8007450:	460e      	mov	r6, r1
 8007452:	b93d      	cbnz	r5, 8007464 <_Balloc+0x1a>
 8007454:	2010      	movs	r0, #16
 8007456:	f7ff ffd7 	bl	8007408 <malloc>
 800745a:	6260      	str	r0, [r4, #36]	; 0x24
 800745c:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007460:	6005      	str	r5, [r0, #0]
 8007462:	60c5      	str	r5, [r0, #12]
 8007464:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8007466:	68eb      	ldr	r3, [r5, #12]
 8007468:	b183      	cbz	r3, 800748c <_Balloc+0x42>
 800746a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800746c:	68db      	ldr	r3, [r3, #12]
 800746e:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8007472:	b9b8      	cbnz	r0, 80074a4 <_Balloc+0x5a>
 8007474:	2101      	movs	r1, #1
 8007476:	fa01 f506 	lsl.w	r5, r1, r6
 800747a:	1d6a      	adds	r2, r5, #5
 800747c:	0092      	lsls	r2, r2, #2
 800747e:	4620      	mov	r0, r4
 8007480:	f000 fabf 	bl	8007a02 <_calloc_r>
 8007484:	b160      	cbz	r0, 80074a0 <_Balloc+0x56>
 8007486:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800748a:	e00e      	b.n	80074aa <_Balloc+0x60>
 800748c:	2221      	movs	r2, #33	; 0x21
 800748e:	2104      	movs	r1, #4
 8007490:	4620      	mov	r0, r4
 8007492:	f000 fab6 	bl	8007a02 <_calloc_r>
 8007496:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007498:	60e8      	str	r0, [r5, #12]
 800749a:	68db      	ldr	r3, [r3, #12]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d1e4      	bne.n	800746a <_Balloc+0x20>
 80074a0:	2000      	movs	r0, #0
 80074a2:	bd70      	pop	{r4, r5, r6, pc}
 80074a4:	6802      	ldr	r2, [r0, #0]
 80074a6:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80074aa:	2300      	movs	r3, #0
 80074ac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80074b0:	e7f7      	b.n	80074a2 <_Balloc+0x58>

080074b2 <_Bfree>:
 80074b2:	b570      	push	{r4, r5, r6, lr}
 80074b4:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80074b6:	4606      	mov	r6, r0
 80074b8:	460d      	mov	r5, r1
 80074ba:	b93c      	cbnz	r4, 80074cc <_Bfree+0x1a>
 80074bc:	2010      	movs	r0, #16
 80074be:	f7ff ffa3 	bl	8007408 <malloc>
 80074c2:	6270      	str	r0, [r6, #36]	; 0x24
 80074c4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80074c8:	6004      	str	r4, [r0, #0]
 80074ca:	60c4      	str	r4, [r0, #12]
 80074cc:	b13d      	cbz	r5, 80074de <_Bfree+0x2c>
 80074ce:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80074d0:	686a      	ldr	r2, [r5, #4]
 80074d2:	68db      	ldr	r3, [r3, #12]
 80074d4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80074d8:	6029      	str	r1, [r5, #0]
 80074da:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80074de:	bd70      	pop	{r4, r5, r6, pc}

080074e0 <__multadd>:
 80074e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074e4:	461f      	mov	r7, r3
 80074e6:	4606      	mov	r6, r0
 80074e8:	460c      	mov	r4, r1
 80074ea:	2300      	movs	r3, #0
 80074ec:	690d      	ldr	r5, [r1, #16]
 80074ee:	f101 0c14 	add.w	ip, r1, #20
 80074f2:	f8dc 0000 	ldr.w	r0, [ip]
 80074f6:	3301      	adds	r3, #1
 80074f8:	b281      	uxth	r1, r0
 80074fa:	fb02 7101 	mla	r1, r2, r1, r7
 80074fe:	0c00      	lsrs	r0, r0, #16
 8007500:	0c0f      	lsrs	r7, r1, #16
 8007502:	fb02 7000 	mla	r0, r2, r0, r7
 8007506:	b289      	uxth	r1, r1
 8007508:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800750c:	429d      	cmp	r5, r3
 800750e:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8007512:	f84c 1b04 	str.w	r1, [ip], #4
 8007516:	dcec      	bgt.n	80074f2 <__multadd+0x12>
 8007518:	b1d7      	cbz	r7, 8007550 <__multadd+0x70>
 800751a:	68a3      	ldr	r3, [r4, #8]
 800751c:	42ab      	cmp	r3, r5
 800751e:	dc12      	bgt.n	8007546 <__multadd+0x66>
 8007520:	6861      	ldr	r1, [r4, #4]
 8007522:	4630      	mov	r0, r6
 8007524:	3101      	adds	r1, #1
 8007526:	f7ff ff90 	bl	800744a <_Balloc>
 800752a:	4680      	mov	r8, r0
 800752c:	6922      	ldr	r2, [r4, #16]
 800752e:	f104 010c 	add.w	r1, r4, #12
 8007532:	3202      	adds	r2, #2
 8007534:	0092      	lsls	r2, r2, #2
 8007536:	300c      	adds	r0, #12
 8007538:	f7ff ff7c 	bl	8007434 <memcpy>
 800753c:	4621      	mov	r1, r4
 800753e:	4630      	mov	r0, r6
 8007540:	f7ff ffb7 	bl	80074b2 <_Bfree>
 8007544:	4644      	mov	r4, r8
 8007546:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800754a:	3501      	adds	r5, #1
 800754c:	615f      	str	r7, [r3, #20]
 800754e:	6125      	str	r5, [r4, #16]
 8007550:	4620      	mov	r0, r4
 8007552:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007556 <__hi0bits>:
 8007556:	0c02      	lsrs	r2, r0, #16
 8007558:	0412      	lsls	r2, r2, #16
 800755a:	4603      	mov	r3, r0
 800755c:	b9b2      	cbnz	r2, 800758c <__hi0bits+0x36>
 800755e:	0403      	lsls	r3, r0, #16
 8007560:	2010      	movs	r0, #16
 8007562:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007566:	bf04      	itt	eq
 8007568:	021b      	lsleq	r3, r3, #8
 800756a:	3008      	addeq	r0, #8
 800756c:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8007570:	bf04      	itt	eq
 8007572:	011b      	lsleq	r3, r3, #4
 8007574:	3004      	addeq	r0, #4
 8007576:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800757a:	bf04      	itt	eq
 800757c:	009b      	lsleq	r3, r3, #2
 800757e:	3002      	addeq	r0, #2
 8007580:	2b00      	cmp	r3, #0
 8007582:	db06      	blt.n	8007592 <__hi0bits+0x3c>
 8007584:	005b      	lsls	r3, r3, #1
 8007586:	d503      	bpl.n	8007590 <__hi0bits+0x3a>
 8007588:	3001      	adds	r0, #1
 800758a:	4770      	bx	lr
 800758c:	2000      	movs	r0, #0
 800758e:	e7e8      	b.n	8007562 <__hi0bits+0xc>
 8007590:	2020      	movs	r0, #32
 8007592:	4770      	bx	lr

08007594 <__lo0bits>:
 8007594:	6803      	ldr	r3, [r0, #0]
 8007596:	4601      	mov	r1, r0
 8007598:	f013 0207 	ands.w	r2, r3, #7
 800759c:	d00b      	beq.n	80075b6 <__lo0bits+0x22>
 800759e:	07da      	lsls	r2, r3, #31
 80075a0:	d423      	bmi.n	80075ea <__lo0bits+0x56>
 80075a2:	0798      	lsls	r0, r3, #30
 80075a4:	bf49      	itett	mi
 80075a6:	085b      	lsrmi	r3, r3, #1
 80075a8:	089b      	lsrpl	r3, r3, #2
 80075aa:	2001      	movmi	r0, #1
 80075ac:	600b      	strmi	r3, [r1, #0]
 80075ae:	bf5c      	itt	pl
 80075b0:	600b      	strpl	r3, [r1, #0]
 80075b2:	2002      	movpl	r0, #2
 80075b4:	4770      	bx	lr
 80075b6:	b298      	uxth	r0, r3
 80075b8:	b9a8      	cbnz	r0, 80075e6 <__lo0bits+0x52>
 80075ba:	2010      	movs	r0, #16
 80075bc:	0c1b      	lsrs	r3, r3, #16
 80075be:	f013 0fff 	tst.w	r3, #255	; 0xff
 80075c2:	bf04      	itt	eq
 80075c4:	0a1b      	lsreq	r3, r3, #8
 80075c6:	3008      	addeq	r0, #8
 80075c8:	071a      	lsls	r2, r3, #28
 80075ca:	bf04      	itt	eq
 80075cc:	091b      	lsreq	r3, r3, #4
 80075ce:	3004      	addeq	r0, #4
 80075d0:	079a      	lsls	r2, r3, #30
 80075d2:	bf04      	itt	eq
 80075d4:	089b      	lsreq	r3, r3, #2
 80075d6:	3002      	addeq	r0, #2
 80075d8:	07da      	lsls	r2, r3, #31
 80075da:	d402      	bmi.n	80075e2 <__lo0bits+0x4e>
 80075dc:	085b      	lsrs	r3, r3, #1
 80075de:	d006      	beq.n	80075ee <__lo0bits+0x5a>
 80075e0:	3001      	adds	r0, #1
 80075e2:	600b      	str	r3, [r1, #0]
 80075e4:	4770      	bx	lr
 80075e6:	4610      	mov	r0, r2
 80075e8:	e7e9      	b.n	80075be <__lo0bits+0x2a>
 80075ea:	2000      	movs	r0, #0
 80075ec:	4770      	bx	lr
 80075ee:	2020      	movs	r0, #32
 80075f0:	4770      	bx	lr

080075f2 <__i2b>:
 80075f2:	b510      	push	{r4, lr}
 80075f4:	460c      	mov	r4, r1
 80075f6:	2101      	movs	r1, #1
 80075f8:	f7ff ff27 	bl	800744a <_Balloc>
 80075fc:	2201      	movs	r2, #1
 80075fe:	6144      	str	r4, [r0, #20]
 8007600:	6102      	str	r2, [r0, #16]
 8007602:	bd10      	pop	{r4, pc}

08007604 <__multiply>:
 8007604:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007608:	4614      	mov	r4, r2
 800760a:	690a      	ldr	r2, [r1, #16]
 800760c:	6923      	ldr	r3, [r4, #16]
 800760e:	4688      	mov	r8, r1
 8007610:	429a      	cmp	r2, r3
 8007612:	bfbe      	ittt	lt
 8007614:	460b      	movlt	r3, r1
 8007616:	46a0      	movlt	r8, r4
 8007618:	461c      	movlt	r4, r3
 800761a:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800761e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007622:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007626:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800762a:	eb07 0609 	add.w	r6, r7, r9
 800762e:	42b3      	cmp	r3, r6
 8007630:	bfb8      	it	lt
 8007632:	3101      	addlt	r1, #1
 8007634:	f7ff ff09 	bl	800744a <_Balloc>
 8007638:	f100 0514 	add.w	r5, r0, #20
 800763c:	462b      	mov	r3, r5
 800763e:	2200      	movs	r2, #0
 8007640:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8007644:	4573      	cmp	r3, lr
 8007646:	d316      	bcc.n	8007676 <__multiply+0x72>
 8007648:	f104 0214 	add.w	r2, r4, #20
 800764c:	f108 0114 	add.w	r1, r8, #20
 8007650:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8007654:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8007658:	9300      	str	r3, [sp, #0]
 800765a:	9b00      	ldr	r3, [sp, #0]
 800765c:	9201      	str	r2, [sp, #4]
 800765e:	4293      	cmp	r3, r2
 8007660:	d80c      	bhi.n	800767c <__multiply+0x78>
 8007662:	2e00      	cmp	r6, #0
 8007664:	dd03      	ble.n	800766e <__multiply+0x6a>
 8007666:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800766a:	2b00      	cmp	r3, #0
 800766c:	d05d      	beq.n	800772a <__multiply+0x126>
 800766e:	6106      	str	r6, [r0, #16]
 8007670:	b003      	add	sp, #12
 8007672:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007676:	f843 2b04 	str.w	r2, [r3], #4
 800767a:	e7e3      	b.n	8007644 <__multiply+0x40>
 800767c:	f8b2 b000 	ldrh.w	fp, [r2]
 8007680:	f1bb 0f00 	cmp.w	fp, #0
 8007684:	d023      	beq.n	80076ce <__multiply+0xca>
 8007686:	4689      	mov	r9, r1
 8007688:	46ac      	mov	ip, r5
 800768a:	f04f 0800 	mov.w	r8, #0
 800768e:	f859 4b04 	ldr.w	r4, [r9], #4
 8007692:	f8dc a000 	ldr.w	sl, [ip]
 8007696:	b2a3      	uxth	r3, r4
 8007698:	fa1f fa8a 	uxth.w	sl, sl
 800769c:	fb0b a303 	mla	r3, fp, r3, sl
 80076a0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80076a4:	f8dc 4000 	ldr.w	r4, [ip]
 80076a8:	4443      	add	r3, r8
 80076aa:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80076ae:	fb0b 840a 	mla	r4, fp, sl, r8
 80076b2:	46e2      	mov	sl, ip
 80076b4:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80076b8:	b29b      	uxth	r3, r3
 80076ba:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80076be:	454f      	cmp	r7, r9
 80076c0:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80076c4:	f84a 3b04 	str.w	r3, [sl], #4
 80076c8:	d82b      	bhi.n	8007722 <__multiply+0x11e>
 80076ca:	f8cc 8004 	str.w	r8, [ip, #4]
 80076ce:	9b01      	ldr	r3, [sp, #4]
 80076d0:	3204      	adds	r2, #4
 80076d2:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80076d6:	f1ba 0f00 	cmp.w	sl, #0
 80076da:	d020      	beq.n	800771e <__multiply+0x11a>
 80076dc:	4689      	mov	r9, r1
 80076de:	46a8      	mov	r8, r5
 80076e0:	f04f 0b00 	mov.w	fp, #0
 80076e4:	682b      	ldr	r3, [r5, #0]
 80076e6:	f8b9 c000 	ldrh.w	ip, [r9]
 80076ea:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80076ee:	b29b      	uxth	r3, r3
 80076f0:	fb0a 440c 	mla	r4, sl, ip, r4
 80076f4:	46c4      	mov	ip, r8
 80076f6:	445c      	add	r4, fp
 80076f8:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80076fc:	f84c 3b04 	str.w	r3, [ip], #4
 8007700:	f859 3b04 	ldr.w	r3, [r9], #4
 8007704:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8007708:	0c1b      	lsrs	r3, r3, #16
 800770a:	fb0a b303 	mla	r3, sl, r3, fp
 800770e:	454f      	cmp	r7, r9
 8007710:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8007714:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8007718:	d805      	bhi.n	8007726 <__multiply+0x122>
 800771a:	f8c8 3004 	str.w	r3, [r8, #4]
 800771e:	3504      	adds	r5, #4
 8007720:	e79b      	b.n	800765a <__multiply+0x56>
 8007722:	46d4      	mov	ip, sl
 8007724:	e7b3      	b.n	800768e <__multiply+0x8a>
 8007726:	46e0      	mov	r8, ip
 8007728:	e7dd      	b.n	80076e6 <__multiply+0xe2>
 800772a:	3e01      	subs	r6, #1
 800772c:	e799      	b.n	8007662 <__multiply+0x5e>
	...

08007730 <__pow5mult>:
 8007730:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007734:	4615      	mov	r5, r2
 8007736:	f012 0203 	ands.w	r2, r2, #3
 800773a:	4606      	mov	r6, r0
 800773c:	460f      	mov	r7, r1
 800773e:	d007      	beq.n	8007750 <__pow5mult+0x20>
 8007740:	4c21      	ldr	r4, [pc, #132]	; (80077c8 <__pow5mult+0x98>)
 8007742:	3a01      	subs	r2, #1
 8007744:	2300      	movs	r3, #0
 8007746:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800774a:	f7ff fec9 	bl	80074e0 <__multadd>
 800774e:	4607      	mov	r7, r0
 8007750:	10ad      	asrs	r5, r5, #2
 8007752:	d035      	beq.n	80077c0 <__pow5mult+0x90>
 8007754:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007756:	b93c      	cbnz	r4, 8007768 <__pow5mult+0x38>
 8007758:	2010      	movs	r0, #16
 800775a:	f7ff fe55 	bl	8007408 <malloc>
 800775e:	6270      	str	r0, [r6, #36]	; 0x24
 8007760:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007764:	6004      	str	r4, [r0, #0]
 8007766:	60c4      	str	r4, [r0, #12]
 8007768:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800776c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007770:	b94c      	cbnz	r4, 8007786 <__pow5mult+0x56>
 8007772:	f240 2171 	movw	r1, #625	; 0x271
 8007776:	4630      	mov	r0, r6
 8007778:	f7ff ff3b 	bl	80075f2 <__i2b>
 800777c:	2300      	movs	r3, #0
 800777e:	4604      	mov	r4, r0
 8007780:	f8c8 0008 	str.w	r0, [r8, #8]
 8007784:	6003      	str	r3, [r0, #0]
 8007786:	f04f 0800 	mov.w	r8, #0
 800778a:	07eb      	lsls	r3, r5, #31
 800778c:	d50a      	bpl.n	80077a4 <__pow5mult+0x74>
 800778e:	4639      	mov	r1, r7
 8007790:	4622      	mov	r2, r4
 8007792:	4630      	mov	r0, r6
 8007794:	f7ff ff36 	bl	8007604 <__multiply>
 8007798:	4681      	mov	r9, r0
 800779a:	4639      	mov	r1, r7
 800779c:	4630      	mov	r0, r6
 800779e:	f7ff fe88 	bl	80074b2 <_Bfree>
 80077a2:	464f      	mov	r7, r9
 80077a4:	106d      	asrs	r5, r5, #1
 80077a6:	d00b      	beq.n	80077c0 <__pow5mult+0x90>
 80077a8:	6820      	ldr	r0, [r4, #0]
 80077aa:	b938      	cbnz	r0, 80077bc <__pow5mult+0x8c>
 80077ac:	4622      	mov	r2, r4
 80077ae:	4621      	mov	r1, r4
 80077b0:	4630      	mov	r0, r6
 80077b2:	f7ff ff27 	bl	8007604 <__multiply>
 80077b6:	6020      	str	r0, [r4, #0]
 80077b8:	f8c0 8000 	str.w	r8, [r0]
 80077bc:	4604      	mov	r4, r0
 80077be:	e7e4      	b.n	800778a <__pow5mult+0x5a>
 80077c0:	4638      	mov	r0, r7
 80077c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80077c6:	bf00      	nop
 80077c8:	08008300 	.word	0x08008300

080077cc <__lshift>:
 80077cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80077d0:	460c      	mov	r4, r1
 80077d2:	4607      	mov	r7, r0
 80077d4:	4616      	mov	r6, r2
 80077d6:	6923      	ldr	r3, [r4, #16]
 80077d8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80077dc:	eb0a 0903 	add.w	r9, sl, r3
 80077e0:	6849      	ldr	r1, [r1, #4]
 80077e2:	68a3      	ldr	r3, [r4, #8]
 80077e4:	f109 0501 	add.w	r5, r9, #1
 80077e8:	42ab      	cmp	r3, r5
 80077ea:	db32      	blt.n	8007852 <__lshift+0x86>
 80077ec:	4638      	mov	r0, r7
 80077ee:	f7ff fe2c 	bl	800744a <_Balloc>
 80077f2:	2300      	movs	r3, #0
 80077f4:	4680      	mov	r8, r0
 80077f6:	461a      	mov	r2, r3
 80077f8:	f100 0114 	add.w	r1, r0, #20
 80077fc:	4553      	cmp	r3, sl
 80077fe:	db2b      	blt.n	8007858 <__lshift+0x8c>
 8007800:	6920      	ldr	r0, [r4, #16]
 8007802:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007806:	f104 0314 	add.w	r3, r4, #20
 800780a:	f016 021f 	ands.w	r2, r6, #31
 800780e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007812:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007816:	d025      	beq.n	8007864 <__lshift+0x98>
 8007818:	2000      	movs	r0, #0
 800781a:	f1c2 0e20 	rsb	lr, r2, #32
 800781e:	468a      	mov	sl, r1
 8007820:	681e      	ldr	r6, [r3, #0]
 8007822:	4096      	lsls	r6, r2
 8007824:	4330      	orrs	r0, r6
 8007826:	f84a 0b04 	str.w	r0, [sl], #4
 800782a:	f853 0b04 	ldr.w	r0, [r3], #4
 800782e:	459c      	cmp	ip, r3
 8007830:	fa20 f00e 	lsr.w	r0, r0, lr
 8007834:	d814      	bhi.n	8007860 <__lshift+0x94>
 8007836:	6048      	str	r0, [r1, #4]
 8007838:	b108      	cbz	r0, 800783e <__lshift+0x72>
 800783a:	f109 0502 	add.w	r5, r9, #2
 800783e:	3d01      	subs	r5, #1
 8007840:	4638      	mov	r0, r7
 8007842:	f8c8 5010 	str.w	r5, [r8, #16]
 8007846:	4621      	mov	r1, r4
 8007848:	f7ff fe33 	bl	80074b2 <_Bfree>
 800784c:	4640      	mov	r0, r8
 800784e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007852:	3101      	adds	r1, #1
 8007854:	005b      	lsls	r3, r3, #1
 8007856:	e7c7      	b.n	80077e8 <__lshift+0x1c>
 8007858:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800785c:	3301      	adds	r3, #1
 800785e:	e7cd      	b.n	80077fc <__lshift+0x30>
 8007860:	4651      	mov	r1, sl
 8007862:	e7dc      	b.n	800781e <__lshift+0x52>
 8007864:	3904      	subs	r1, #4
 8007866:	f853 2b04 	ldr.w	r2, [r3], #4
 800786a:	459c      	cmp	ip, r3
 800786c:	f841 2f04 	str.w	r2, [r1, #4]!
 8007870:	d8f9      	bhi.n	8007866 <__lshift+0x9a>
 8007872:	e7e4      	b.n	800783e <__lshift+0x72>

08007874 <__mcmp>:
 8007874:	6903      	ldr	r3, [r0, #16]
 8007876:	690a      	ldr	r2, [r1, #16]
 8007878:	b530      	push	{r4, r5, lr}
 800787a:	1a9b      	subs	r3, r3, r2
 800787c:	d10c      	bne.n	8007898 <__mcmp+0x24>
 800787e:	0092      	lsls	r2, r2, #2
 8007880:	3014      	adds	r0, #20
 8007882:	3114      	adds	r1, #20
 8007884:	1884      	adds	r4, r0, r2
 8007886:	4411      	add	r1, r2
 8007888:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800788c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007890:	4295      	cmp	r5, r2
 8007892:	d003      	beq.n	800789c <__mcmp+0x28>
 8007894:	d305      	bcc.n	80078a2 <__mcmp+0x2e>
 8007896:	2301      	movs	r3, #1
 8007898:	4618      	mov	r0, r3
 800789a:	bd30      	pop	{r4, r5, pc}
 800789c:	42a0      	cmp	r0, r4
 800789e:	d3f3      	bcc.n	8007888 <__mcmp+0x14>
 80078a0:	e7fa      	b.n	8007898 <__mcmp+0x24>
 80078a2:	f04f 33ff 	mov.w	r3, #4294967295
 80078a6:	e7f7      	b.n	8007898 <__mcmp+0x24>

080078a8 <__mdiff>:
 80078a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80078ac:	460d      	mov	r5, r1
 80078ae:	4607      	mov	r7, r0
 80078b0:	4611      	mov	r1, r2
 80078b2:	4628      	mov	r0, r5
 80078b4:	4614      	mov	r4, r2
 80078b6:	f7ff ffdd 	bl	8007874 <__mcmp>
 80078ba:	1e06      	subs	r6, r0, #0
 80078bc:	d108      	bne.n	80078d0 <__mdiff+0x28>
 80078be:	4631      	mov	r1, r6
 80078c0:	4638      	mov	r0, r7
 80078c2:	f7ff fdc2 	bl	800744a <_Balloc>
 80078c6:	2301      	movs	r3, #1
 80078c8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80078cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078d0:	bfa4      	itt	ge
 80078d2:	4623      	movge	r3, r4
 80078d4:	462c      	movge	r4, r5
 80078d6:	4638      	mov	r0, r7
 80078d8:	6861      	ldr	r1, [r4, #4]
 80078da:	bfa6      	itte	ge
 80078dc:	461d      	movge	r5, r3
 80078de:	2600      	movge	r6, #0
 80078e0:	2601      	movlt	r6, #1
 80078e2:	f7ff fdb2 	bl	800744a <_Balloc>
 80078e6:	f04f 0e00 	mov.w	lr, #0
 80078ea:	60c6      	str	r6, [r0, #12]
 80078ec:	692b      	ldr	r3, [r5, #16]
 80078ee:	6926      	ldr	r6, [r4, #16]
 80078f0:	f104 0214 	add.w	r2, r4, #20
 80078f4:	f105 0914 	add.w	r9, r5, #20
 80078f8:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80078fc:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8007900:	f100 0114 	add.w	r1, r0, #20
 8007904:	f852 ab04 	ldr.w	sl, [r2], #4
 8007908:	f859 5b04 	ldr.w	r5, [r9], #4
 800790c:	fa1f f38a 	uxth.w	r3, sl
 8007910:	4473      	add	r3, lr
 8007912:	b2ac      	uxth	r4, r5
 8007914:	1b1b      	subs	r3, r3, r4
 8007916:	0c2c      	lsrs	r4, r5, #16
 8007918:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 800791c:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8007920:	b29b      	uxth	r3, r3
 8007922:	ea4f 4e24 	mov.w	lr, r4, asr #16
 8007926:	45c8      	cmp	r8, r9
 8007928:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800792c:	4694      	mov	ip, r2
 800792e:	f841 4b04 	str.w	r4, [r1], #4
 8007932:	d8e7      	bhi.n	8007904 <__mdiff+0x5c>
 8007934:	45bc      	cmp	ip, r7
 8007936:	d304      	bcc.n	8007942 <__mdiff+0x9a>
 8007938:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800793c:	b183      	cbz	r3, 8007960 <__mdiff+0xb8>
 800793e:	6106      	str	r6, [r0, #16]
 8007940:	e7c4      	b.n	80078cc <__mdiff+0x24>
 8007942:	f85c 4b04 	ldr.w	r4, [ip], #4
 8007946:	b2a2      	uxth	r2, r4
 8007948:	4472      	add	r2, lr
 800794a:	1413      	asrs	r3, r2, #16
 800794c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8007950:	b292      	uxth	r2, r2
 8007952:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007956:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800795a:	f841 2b04 	str.w	r2, [r1], #4
 800795e:	e7e9      	b.n	8007934 <__mdiff+0x8c>
 8007960:	3e01      	subs	r6, #1
 8007962:	e7e9      	b.n	8007938 <__mdiff+0x90>

08007964 <__d2b>:
 8007964:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8007968:	461c      	mov	r4, r3
 800796a:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 800796e:	2101      	movs	r1, #1
 8007970:	4690      	mov	r8, r2
 8007972:	f7ff fd6a 	bl	800744a <_Balloc>
 8007976:	f3c4 0213 	ubfx	r2, r4, #0, #20
 800797a:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800797e:	4607      	mov	r7, r0
 8007980:	bb34      	cbnz	r4, 80079d0 <__d2b+0x6c>
 8007982:	9201      	str	r2, [sp, #4]
 8007984:	f1b8 0200 	subs.w	r2, r8, #0
 8007988:	d027      	beq.n	80079da <__d2b+0x76>
 800798a:	a802      	add	r0, sp, #8
 800798c:	f840 2d08 	str.w	r2, [r0, #-8]!
 8007990:	f7ff fe00 	bl	8007594 <__lo0bits>
 8007994:	9900      	ldr	r1, [sp, #0]
 8007996:	b1f0      	cbz	r0, 80079d6 <__d2b+0x72>
 8007998:	9a01      	ldr	r2, [sp, #4]
 800799a:	f1c0 0320 	rsb	r3, r0, #32
 800799e:	fa02 f303 	lsl.w	r3, r2, r3
 80079a2:	430b      	orrs	r3, r1
 80079a4:	40c2      	lsrs	r2, r0
 80079a6:	617b      	str	r3, [r7, #20]
 80079a8:	9201      	str	r2, [sp, #4]
 80079aa:	9b01      	ldr	r3, [sp, #4]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	bf14      	ite	ne
 80079b0:	2102      	movne	r1, #2
 80079b2:	2101      	moveq	r1, #1
 80079b4:	61bb      	str	r3, [r7, #24]
 80079b6:	6139      	str	r1, [r7, #16]
 80079b8:	b1c4      	cbz	r4, 80079ec <__d2b+0x88>
 80079ba:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80079be:	4404      	add	r4, r0
 80079c0:	6034      	str	r4, [r6, #0]
 80079c2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80079c6:	6028      	str	r0, [r5, #0]
 80079c8:	4638      	mov	r0, r7
 80079ca:	b002      	add	sp, #8
 80079cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80079d0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80079d4:	e7d5      	b.n	8007982 <__d2b+0x1e>
 80079d6:	6179      	str	r1, [r7, #20]
 80079d8:	e7e7      	b.n	80079aa <__d2b+0x46>
 80079da:	a801      	add	r0, sp, #4
 80079dc:	f7ff fdda 	bl	8007594 <__lo0bits>
 80079e0:	2101      	movs	r1, #1
 80079e2:	9b01      	ldr	r3, [sp, #4]
 80079e4:	6139      	str	r1, [r7, #16]
 80079e6:	617b      	str	r3, [r7, #20]
 80079e8:	3020      	adds	r0, #32
 80079ea:	e7e5      	b.n	80079b8 <__d2b+0x54>
 80079ec:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80079f0:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80079f4:	6030      	str	r0, [r6, #0]
 80079f6:	6918      	ldr	r0, [r3, #16]
 80079f8:	f7ff fdad 	bl	8007556 <__hi0bits>
 80079fc:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8007a00:	e7e1      	b.n	80079c6 <__d2b+0x62>

08007a02 <_calloc_r>:
 8007a02:	b538      	push	{r3, r4, r5, lr}
 8007a04:	fb02 f401 	mul.w	r4, r2, r1
 8007a08:	4621      	mov	r1, r4
 8007a0a:	f000 f855 	bl	8007ab8 <_malloc_r>
 8007a0e:	4605      	mov	r5, r0
 8007a10:	b118      	cbz	r0, 8007a1a <_calloc_r+0x18>
 8007a12:	4622      	mov	r2, r4
 8007a14:	2100      	movs	r1, #0
 8007a16:	f7fd fe87 	bl	8005728 <memset>
 8007a1a:	4628      	mov	r0, r5
 8007a1c:	bd38      	pop	{r3, r4, r5, pc}
	...

08007a20 <_free_r>:
 8007a20:	b538      	push	{r3, r4, r5, lr}
 8007a22:	4605      	mov	r5, r0
 8007a24:	2900      	cmp	r1, #0
 8007a26:	d043      	beq.n	8007ab0 <_free_r+0x90>
 8007a28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007a2c:	1f0c      	subs	r4, r1, #4
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	bfb8      	it	lt
 8007a32:	18e4      	addlt	r4, r4, r3
 8007a34:	f000 fa94 	bl	8007f60 <__malloc_lock>
 8007a38:	4a1e      	ldr	r2, [pc, #120]	; (8007ab4 <_free_r+0x94>)
 8007a3a:	6813      	ldr	r3, [r2, #0]
 8007a3c:	4610      	mov	r0, r2
 8007a3e:	b933      	cbnz	r3, 8007a4e <_free_r+0x2e>
 8007a40:	6063      	str	r3, [r4, #4]
 8007a42:	6014      	str	r4, [r2, #0]
 8007a44:	4628      	mov	r0, r5
 8007a46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007a4a:	f000 ba8a 	b.w	8007f62 <__malloc_unlock>
 8007a4e:	42a3      	cmp	r3, r4
 8007a50:	d90b      	bls.n	8007a6a <_free_r+0x4a>
 8007a52:	6821      	ldr	r1, [r4, #0]
 8007a54:	1862      	adds	r2, r4, r1
 8007a56:	4293      	cmp	r3, r2
 8007a58:	bf01      	itttt	eq
 8007a5a:	681a      	ldreq	r2, [r3, #0]
 8007a5c:	685b      	ldreq	r3, [r3, #4]
 8007a5e:	1852      	addeq	r2, r2, r1
 8007a60:	6022      	streq	r2, [r4, #0]
 8007a62:	6063      	str	r3, [r4, #4]
 8007a64:	6004      	str	r4, [r0, #0]
 8007a66:	e7ed      	b.n	8007a44 <_free_r+0x24>
 8007a68:	4613      	mov	r3, r2
 8007a6a:	685a      	ldr	r2, [r3, #4]
 8007a6c:	b10a      	cbz	r2, 8007a72 <_free_r+0x52>
 8007a6e:	42a2      	cmp	r2, r4
 8007a70:	d9fa      	bls.n	8007a68 <_free_r+0x48>
 8007a72:	6819      	ldr	r1, [r3, #0]
 8007a74:	1858      	adds	r0, r3, r1
 8007a76:	42a0      	cmp	r0, r4
 8007a78:	d10b      	bne.n	8007a92 <_free_r+0x72>
 8007a7a:	6820      	ldr	r0, [r4, #0]
 8007a7c:	4401      	add	r1, r0
 8007a7e:	1858      	adds	r0, r3, r1
 8007a80:	4282      	cmp	r2, r0
 8007a82:	6019      	str	r1, [r3, #0]
 8007a84:	d1de      	bne.n	8007a44 <_free_r+0x24>
 8007a86:	6810      	ldr	r0, [r2, #0]
 8007a88:	6852      	ldr	r2, [r2, #4]
 8007a8a:	4401      	add	r1, r0
 8007a8c:	6019      	str	r1, [r3, #0]
 8007a8e:	605a      	str	r2, [r3, #4]
 8007a90:	e7d8      	b.n	8007a44 <_free_r+0x24>
 8007a92:	d902      	bls.n	8007a9a <_free_r+0x7a>
 8007a94:	230c      	movs	r3, #12
 8007a96:	602b      	str	r3, [r5, #0]
 8007a98:	e7d4      	b.n	8007a44 <_free_r+0x24>
 8007a9a:	6820      	ldr	r0, [r4, #0]
 8007a9c:	1821      	adds	r1, r4, r0
 8007a9e:	428a      	cmp	r2, r1
 8007aa0:	bf01      	itttt	eq
 8007aa2:	6811      	ldreq	r1, [r2, #0]
 8007aa4:	6852      	ldreq	r2, [r2, #4]
 8007aa6:	1809      	addeq	r1, r1, r0
 8007aa8:	6021      	streq	r1, [r4, #0]
 8007aaa:	6062      	str	r2, [r4, #4]
 8007aac:	605c      	str	r4, [r3, #4]
 8007aae:	e7c9      	b.n	8007a44 <_free_r+0x24>
 8007ab0:	bd38      	pop	{r3, r4, r5, pc}
 8007ab2:	bf00      	nop
 8007ab4:	20000214 	.word	0x20000214

08007ab8 <_malloc_r>:
 8007ab8:	b570      	push	{r4, r5, r6, lr}
 8007aba:	1ccd      	adds	r5, r1, #3
 8007abc:	f025 0503 	bic.w	r5, r5, #3
 8007ac0:	3508      	adds	r5, #8
 8007ac2:	2d0c      	cmp	r5, #12
 8007ac4:	bf38      	it	cc
 8007ac6:	250c      	movcc	r5, #12
 8007ac8:	2d00      	cmp	r5, #0
 8007aca:	4606      	mov	r6, r0
 8007acc:	db01      	blt.n	8007ad2 <_malloc_r+0x1a>
 8007ace:	42a9      	cmp	r1, r5
 8007ad0:	d903      	bls.n	8007ada <_malloc_r+0x22>
 8007ad2:	230c      	movs	r3, #12
 8007ad4:	6033      	str	r3, [r6, #0]
 8007ad6:	2000      	movs	r0, #0
 8007ad8:	bd70      	pop	{r4, r5, r6, pc}
 8007ada:	f000 fa41 	bl	8007f60 <__malloc_lock>
 8007ade:	4a21      	ldr	r2, [pc, #132]	; (8007b64 <_malloc_r+0xac>)
 8007ae0:	6814      	ldr	r4, [r2, #0]
 8007ae2:	4621      	mov	r1, r4
 8007ae4:	b991      	cbnz	r1, 8007b0c <_malloc_r+0x54>
 8007ae6:	4c20      	ldr	r4, [pc, #128]	; (8007b68 <_malloc_r+0xb0>)
 8007ae8:	6823      	ldr	r3, [r4, #0]
 8007aea:	b91b      	cbnz	r3, 8007af4 <_malloc_r+0x3c>
 8007aec:	4630      	mov	r0, r6
 8007aee:	f000 f97b 	bl	8007de8 <_sbrk_r>
 8007af2:	6020      	str	r0, [r4, #0]
 8007af4:	4629      	mov	r1, r5
 8007af6:	4630      	mov	r0, r6
 8007af8:	f000 f976 	bl	8007de8 <_sbrk_r>
 8007afc:	1c43      	adds	r3, r0, #1
 8007afe:	d124      	bne.n	8007b4a <_malloc_r+0x92>
 8007b00:	230c      	movs	r3, #12
 8007b02:	4630      	mov	r0, r6
 8007b04:	6033      	str	r3, [r6, #0]
 8007b06:	f000 fa2c 	bl	8007f62 <__malloc_unlock>
 8007b0a:	e7e4      	b.n	8007ad6 <_malloc_r+0x1e>
 8007b0c:	680b      	ldr	r3, [r1, #0]
 8007b0e:	1b5b      	subs	r3, r3, r5
 8007b10:	d418      	bmi.n	8007b44 <_malloc_r+0x8c>
 8007b12:	2b0b      	cmp	r3, #11
 8007b14:	d90f      	bls.n	8007b36 <_malloc_r+0x7e>
 8007b16:	600b      	str	r3, [r1, #0]
 8007b18:	18cc      	adds	r4, r1, r3
 8007b1a:	50cd      	str	r5, [r1, r3]
 8007b1c:	4630      	mov	r0, r6
 8007b1e:	f000 fa20 	bl	8007f62 <__malloc_unlock>
 8007b22:	f104 000b 	add.w	r0, r4, #11
 8007b26:	1d23      	adds	r3, r4, #4
 8007b28:	f020 0007 	bic.w	r0, r0, #7
 8007b2c:	1ac3      	subs	r3, r0, r3
 8007b2e:	d0d3      	beq.n	8007ad8 <_malloc_r+0x20>
 8007b30:	425a      	negs	r2, r3
 8007b32:	50e2      	str	r2, [r4, r3]
 8007b34:	e7d0      	b.n	8007ad8 <_malloc_r+0x20>
 8007b36:	684b      	ldr	r3, [r1, #4]
 8007b38:	428c      	cmp	r4, r1
 8007b3a:	bf16      	itet	ne
 8007b3c:	6063      	strne	r3, [r4, #4]
 8007b3e:	6013      	streq	r3, [r2, #0]
 8007b40:	460c      	movne	r4, r1
 8007b42:	e7eb      	b.n	8007b1c <_malloc_r+0x64>
 8007b44:	460c      	mov	r4, r1
 8007b46:	6849      	ldr	r1, [r1, #4]
 8007b48:	e7cc      	b.n	8007ae4 <_malloc_r+0x2c>
 8007b4a:	1cc4      	adds	r4, r0, #3
 8007b4c:	f024 0403 	bic.w	r4, r4, #3
 8007b50:	42a0      	cmp	r0, r4
 8007b52:	d005      	beq.n	8007b60 <_malloc_r+0xa8>
 8007b54:	1a21      	subs	r1, r4, r0
 8007b56:	4630      	mov	r0, r6
 8007b58:	f000 f946 	bl	8007de8 <_sbrk_r>
 8007b5c:	3001      	adds	r0, #1
 8007b5e:	d0cf      	beq.n	8007b00 <_malloc_r+0x48>
 8007b60:	6025      	str	r5, [r4, #0]
 8007b62:	e7db      	b.n	8007b1c <_malloc_r+0x64>
 8007b64:	20000214 	.word	0x20000214
 8007b68:	20000218 	.word	0x20000218

08007b6c <__sfputc_r>:
 8007b6c:	6893      	ldr	r3, [r2, #8]
 8007b6e:	b410      	push	{r4}
 8007b70:	3b01      	subs	r3, #1
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	6093      	str	r3, [r2, #8]
 8007b76:	da07      	bge.n	8007b88 <__sfputc_r+0x1c>
 8007b78:	6994      	ldr	r4, [r2, #24]
 8007b7a:	42a3      	cmp	r3, r4
 8007b7c:	db01      	blt.n	8007b82 <__sfputc_r+0x16>
 8007b7e:	290a      	cmp	r1, #10
 8007b80:	d102      	bne.n	8007b88 <__sfputc_r+0x1c>
 8007b82:	bc10      	pop	{r4}
 8007b84:	f7fe bb52 	b.w	800622c <__swbuf_r>
 8007b88:	6813      	ldr	r3, [r2, #0]
 8007b8a:	1c58      	adds	r0, r3, #1
 8007b8c:	6010      	str	r0, [r2, #0]
 8007b8e:	7019      	strb	r1, [r3, #0]
 8007b90:	4608      	mov	r0, r1
 8007b92:	bc10      	pop	{r4}
 8007b94:	4770      	bx	lr

08007b96 <__sfputs_r>:
 8007b96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b98:	4606      	mov	r6, r0
 8007b9a:	460f      	mov	r7, r1
 8007b9c:	4614      	mov	r4, r2
 8007b9e:	18d5      	adds	r5, r2, r3
 8007ba0:	42ac      	cmp	r4, r5
 8007ba2:	d101      	bne.n	8007ba8 <__sfputs_r+0x12>
 8007ba4:	2000      	movs	r0, #0
 8007ba6:	e007      	b.n	8007bb8 <__sfputs_r+0x22>
 8007ba8:	463a      	mov	r2, r7
 8007baa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007bae:	4630      	mov	r0, r6
 8007bb0:	f7ff ffdc 	bl	8007b6c <__sfputc_r>
 8007bb4:	1c43      	adds	r3, r0, #1
 8007bb6:	d1f3      	bne.n	8007ba0 <__sfputs_r+0xa>
 8007bb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007bbc <_vfiprintf_r>:
 8007bbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bc0:	460c      	mov	r4, r1
 8007bc2:	b09d      	sub	sp, #116	; 0x74
 8007bc4:	4617      	mov	r7, r2
 8007bc6:	461d      	mov	r5, r3
 8007bc8:	4606      	mov	r6, r0
 8007bca:	b118      	cbz	r0, 8007bd4 <_vfiprintf_r+0x18>
 8007bcc:	6983      	ldr	r3, [r0, #24]
 8007bce:	b90b      	cbnz	r3, 8007bd4 <_vfiprintf_r+0x18>
 8007bd0:	f7ff fb1e 	bl	8007210 <__sinit>
 8007bd4:	4b7c      	ldr	r3, [pc, #496]	; (8007dc8 <_vfiprintf_r+0x20c>)
 8007bd6:	429c      	cmp	r4, r3
 8007bd8:	d158      	bne.n	8007c8c <_vfiprintf_r+0xd0>
 8007bda:	6874      	ldr	r4, [r6, #4]
 8007bdc:	89a3      	ldrh	r3, [r4, #12]
 8007bde:	0718      	lsls	r0, r3, #28
 8007be0:	d55e      	bpl.n	8007ca0 <_vfiprintf_r+0xe4>
 8007be2:	6923      	ldr	r3, [r4, #16]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d05b      	beq.n	8007ca0 <_vfiprintf_r+0xe4>
 8007be8:	2300      	movs	r3, #0
 8007bea:	9309      	str	r3, [sp, #36]	; 0x24
 8007bec:	2320      	movs	r3, #32
 8007bee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007bf2:	2330      	movs	r3, #48	; 0x30
 8007bf4:	f04f 0b01 	mov.w	fp, #1
 8007bf8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007bfc:	9503      	str	r5, [sp, #12]
 8007bfe:	46b8      	mov	r8, r7
 8007c00:	4645      	mov	r5, r8
 8007c02:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007c06:	b10b      	cbz	r3, 8007c0c <_vfiprintf_r+0x50>
 8007c08:	2b25      	cmp	r3, #37	; 0x25
 8007c0a:	d154      	bne.n	8007cb6 <_vfiprintf_r+0xfa>
 8007c0c:	ebb8 0a07 	subs.w	sl, r8, r7
 8007c10:	d00b      	beq.n	8007c2a <_vfiprintf_r+0x6e>
 8007c12:	4653      	mov	r3, sl
 8007c14:	463a      	mov	r2, r7
 8007c16:	4621      	mov	r1, r4
 8007c18:	4630      	mov	r0, r6
 8007c1a:	f7ff ffbc 	bl	8007b96 <__sfputs_r>
 8007c1e:	3001      	adds	r0, #1
 8007c20:	f000 80c2 	beq.w	8007da8 <_vfiprintf_r+0x1ec>
 8007c24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c26:	4453      	add	r3, sl
 8007c28:	9309      	str	r3, [sp, #36]	; 0x24
 8007c2a:	f898 3000 	ldrb.w	r3, [r8]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	f000 80ba 	beq.w	8007da8 <_vfiprintf_r+0x1ec>
 8007c34:	2300      	movs	r3, #0
 8007c36:	f04f 32ff 	mov.w	r2, #4294967295
 8007c3a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007c3e:	9304      	str	r3, [sp, #16]
 8007c40:	9307      	str	r3, [sp, #28]
 8007c42:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007c46:	931a      	str	r3, [sp, #104]	; 0x68
 8007c48:	46a8      	mov	r8, r5
 8007c4a:	2205      	movs	r2, #5
 8007c4c:	f818 1b01 	ldrb.w	r1, [r8], #1
 8007c50:	485e      	ldr	r0, [pc, #376]	; (8007dcc <_vfiprintf_r+0x210>)
 8007c52:	f7ff fbe1 	bl	8007418 <memchr>
 8007c56:	9b04      	ldr	r3, [sp, #16]
 8007c58:	bb78      	cbnz	r0, 8007cba <_vfiprintf_r+0xfe>
 8007c5a:	06d9      	lsls	r1, r3, #27
 8007c5c:	bf44      	itt	mi
 8007c5e:	2220      	movmi	r2, #32
 8007c60:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007c64:	071a      	lsls	r2, r3, #28
 8007c66:	bf44      	itt	mi
 8007c68:	222b      	movmi	r2, #43	; 0x2b
 8007c6a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007c6e:	782a      	ldrb	r2, [r5, #0]
 8007c70:	2a2a      	cmp	r2, #42	; 0x2a
 8007c72:	d02a      	beq.n	8007cca <_vfiprintf_r+0x10e>
 8007c74:	46a8      	mov	r8, r5
 8007c76:	2000      	movs	r0, #0
 8007c78:	250a      	movs	r5, #10
 8007c7a:	9a07      	ldr	r2, [sp, #28]
 8007c7c:	4641      	mov	r1, r8
 8007c7e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007c82:	3b30      	subs	r3, #48	; 0x30
 8007c84:	2b09      	cmp	r3, #9
 8007c86:	d969      	bls.n	8007d5c <_vfiprintf_r+0x1a0>
 8007c88:	b360      	cbz	r0, 8007ce4 <_vfiprintf_r+0x128>
 8007c8a:	e024      	b.n	8007cd6 <_vfiprintf_r+0x11a>
 8007c8c:	4b50      	ldr	r3, [pc, #320]	; (8007dd0 <_vfiprintf_r+0x214>)
 8007c8e:	429c      	cmp	r4, r3
 8007c90:	d101      	bne.n	8007c96 <_vfiprintf_r+0xda>
 8007c92:	68b4      	ldr	r4, [r6, #8]
 8007c94:	e7a2      	b.n	8007bdc <_vfiprintf_r+0x20>
 8007c96:	4b4f      	ldr	r3, [pc, #316]	; (8007dd4 <_vfiprintf_r+0x218>)
 8007c98:	429c      	cmp	r4, r3
 8007c9a:	bf08      	it	eq
 8007c9c:	68f4      	ldreq	r4, [r6, #12]
 8007c9e:	e79d      	b.n	8007bdc <_vfiprintf_r+0x20>
 8007ca0:	4621      	mov	r1, r4
 8007ca2:	4630      	mov	r0, r6
 8007ca4:	f7fe fb14 	bl	80062d0 <__swsetup_r>
 8007ca8:	2800      	cmp	r0, #0
 8007caa:	d09d      	beq.n	8007be8 <_vfiprintf_r+0x2c>
 8007cac:	f04f 30ff 	mov.w	r0, #4294967295
 8007cb0:	b01d      	add	sp, #116	; 0x74
 8007cb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cb6:	46a8      	mov	r8, r5
 8007cb8:	e7a2      	b.n	8007c00 <_vfiprintf_r+0x44>
 8007cba:	4a44      	ldr	r2, [pc, #272]	; (8007dcc <_vfiprintf_r+0x210>)
 8007cbc:	4645      	mov	r5, r8
 8007cbe:	1a80      	subs	r0, r0, r2
 8007cc0:	fa0b f000 	lsl.w	r0, fp, r0
 8007cc4:	4318      	orrs	r0, r3
 8007cc6:	9004      	str	r0, [sp, #16]
 8007cc8:	e7be      	b.n	8007c48 <_vfiprintf_r+0x8c>
 8007cca:	9a03      	ldr	r2, [sp, #12]
 8007ccc:	1d11      	adds	r1, r2, #4
 8007cce:	6812      	ldr	r2, [r2, #0]
 8007cd0:	9103      	str	r1, [sp, #12]
 8007cd2:	2a00      	cmp	r2, #0
 8007cd4:	db01      	blt.n	8007cda <_vfiprintf_r+0x11e>
 8007cd6:	9207      	str	r2, [sp, #28]
 8007cd8:	e004      	b.n	8007ce4 <_vfiprintf_r+0x128>
 8007cda:	4252      	negs	r2, r2
 8007cdc:	f043 0302 	orr.w	r3, r3, #2
 8007ce0:	9207      	str	r2, [sp, #28]
 8007ce2:	9304      	str	r3, [sp, #16]
 8007ce4:	f898 3000 	ldrb.w	r3, [r8]
 8007ce8:	2b2e      	cmp	r3, #46	; 0x2e
 8007cea:	d10e      	bne.n	8007d0a <_vfiprintf_r+0x14e>
 8007cec:	f898 3001 	ldrb.w	r3, [r8, #1]
 8007cf0:	2b2a      	cmp	r3, #42	; 0x2a
 8007cf2:	d138      	bne.n	8007d66 <_vfiprintf_r+0x1aa>
 8007cf4:	9b03      	ldr	r3, [sp, #12]
 8007cf6:	f108 0802 	add.w	r8, r8, #2
 8007cfa:	1d1a      	adds	r2, r3, #4
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	9203      	str	r2, [sp, #12]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	bfb8      	it	lt
 8007d04:	f04f 33ff 	movlt.w	r3, #4294967295
 8007d08:	9305      	str	r3, [sp, #20]
 8007d0a:	4d33      	ldr	r5, [pc, #204]	; (8007dd8 <_vfiprintf_r+0x21c>)
 8007d0c:	2203      	movs	r2, #3
 8007d0e:	f898 1000 	ldrb.w	r1, [r8]
 8007d12:	4628      	mov	r0, r5
 8007d14:	f7ff fb80 	bl	8007418 <memchr>
 8007d18:	b140      	cbz	r0, 8007d2c <_vfiprintf_r+0x170>
 8007d1a:	2340      	movs	r3, #64	; 0x40
 8007d1c:	1b40      	subs	r0, r0, r5
 8007d1e:	fa03 f000 	lsl.w	r0, r3, r0
 8007d22:	9b04      	ldr	r3, [sp, #16]
 8007d24:	f108 0801 	add.w	r8, r8, #1
 8007d28:	4303      	orrs	r3, r0
 8007d2a:	9304      	str	r3, [sp, #16]
 8007d2c:	f898 1000 	ldrb.w	r1, [r8]
 8007d30:	2206      	movs	r2, #6
 8007d32:	482a      	ldr	r0, [pc, #168]	; (8007ddc <_vfiprintf_r+0x220>)
 8007d34:	f108 0701 	add.w	r7, r8, #1
 8007d38:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007d3c:	f7ff fb6c 	bl	8007418 <memchr>
 8007d40:	2800      	cmp	r0, #0
 8007d42:	d037      	beq.n	8007db4 <_vfiprintf_r+0x1f8>
 8007d44:	4b26      	ldr	r3, [pc, #152]	; (8007de0 <_vfiprintf_r+0x224>)
 8007d46:	bb1b      	cbnz	r3, 8007d90 <_vfiprintf_r+0x1d4>
 8007d48:	9b03      	ldr	r3, [sp, #12]
 8007d4a:	3307      	adds	r3, #7
 8007d4c:	f023 0307 	bic.w	r3, r3, #7
 8007d50:	3308      	adds	r3, #8
 8007d52:	9303      	str	r3, [sp, #12]
 8007d54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d56:	444b      	add	r3, r9
 8007d58:	9309      	str	r3, [sp, #36]	; 0x24
 8007d5a:	e750      	b.n	8007bfe <_vfiprintf_r+0x42>
 8007d5c:	fb05 3202 	mla	r2, r5, r2, r3
 8007d60:	2001      	movs	r0, #1
 8007d62:	4688      	mov	r8, r1
 8007d64:	e78a      	b.n	8007c7c <_vfiprintf_r+0xc0>
 8007d66:	2300      	movs	r3, #0
 8007d68:	250a      	movs	r5, #10
 8007d6a:	4619      	mov	r1, r3
 8007d6c:	f108 0801 	add.w	r8, r8, #1
 8007d70:	9305      	str	r3, [sp, #20]
 8007d72:	4640      	mov	r0, r8
 8007d74:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007d78:	3a30      	subs	r2, #48	; 0x30
 8007d7a:	2a09      	cmp	r2, #9
 8007d7c:	d903      	bls.n	8007d86 <_vfiprintf_r+0x1ca>
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d0c3      	beq.n	8007d0a <_vfiprintf_r+0x14e>
 8007d82:	9105      	str	r1, [sp, #20]
 8007d84:	e7c1      	b.n	8007d0a <_vfiprintf_r+0x14e>
 8007d86:	fb05 2101 	mla	r1, r5, r1, r2
 8007d8a:	2301      	movs	r3, #1
 8007d8c:	4680      	mov	r8, r0
 8007d8e:	e7f0      	b.n	8007d72 <_vfiprintf_r+0x1b6>
 8007d90:	ab03      	add	r3, sp, #12
 8007d92:	9300      	str	r3, [sp, #0]
 8007d94:	4622      	mov	r2, r4
 8007d96:	4b13      	ldr	r3, [pc, #76]	; (8007de4 <_vfiprintf_r+0x228>)
 8007d98:	a904      	add	r1, sp, #16
 8007d9a:	4630      	mov	r0, r6
 8007d9c:	f7fd fd5e 	bl	800585c <_printf_float>
 8007da0:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007da4:	4681      	mov	r9, r0
 8007da6:	d1d5      	bne.n	8007d54 <_vfiprintf_r+0x198>
 8007da8:	89a3      	ldrh	r3, [r4, #12]
 8007daa:	065b      	lsls	r3, r3, #25
 8007dac:	f53f af7e 	bmi.w	8007cac <_vfiprintf_r+0xf0>
 8007db0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007db2:	e77d      	b.n	8007cb0 <_vfiprintf_r+0xf4>
 8007db4:	ab03      	add	r3, sp, #12
 8007db6:	9300      	str	r3, [sp, #0]
 8007db8:	4622      	mov	r2, r4
 8007dba:	4b0a      	ldr	r3, [pc, #40]	; (8007de4 <_vfiprintf_r+0x228>)
 8007dbc:	a904      	add	r1, sp, #16
 8007dbe:	4630      	mov	r0, r6
 8007dc0:	f7fd fff8 	bl	8005db4 <_printf_i>
 8007dc4:	e7ec      	b.n	8007da0 <_vfiprintf_r+0x1e4>
 8007dc6:	bf00      	nop
 8007dc8:	080081d0 	.word	0x080081d0
 8007dcc:	0800830c 	.word	0x0800830c
 8007dd0:	080081f0 	.word	0x080081f0
 8007dd4:	080081b0 	.word	0x080081b0
 8007dd8:	08008312 	.word	0x08008312
 8007ddc:	08008316 	.word	0x08008316
 8007de0:	0800585d 	.word	0x0800585d
 8007de4:	08007b97 	.word	0x08007b97

08007de8 <_sbrk_r>:
 8007de8:	b538      	push	{r3, r4, r5, lr}
 8007dea:	2300      	movs	r3, #0
 8007dec:	4c05      	ldr	r4, [pc, #20]	; (8007e04 <_sbrk_r+0x1c>)
 8007dee:	4605      	mov	r5, r0
 8007df0:	4608      	mov	r0, r1
 8007df2:	6023      	str	r3, [r4, #0]
 8007df4:	f7fa f836 	bl	8001e64 <_sbrk>
 8007df8:	1c43      	adds	r3, r0, #1
 8007dfa:	d102      	bne.n	8007e02 <_sbrk_r+0x1a>
 8007dfc:	6823      	ldr	r3, [r4, #0]
 8007dfe:	b103      	cbz	r3, 8007e02 <_sbrk_r+0x1a>
 8007e00:	602b      	str	r3, [r5, #0]
 8007e02:	bd38      	pop	{r3, r4, r5, pc}
 8007e04:	2000039c 	.word	0x2000039c

08007e08 <__sread>:
 8007e08:	b510      	push	{r4, lr}
 8007e0a:	460c      	mov	r4, r1
 8007e0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e10:	f000 f8a8 	bl	8007f64 <_read_r>
 8007e14:	2800      	cmp	r0, #0
 8007e16:	bfab      	itete	ge
 8007e18:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007e1a:	89a3      	ldrhlt	r3, [r4, #12]
 8007e1c:	181b      	addge	r3, r3, r0
 8007e1e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007e22:	bfac      	ite	ge
 8007e24:	6563      	strge	r3, [r4, #84]	; 0x54
 8007e26:	81a3      	strhlt	r3, [r4, #12]
 8007e28:	bd10      	pop	{r4, pc}

08007e2a <__swrite>:
 8007e2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e2e:	461f      	mov	r7, r3
 8007e30:	898b      	ldrh	r3, [r1, #12]
 8007e32:	4605      	mov	r5, r0
 8007e34:	05db      	lsls	r3, r3, #23
 8007e36:	460c      	mov	r4, r1
 8007e38:	4616      	mov	r6, r2
 8007e3a:	d505      	bpl.n	8007e48 <__swrite+0x1e>
 8007e3c:	2302      	movs	r3, #2
 8007e3e:	2200      	movs	r2, #0
 8007e40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e44:	f000 f868 	bl	8007f18 <_lseek_r>
 8007e48:	89a3      	ldrh	r3, [r4, #12]
 8007e4a:	4632      	mov	r2, r6
 8007e4c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007e50:	81a3      	strh	r3, [r4, #12]
 8007e52:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007e56:	463b      	mov	r3, r7
 8007e58:	4628      	mov	r0, r5
 8007e5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007e5e:	f000 b817 	b.w	8007e90 <_write_r>

08007e62 <__sseek>:
 8007e62:	b510      	push	{r4, lr}
 8007e64:	460c      	mov	r4, r1
 8007e66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e6a:	f000 f855 	bl	8007f18 <_lseek_r>
 8007e6e:	1c43      	adds	r3, r0, #1
 8007e70:	89a3      	ldrh	r3, [r4, #12]
 8007e72:	bf15      	itete	ne
 8007e74:	6560      	strne	r0, [r4, #84]	; 0x54
 8007e76:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007e7a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007e7e:	81a3      	strheq	r3, [r4, #12]
 8007e80:	bf18      	it	ne
 8007e82:	81a3      	strhne	r3, [r4, #12]
 8007e84:	bd10      	pop	{r4, pc}

08007e86 <__sclose>:
 8007e86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e8a:	f000 b813 	b.w	8007eb4 <_close_r>
	...

08007e90 <_write_r>:
 8007e90:	b538      	push	{r3, r4, r5, lr}
 8007e92:	4605      	mov	r5, r0
 8007e94:	4608      	mov	r0, r1
 8007e96:	4611      	mov	r1, r2
 8007e98:	2200      	movs	r2, #0
 8007e9a:	4c05      	ldr	r4, [pc, #20]	; (8007eb0 <_write_r+0x20>)
 8007e9c:	6022      	str	r2, [r4, #0]
 8007e9e:	461a      	mov	r2, r3
 8007ea0:	f7f9 fe46 	bl	8001b30 <_write>
 8007ea4:	1c43      	adds	r3, r0, #1
 8007ea6:	d102      	bne.n	8007eae <_write_r+0x1e>
 8007ea8:	6823      	ldr	r3, [r4, #0]
 8007eaa:	b103      	cbz	r3, 8007eae <_write_r+0x1e>
 8007eac:	602b      	str	r3, [r5, #0]
 8007eae:	bd38      	pop	{r3, r4, r5, pc}
 8007eb0:	2000039c 	.word	0x2000039c

08007eb4 <_close_r>:
 8007eb4:	b538      	push	{r3, r4, r5, lr}
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	4c05      	ldr	r4, [pc, #20]	; (8007ed0 <_close_r+0x1c>)
 8007eba:	4605      	mov	r5, r0
 8007ebc:	4608      	mov	r0, r1
 8007ebe:	6023      	str	r3, [r4, #0]
 8007ec0:	f7f9 fe62 	bl	8001b88 <_close>
 8007ec4:	1c43      	adds	r3, r0, #1
 8007ec6:	d102      	bne.n	8007ece <_close_r+0x1a>
 8007ec8:	6823      	ldr	r3, [r4, #0]
 8007eca:	b103      	cbz	r3, 8007ece <_close_r+0x1a>
 8007ecc:	602b      	str	r3, [r5, #0]
 8007ece:	bd38      	pop	{r3, r4, r5, pc}
 8007ed0:	2000039c 	.word	0x2000039c

08007ed4 <_fstat_r>:
 8007ed4:	b538      	push	{r3, r4, r5, lr}
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	4c06      	ldr	r4, [pc, #24]	; (8007ef4 <_fstat_r+0x20>)
 8007eda:	4605      	mov	r5, r0
 8007edc:	4608      	mov	r0, r1
 8007ede:	4611      	mov	r1, r2
 8007ee0:	6023      	str	r3, [r4, #0]
 8007ee2:	f7f9 fea1 	bl	8001c28 <_fstat>
 8007ee6:	1c43      	adds	r3, r0, #1
 8007ee8:	d102      	bne.n	8007ef0 <_fstat_r+0x1c>
 8007eea:	6823      	ldr	r3, [r4, #0]
 8007eec:	b103      	cbz	r3, 8007ef0 <_fstat_r+0x1c>
 8007eee:	602b      	str	r3, [r5, #0]
 8007ef0:	bd38      	pop	{r3, r4, r5, pc}
 8007ef2:	bf00      	nop
 8007ef4:	2000039c 	.word	0x2000039c

08007ef8 <_isatty_r>:
 8007ef8:	b538      	push	{r3, r4, r5, lr}
 8007efa:	2300      	movs	r3, #0
 8007efc:	4c05      	ldr	r4, [pc, #20]	; (8007f14 <_isatty_r+0x1c>)
 8007efe:	4605      	mov	r5, r0
 8007f00:	4608      	mov	r0, r1
 8007f02:	6023      	str	r3, [r4, #0]
 8007f04:	f7f9 fdfe 	bl	8001b04 <_isatty>
 8007f08:	1c43      	adds	r3, r0, #1
 8007f0a:	d102      	bne.n	8007f12 <_isatty_r+0x1a>
 8007f0c:	6823      	ldr	r3, [r4, #0]
 8007f0e:	b103      	cbz	r3, 8007f12 <_isatty_r+0x1a>
 8007f10:	602b      	str	r3, [r5, #0]
 8007f12:	bd38      	pop	{r3, r4, r5, pc}
 8007f14:	2000039c 	.word	0x2000039c

08007f18 <_lseek_r>:
 8007f18:	b538      	push	{r3, r4, r5, lr}
 8007f1a:	4605      	mov	r5, r0
 8007f1c:	4608      	mov	r0, r1
 8007f1e:	4611      	mov	r1, r2
 8007f20:	2200      	movs	r2, #0
 8007f22:	4c05      	ldr	r4, [pc, #20]	; (8007f38 <_lseek_r+0x20>)
 8007f24:	6022      	str	r2, [r4, #0]
 8007f26:	461a      	mov	r2, r3
 8007f28:	f7f9 fe45 	bl	8001bb6 <_lseek>
 8007f2c:	1c43      	adds	r3, r0, #1
 8007f2e:	d102      	bne.n	8007f36 <_lseek_r+0x1e>
 8007f30:	6823      	ldr	r3, [r4, #0]
 8007f32:	b103      	cbz	r3, 8007f36 <_lseek_r+0x1e>
 8007f34:	602b      	str	r3, [r5, #0]
 8007f36:	bd38      	pop	{r3, r4, r5, pc}
 8007f38:	2000039c 	.word	0x2000039c

08007f3c <__ascii_mbtowc>:
 8007f3c:	b082      	sub	sp, #8
 8007f3e:	b901      	cbnz	r1, 8007f42 <__ascii_mbtowc+0x6>
 8007f40:	a901      	add	r1, sp, #4
 8007f42:	b142      	cbz	r2, 8007f56 <__ascii_mbtowc+0x1a>
 8007f44:	b14b      	cbz	r3, 8007f5a <__ascii_mbtowc+0x1e>
 8007f46:	7813      	ldrb	r3, [r2, #0]
 8007f48:	600b      	str	r3, [r1, #0]
 8007f4a:	7812      	ldrb	r2, [r2, #0]
 8007f4c:	1c10      	adds	r0, r2, #0
 8007f4e:	bf18      	it	ne
 8007f50:	2001      	movne	r0, #1
 8007f52:	b002      	add	sp, #8
 8007f54:	4770      	bx	lr
 8007f56:	4610      	mov	r0, r2
 8007f58:	e7fb      	b.n	8007f52 <__ascii_mbtowc+0x16>
 8007f5a:	f06f 0001 	mvn.w	r0, #1
 8007f5e:	e7f8      	b.n	8007f52 <__ascii_mbtowc+0x16>

08007f60 <__malloc_lock>:
 8007f60:	4770      	bx	lr

08007f62 <__malloc_unlock>:
 8007f62:	4770      	bx	lr

08007f64 <_read_r>:
 8007f64:	b538      	push	{r3, r4, r5, lr}
 8007f66:	4605      	mov	r5, r0
 8007f68:	4608      	mov	r0, r1
 8007f6a:	4611      	mov	r1, r2
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	4c05      	ldr	r4, [pc, #20]	; (8007f84 <_read_r+0x20>)
 8007f70:	6022      	str	r2, [r4, #0]
 8007f72:	461a      	mov	r2, r3
 8007f74:	f7f9 fe30 	bl	8001bd8 <_read>
 8007f78:	1c43      	adds	r3, r0, #1
 8007f7a:	d102      	bne.n	8007f82 <_read_r+0x1e>
 8007f7c:	6823      	ldr	r3, [r4, #0]
 8007f7e:	b103      	cbz	r3, 8007f82 <_read_r+0x1e>
 8007f80:	602b      	str	r3, [r5, #0]
 8007f82:	bd38      	pop	{r3, r4, r5, pc}
 8007f84:	2000039c 	.word	0x2000039c

08007f88 <__ascii_wctomb>:
 8007f88:	b149      	cbz	r1, 8007f9e <__ascii_wctomb+0x16>
 8007f8a:	2aff      	cmp	r2, #255	; 0xff
 8007f8c:	bf8b      	itete	hi
 8007f8e:	238a      	movhi	r3, #138	; 0x8a
 8007f90:	700a      	strbls	r2, [r1, #0]
 8007f92:	6003      	strhi	r3, [r0, #0]
 8007f94:	2001      	movls	r0, #1
 8007f96:	bf88      	it	hi
 8007f98:	f04f 30ff 	movhi.w	r0, #4294967295
 8007f9c:	4770      	bx	lr
 8007f9e:	4608      	mov	r0, r1
 8007fa0:	4770      	bx	lr
	...

08007fa4 <_init>:
 8007fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fa6:	bf00      	nop
 8007fa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007faa:	bc08      	pop	{r3}
 8007fac:	469e      	mov	lr, r3
 8007fae:	4770      	bx	lr

08007fb0 <_fini>:
 8007fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fb2:	bf00      	nop
 8007fb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fb6:	bc08      	pop	{r3}
 8007fb8:	469e      	mov	lr, r3
 8007fba:	4770      	bx	lr
