
[I2C]SHT31_TempHumid_Sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006078  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000248  08006184  08006184  00016184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080063cc  080063cc  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  080063cc  080063cc  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  080063cc  080063cc  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080063cc  080063cc  000163cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080063d0  080063d0  000163d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080063d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c4  20000074  08006448  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000238  08006448  00020238  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011b87  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002ba2  00000000  00000000  00031c24  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001068  00000000  00000000  000347c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ef0  00000000  00000000  00035830  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017466  00000000  00000000  00036720  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011a37  00000000  00000000  0004db86  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00076c44  00000000  00000000  0005f5bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d6201  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004af4  00000000  00000000  000d627c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000074 	.word	0x20000074
 8000128:	00000000 	.word	0x00000000
 800012c:	0800616c 	.word	0x0800616c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000078 	.word	0x20000078
 8000148:	0800616c 	.word	0x0800616c

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	; 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028a:	f1a4 0401 	sub.w	r4, r4, #1
 800028e:	d1e9      	bne.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000436:	bf08      	it	eq
 8000438:	4770      	bxeq	lr
 800043a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800043e:	bf04      	itt	eq
 8000440:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000444:	4770      	bxeq	lr
 8000446:	b530      	push	{r4, r5, lr}
 8000448:	f44f 7460 	mov.w	r4, #896	; 0x380
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000450:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000454:	e71c      	b.n	8000290 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_ul2d>:
 8000458:	ea50 0201 	orrs.w	r2, r0, r1
 800045c:	bf08      	it	eq
 800045e:	4770      	bxeq	lr
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	f04f 0500 	mov.w	r5, #0
 8000466:	e00a      	b.n	800047e <__aeabi_l2d+0x16>

08000468 <__aeabi_l2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000476:	d502      	bpl.n	800047e <__aeabi_l2d+0x16>
 8000478:	4240      	negs	r0, r0
 800047a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000482:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000486:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048a:	f43f aed8 	beq.w	800023e <__adddf3+0xe6>
 800048e:	f04f 0203 	mov.w	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049e:	bf18      	it	ne
 80004a0:	3203      	addne	r2, #3
 80004a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a6:	f1c2 0320 	rsb	r3, r2, #32
 80004aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b6:	ea40 000e 	orr.w	r0, r0, lr
 80004ba:	fa21 f102 	lsr.w	r1, r1, r2
 80004be:	4414      	add	r4, r2
 80004c0:	e6bd      	b.n	800023e <__adddf3+0xe6>
 80004c2:	bf00      	nop

080004c4 <__aeabi_frsub>:
 80004c4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80004c8:	e002      	b.n	80004d0 <__addsf3>
 80004ca:	bf00      	nop

080004cc <__aeabi_fsub>:
 80004cc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080004d0 <__addsf3>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	bf1f      	itttt	ne
 80004d4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80004d8:	ea92 0f03 	teqne	r2, r3
 80004dc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80004e0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80004e4:	d06a      	beq.n	80005bc <__addsf3+0xec>
 80004e6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80004ea:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80004ee:	bfc1      	itttt	gt
 80004f0:	18d2      	addgt	r2, r2, r3
 80004f2:	4041      	eorgt	r1, r0
 80004f4:	4048      	eorgt	r0, r1
 80004f6:	4041      	eorgt	r1, r0
 80004f8:	bfb8      	it	lt
 80004fa:	425b      	neglt	r3, r3
 80004fc:	2b19      	cmp	r3, #25
 80004fe:	bf88      	it	hi
 8000500:	4770      	bxhi	lr
 8000502:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000506:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800050a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800050e:	bf18      	it	ne
 8000510:	4240      	negne	r0, r0
 8000512:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000516:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800051a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800051e:	bf18      	it	ne
 8000520:	4249      	negne	r1, r1
 8000522:	ea92 0f03 	teq	r2, r3
 8000526:	d03f      	beq.n	80005a8 <__addsf3+0xd8>
 8000528:	f1a2 0201 	sub.w	r2, r2, #1
 800052c:	fa41 fc03 	asr.w	ip, r1, r3
 8000530:	eb10 000c 	adds.w	r0, r0, ip
 8000534:	f1c3 0320 	rsb	r3, r3, #32
 8000538:	fa01 f103 	lsl.w	r1, r1, r3
 800053c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000540:	d502      	bpl.n	8000548 <__addsf3+0x78>
 8000542:	4249      	negs	r1, r1
 8000544:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000548:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 800054c:	d313      	bcc.n	8000576 <__addsf3+0xa6>
 800054e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000552:	d306      	bcc.n	8000562 <__addsf3+0x92>
 8000554:	0840      	lsrs	r0, r0, #1
 8000556:	ea4f 0131 	mov.w	r1, r1, rrx
 800055a:	f102 0201 	add.w	r2, r2, #1
 800055e:	2afe      	cmp	r2, #254	; 0xfe
 8000560:	d251      	bcs.n	8000606 <__addsf3+0x136>
 8000562:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000566:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800056a:	bf08      	it	eq
 800056c:	f020 0001 	biceq.w	r0, r0, #1
 8000570:	ea40 0003 	orr.w	r0, r0, r3
 8000574:	4770      	bx	lr
 8000576:	0049      	lsls	r1, r1, #1
 8000578:	eb40 0000 	adc.w	r0, r0, r0
 800057c:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000580:	f1a2 0201 	sub.w	r2, r2, #1
 8000584:	d1ed      	bne.n	8000562 <__addsf3+0x92>
 8000586:	fab0 fc80 	clz	ip, r0
 800058a:	f1ac 0c08 	sub.w	ip, ip, #8
 800058e:	ebb2 020c 	subs.w	r2, r2, ip
 8000592:	fa00 f00c 	lsl.w	r0, r0, ip
 8000596:	bfaa      	itet	ge
 8000598:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 800059c:	4252      	neglt	r2, r2
 800059e:	4318      	orrge	r0, r3
 80005a0:	bfbc      	itt	lt
 80005a2:	40d0      	lsrlt	r0, r2
 80005a4:	4318      	orrlt	r0, r3
 80005a6:	4770      	bx	lr
 80005a8:	f092 0f00 	teq	r2, #0
 80005ac:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80005b0:	bf06      	itte	eq
 80005b2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80005b6:	3201      	addeq	r2, #1
 80005b8:	3b01      	subne	r3, #1
 80005ba:	e7b5      	b.n	8000528 <__addsf3+0x58>
 80005bc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80005c0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80005c4:	bf18      	it	ne
 80005c6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80005ca:	d021      	beq.n	8000610 <__addsf3+0x140>
 80005cc:	ea92 0f03 	teq	r2, r3
 80005d0:	d004      	beq.n	80005dc <__addsf3+0x10c>
 80005d2:	f092 0f00 	teq	r2, #0
 80005d6:	bf08      	it	eq
 80005d8:	4608      	moveq	r0, r1
 80005da:	4770      	bx	lr
 80005dc:	ea90 0f01 	teq	r0, r1
 80005e0:	bf1c      	itt	ne
 80005e2:	2000      	movne	r0, #0
 80005e4:	4770      	bxne	lr
 80005e6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80005ea:	d104      	bne.n	80005f6 <__addsf3+0x126>
 80005ec:	0040      	lsls	r0, r0, #1
 80005ee:	bf28      	it	cs
 80005f0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80005f4:	4770      	bx	lr
 80005f6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80005fa:	bf3c      	itt	cc
 80005fc:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000600:	4770      	bxcc	lr
 8000602:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000606:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 800060a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800060e:	4770      	bx	lr
 8000610:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000614:	bf16      	itet	ne
 8000616:	4608      	movne	r0, r1
 8000618:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 800061c:	4601      	movne	r1, r0
 800061e:	0242      	lsls	r2, r0, #9
 8000620:	bf06      	itte	eq
 8000622:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000626:	ea90 0f01 	teqeq	r0, r1
 800062a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 800062e:	4770      	bx	lr

08000630 <__aeabi_ui2f>:
 8000630:	f04f 0300 	mov.w	r3, #0
 8000634:	e004      	b.n	8000640 <__aeabi_i2f+0x8>
 8000636:	bf00      	nop

08000638 <__aeabi_i2f>:
 8000638:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 800063c:	bf48      	it	mi
 800063e:	4240      	negmi	r0, r0
 8000640:	ea5f 0c00 	movs.w	ip, r0
 8000644:	bf08      	it	eq
 8000646:	4770      	bxeq	lr
 8000648:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 800064c:	4601      	mov	r1, r0
 800064e:	f04f 0000 	mov.w	r0, #0
 8000652:	e01c      	b.n	800068e <__aeabi_l2f+0x2a>

08000654 <__aeabi_ul2f>:
 8000654:	ea50 0201 	orrs.w	r2, r0, r1
 8000658:	bf08      	it	eq
 800065a:	4770      	bxeq	lr
 800065c:	f04f 0300 	mov.w	r3, #0
 8000660:	e00a      	b.n	8000678 <__aeabi_l2f+0x14>
 8000662:	bf00      	nop

08000664 <__aeabi_l2f>:
 8000664:	ea50 0201 	orrs.w	r2, r0, r1
 8000668:	bf08      	it	eq
 800066a:	4770      	bxeq	lr
 800066c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000670:	d502      	bpl.n	8000678 <__aeabi_l2f+0x14>
 8000672:	4240      	negs	r0, r0
 8000674:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000678:	ea5f 0c01 	movs.w	ip, r1
 800067c:	bf02      	ittt	eq
 800067e:	4684      	moveq	ip, r0
 8000680:	4601      	moveq	r1, r0
 8000682:	2000      	moveq	r0, #0
 8000684:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000688:	bf08      	it	eq
 800068a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800068e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000692:	fabc f28c 	clz	r2, ip
 8000696:	3a08      	subs	r2, #8
 8000698:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 800069c:	db10      	blt.n	80006c0 <__aeabi_l2f+0x5c>
 800069e:	fa01 fc02 	lsl.w	ip, r1, r2
 80006a2:	4463      	add	r3, ip
 80006a4:	fa00 fc02 	lsl.w	ip, r0, r2
 80006a8:	f1c2 0220 	rsb	r2, r2, #32
 80006ac:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80006b0:	fa20 f202 	lsr.w	r2, r0, r2
 80006b4:	eb43 0002 	adc.w	r0, r3, r2
 80006b8:	bf08      	it	eq
 80006ba:	f020 0001 	biceq.w	r0, r0, #1
 80006be:	4770      	bx	lr
 80006c0:	f102 0220 	add.w	r2, r2, #32
 80006c4:	fa01 fc02 	lsl.w	ip, r1, r2
 80006c8:	f1c2 0220 	rsb	r2, r2, #32
 80006cc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80006d0:	fa21 f202 	lsr.w	r2, r1, r2
 80006d4:	eb43 0002 	adc.w	r0, r3, r2
 80006d8:	bf08      	it	eq
 80006da:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80006de:	4770      	bx	lr

080006e0 <__aeabi_fmul>:
 80006e0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80006e4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80006e8:	bf1e      	ittt	ne
 80006ea:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80006ee:	ea92 0f0c 	teqne	r2, ip
 80006f2:	ea93 0f0c 	teqne	r3, ip
 80006f6:	d06f      	beq.n	80007d8 <__aeabi_fmul+0xf8>
 80006f8:	441a      	add	r2, r3
 80006fa:	ea80 0c01 	eor.w	ip, r0, r1
 80006fe:	0240      	lsls	r0, r0, #9
 8000700:	bf18      	it	ne
 8000702:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000706:	d01e      	beq.n	8000746 <__aeabi_fmul+0x66>
 8000708:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800070c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000710:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000714:	fba0 3101 	umull	r3, r1, r0, r1
 8000718:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800071c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000720:	bf3e      	ittt	cc
 8000722:	0049      	lslcc	r1, r1, #1
 8000724:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000728:	005b      	lslcc	r3, r3, #1
 800072a:	ea40 0001 	orr.w	r0, r0, r1
 800072e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000732:	2afd      	cmp	r2, #253	; 0xfd
 8000734:	d81d      	bhi.n	8000772 <__aeabi_fmul+0x92>
 8000736:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800073a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800073e:	bf08      	it	eq
 8000740:	f020 0001 	biceq.w	r0, r0, #1
 8000744:	4770      	bx	lr
 8000746:	f090 0f00 	teq	r0, #0
 800074a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800074e:	bf08      	it	eq
 8000750:	0249      	lsleq	r1, r1, #9
 8000752:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000756:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 800075a:	3a7f      	subs	r2, #127	; 0x7f
 800075c:	bfc2      	ittt	gt
 800075e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000762:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000766:	4770      	bxgt	lr
 8000768:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800076c:	f04f 0300 	mov.w	r3, #0
 8000770:	3a01      	subs	r2, #1
 8000772:	dc5d      	bgt.n	8000830 <__aeabi_fmul+0x150>
 8000774:	f112 0f19 	cmn.w	r2, #25
 8000778:	bfdc      	itt	le
 800077a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800077e:	4770      	bxle	lr
 8000780:	f1c2 0200 	rsb	r2, r2, #0
 8000784:	0041      	lsls	r1, r0, #1
 8000786:	fa21 f102 	lsr.w	r1, r1, r2
 800078a:	f1c2 0220 	rsb	r2, r2, #32
 800078e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000792:	ea5f 0031 	movs.w	r0, r1, rrx
 8000796:	f140 0000 	adc.w	r0, r0, #0
 800079a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800079e:	bf08      	it	eq
 80007a0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80007a4:	4770      	bx	lr
 80007a6:	f092 0f00 	teq	r2, #0
 80007aa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80007ae:	bf02      	ittt	eq
 80007b0:	0040      	lsleq	r0, r0, #1
 80007b2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80007b6:	3a01      	subeq	r2, #1
 80007b8:	d0f9      	beq.n	80007ae <__aeabi_fmul+0xce>
 80007ba:	ea40 000c 	orr.w	r0, r0, ip
 80007be:	f093 0f00 	teq	r3, #0
 80007c2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80007c6:	bf02      	ittt	eq
 80007c8:	0049      	lsleq	r1, r1, #1
 80007ca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80007ce:	3b01      	subeq	r3, #1
 80007d0:	d0f9      	beq.n	80007c6 <__aeabi_fmul+0xe6>
 80007d2:	ea41 010c 	orr.w	r1, r1, ip
 80007d6:	e78f      	b.n	80006f8 <__aeabi_fmul+0x18>
 80007d8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80007dc:	ea92 0f0c 	teq	r2, ip
 80007e0:	bf18      	it	ne
 80007e2:	ea93 0f0c 	teqne	r3, ip
 80007e6:	d00a      	beq.n	80007fe <__aeabi_fmul+0x11e>
 80007e8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80007ec:	bf18      	it	ne
 80007ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80007f2:	d1d8      	bne.n	80007a6 <__aeabi_fmul+0xc6>
 80007f4:	ea80 0001 	eor.w	r0, r0, r1
 80007f8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80007fc:	4770      	bx	lr
 80007fe:	f090 0f00 	teq	r0, #0
 8000802:	bf17      	itett	ne
 8000804:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000808:	4608      	moveq	r0, r1
 800080a:	f091 0f00 	teqne	r1, #0
 800080e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000812:	d014      	beq.n	800083e <__aeabi_fmul+0x15e>
 8000814:	ea92 0f0c 	teq	r2, ip
 8000818:	d101      	bne.n	800081e <__aeabi_fmul+0x13e>
 800081a:	0242      	lsls	r2, r0, #9
 800081c:	d10f      	bne.n	800083e <__aeabi_fmul+0x15e>
 800081e:	ea93 0f0c 	teq	r3, ip
 8000822:	d103      	bne.n	800082c <__aeabi_fmul+0x14c>
 8000824:	024b      	lsls	r3, r1, #9
 8000826:	bf18      	it	ne
 8000828:	4608      	movne	r0, r1
 800082a:	d108      	bne.n	800083e <__aeabi_fmul+0x15e>
 800082c:	ea80 0001 	eor.w	r0, r0, r1
 8000830:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000834:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000838:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800083c:	4770      	bx	lr
 800083e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000842:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000846:	4770      	bx	lr

08000848 <__aeabi_fdiv>:
 8000848:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800084c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000850:	bf1e      	ittt	ne
 8000852:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000856:	ea92 0f0c 	teqne	r2, ip
 800085a:	ea93 0f0c 	teqne	r3, ip
 800085e:	d069      	beq.n	8000934 <__aeabi_fdiv+0xec>
 8000860:	eba2 0203 	sub.w	r2, r2, r3
 8000864:	ea80 0c01 	eor.w	ip, r0, r1
 8000868:	0249      	lsls	r1, r1, #9
 800086a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 800086e:	d037      	beq.n	80008e0 <__aeabi_fdiv+0x98>
 8000870:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000874:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000878:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 800087c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000880:	428b      	cmp	r3, r1
 8000882:	bf38      	it	cc
 8000884:	005b      	lslcc	r3, r3, #1
 8000886:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 800088a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800088e:	428b      	cmp	r3, r1
 8000890:	bf24      	itt	cs
 8000892:	1a5b      	subcs	r3, r3, r1
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 800089c:	bf24      	itt	cs
 800089e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80008a2:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a6:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80008aa:	bf24      	itt	cs
 80008ac:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80008b0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b4:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80008b8:	bf24      	itt	cs
 80008ba:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80008be:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c2:	011b      	lsls	r3, r3, #4
 80008c4:	bf18      	it	ne
 80008c6:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80008ca:	d1e0      	bne.n	800088e <__aeabi_fdiv+0x46>
 80008cc:	2afd      	cmp	r2, #253	; 0xfd
 80008ce:	f63f af50 	bhi.w	8000772 <__aeabi_fmul+0x92>
 80008d2:	428b      	cmp	r3, r1
 80008d4:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80008d8:	bf08      	it	eq
 80008da:	f020 0001 	biceq.w	r0, r0, #1
 80008de:	4770      	bx	lr
 80008e0:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80008e4:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80008e8:	327f      	adds	r2, #127	; 0x7f
 80008ea:	bfc2      	ittt	gt
 80008ec:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80008f0:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80008f4:	4770      	bxgt	lr
 80008f6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80008fa:	f04f 0300 	mov.w	r3, #0
 80008fe:	3a01      	subs	r2, #1
 8000900:	e737      	b.n	8000772 <__aeabi_fmul+0x92>
 8000902:	f092 0f00 	teq	r2, #0
 8000906:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800090a:	bf02      	ittt	eq
 800090c:	0040      	lsleq	r0, r0, #1
 800090e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000912:	3a01      	subeq	r2, #1
 8000914:	d0f9      	beq.n	800090a <__aeabi_fdiv+0xc2>
 8000916:	ea40 000c 	orr.w	r0, r0, ip
 800091a:	f093 0f00 	teq	r3, #0
 800091e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000922:	bf02      	ittt	eq
 8000924:	0049      	lsleq	r1, r1, #1
 8000926:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800092a:	3b01      	subeq	r3, #1
 800092c:	d0f9      	beq.n	8000922 <__aeabi_fdiv+0xda>
 800092e:	ea41 010c 	orr.w	r1, r1, ip
 8000932:	e795      	b.n	8000860 <__aeabi_fdiv+0x18>
 8000934:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000938:	ea92 0f0c 	teq	r2, ip
 800093c:	d108      	bne.n	8000950 <__aeabi_fdiv+0x108>
 800093e:	0242      	lsls	r2, r0, #9
 8000940:	f47f af7d 	bne.w	800083e <__aeabi_fmul+0x15e>
 8000944:	ea93 0f0c 	teq	r3, ip
 8000948:	f47f af70 	bne.w	800082c <__aeabi_fmul+0x14c>
 800094c:	4608      	mov	r0, r1
 800094e:	e776      	b.n	800083e <__aeabi_fmul+0x15e>
 8000950:	ea93 0f0c 	teq	r3, ip
 8000954:	d104      	bne.n	8000960 <__aeabi_fdiv+0x118>
 8000956:	024b      	lsls	r3, r1, #9
 8000958:	f43f af4c 	beq.w	80007f4 <__aeabi_fmul+0x114>
 800095c:	4608      	mov	r0, r1
 800095e:	e76e      	b.n	800083e <__aeabi_fmul+0x15e>
 8000960:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000964:	bf18      	it	ne
 8000966:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800096a:	d1ca      	bne.n	8000902 <__aeabi_fdiv+0xba>
 800096c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000970:	f47f af5c 	bne.w	800082c <__aeabi_fmul+0x14c>
 8000974:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000978:	f47f af3c 	bne.w	80007f4 <__aeabi_fmul+0x114>
 800097c:	e75f      	b.n	800083e <__aeabi_fmul+0x15e>
 800097e:	bf00      	nop

08000980 <__aeabi_f2iz>:
 8000980:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000984:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000988:	d30f      	bcc.n	80009aa <__aeabi_f2iz+0x2a>
 800098a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800098e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000992:	d90d      	bls.n	80009b0 <__aeabi_f2iz+0x30>
 8000994:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000998:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800099c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80009a0:	fa23 f002 	lsr.w	r0, r3, r2
 80009a4:	bf18      	it	ne
 80009a6:	4240      	negne	r0, r0
 80009a8:	4770      	bx	lr
 80009aa:	f04f 0000 	mov.w	r0, #0
 80009ae:	4770      	bx	lr
 80009b0:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80009b4:	d101      	bne.n	80009ba <__aeabi_f2iz+0x3a>
 80009b6:	0242      	lsls	r2, r0, #9
 80009b8:	d105      	bne.n	80009c6 <__aeabi_f2iz+0x46>
 80009ba:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80009be:	bf08      	it	eq
 80009c0:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009c4:	4770      	bx	lr
 80009c6:	f04f 0000 	mov.w	r0, #0
 80009ca:	4770      	bx	lr

080009cc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b082      	sub	sp, #8
 80009d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80009d2:	4b10      	ldr	r3, [pc, #64]	; (8000a14 <MX_DMA_Init+0x48>)
 80009d4:	695b      	ldr	r3, [r3, #20]
 80009d6:	4a0f      	ldr	r2, [pc, #60]	; (8000a14 <MX_DMA_Init+0x48>)
 80009d8:	f043 0301 	orr.w	r3, r3, #1
 80009dc:	6153      	str	r3, [r2, #20]
 80009de:	4b0d      	ldr	r3, [pc, #52]	; (8000a14 <MX_DMA_Init+0x48>)
 80009e0:	695b      	ldr	r3, [r3, #20]
 80009e2:	f003 0301 	and.w	r3, r3, #1
 80009e6:	607b      	str	r3, [r7, #4]
 80009e8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 1, 0);
 80009ea:	2200      	movs	r2, #0
 80009ec:	2101      	movs	r1, #1
 80009ee:	2010      	movs	r0, #16
 80009f0:	f001 f99f 	bl	8001d32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80009f4:	2010      	movs	r0, #16
 80009f6:	f001 f9b8 	bl	8001d6a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 1, 0);
 80009fa:	2200      	movs	r2, #0
 80009fc:	2101      	movs	r1, #1
 80009fe:	2011      	movs	r0, #17
 8000a00:	f001 f997 	bl	8001d32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000a04:	2011      	movs	r0, #17
 8000a06:	f001 f9b0 	bl	8001d6a <HAL_NVIC_EnableIRQ>

}
 8000a0a:	bf00      	nop
 8000a0c:	3708      	adds	r7, #8
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	40021000 	.word	0x40021000

08000a18 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b088      	sub	sp, #32
 8000a1c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a1e:	f107 0310 	add.w	r3, r7, #16
 8000a22:	2200      	movs	r2, #0
 8000a24:	601a      	str	r2, [r3, #0]
 8000a26:	605a      	str	r2, [r3, #4]
 8000a28:	609a      	str	r2, [r3, #8]
 8000a2a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a2c:	4b28      	ldr	r3, [pc, #160]	; (8000ad0 <MX_GPIO_Init+0xb8>)
 8000a2e:	699b      	ldr	r3, [r3, #24]
 8000a30:	4a27      	ldr	r2, [pc, #156]	; (8000ad0 <MX_GPIO_Init+0xb8>)
 8000a32:	f043 0320 	orr.w	r3, r3, #32
 8000a36:	6193      	str	r3, [r2, #24]
 8000a38:	4b25      	ldr	r3, [pc, #148]	; (8000ad0 <MX_GPIO_Init+0xb8>)
 8000a3a:	699b      	ldr	r3, [r3, #24]
 8000a3c:	f003 0320 	and.w	r3, r3, #32
 8000a40:	60fb      	str	r3, [r7, #12]
 8000a42:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a44:	4b22      	ldr	r3, [pc, #136]	; (8000ad0 <MX_GPIO_Init+0xb8>)
 8000a46:	699b      	ldr	r3, [r3, #24]
 8000a48:	4a21      	ldr	r2, [pc, #132]	; (8000ad0 <MX_GPIO_Init+0xb8>)
 8000a4a:	f043 0304 	orr.w	r3, r3, #4
 8000a4e:	6193      	str	r3, [r2, #24]
 8000a50:	4b1f      	ldr	r3, [pc, #124]	; (8000ad0 <MX_GPIO_Init+0xb8>)
 8000a52:	699b      	ldr	r3, [r3, #24]
 8000a54:	f003 0304 	and.w	r3, r3, #4
 8000a58:	60bb      	str	r3, [r7, #8]
 8000a5a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a5c:	4b1c      	ldr	r3, [pc, #112]	; (8000ad0 <MX_GPIO_Init+0xb8>)
 8000a5e:	699b      	ldr	r3, [r3, #24]
 8000a60:	4a1b      	ldr	r2, [pc, #108]	; (8000ad0 <MX_GPIO_Init+0xb8>)
 8000a62:	f043 0308 	orr.w	r3, r3, #8
 8000a66:	6193      	str	r3, [r2, #24]
 8000a68:	4b19      	ldr	r3, [pc, #100]	; (8000ad0 <MX_GPIO_Init+0xb8>)
 8000a6a:	699b      	ldr	r3, [r3, #24]
 8000a6c:	f003 0308 	and.w	r3, r3, #8
 8000a70:	607b      	str	r3, [r7, #4]
 8000a72:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, USER_LED_1_Pin|USER_LED_4_Pin, GPIO_PIN_RESET);
 8000a74:	2200      	movs	r2, #0
 8000a76:	f44f 7190 	mov.w	r1, #288	; 0x120
 8000a7a:	4816      	ldr	r0, [pc, #88]	; (8000ad4 <MX_GPIO_Init+0xbc>)
 8000a7c:	f001 fcc0 	bl	8002400 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = BT_UP_Pin|BT_CENTER_Pin|BT_DOWN_Pin;
 8000a80:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8000a84:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a86:	4b14      	ldr	r3, [pc, #80]	; (8000ad8 <MX_GPIO_Init+0xc0>)
 8000a88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a8e:	f107 0310 	add.w	r3, r7, #16
 8000a92:	4619      	mov	r1, r3
 8000a94:	4811      	ldr	r0, [pc, #68]	; (8000adc <MX_GPIO_Init+0xc4>)
 8000a96:	f001 fb59 	bl	800214c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = USER_LED_1_Pin|USER_LED_4_Pin;
 8000a9a:	f44f 7390 	mov.w	r3, #288	; 0x120
 8000a9e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aa0:	2301      	movs	r3, #1
 8000aa2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa8:	2302      	movs	r3, #2
 8000aaa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aac:	f107 0310 	add.w	r3, r7, #16
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4808      	ldr	r0, [pc, #32]	; (8000ad4 <MX_GPIO_Init+0xbc>)
 8000ab4:	f001 fb4a 	bl	800214c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 2, 0);
 8000ab8:	2200      	movs	r2, #0
 8000aba:	2102      	movs	r1, #2
 8000abc:	2017      	movs	r0, #23
 8000abe:	f001 f938 	bl	8001d32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000ac2:	2017      	movs	r0, #23
 8000ac4:	f001 f951 	bl	8001d6a <HAL_NVIC_EnableIRQ>

}
 8000ac8:	bf00      	nop
 8000aca:	3720      	adds	r7, #32
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	40021000 	.word	0x40021000
 8000ad4:	40010c00 	.word	0x40010c00
 8000ad8:	10210000 	.word	0x10210000
 8000adc:	40010800 	.word	0x40010800

08000ae0 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0

  hiwdg.Instance = IWDG;
 8000ae4:	4b0a      	ldr	r3, [pc, #40]	; (8000b10 <MX_IWDG_Init+0x30>)
 8000ae6:	4a0b      	ldr	r2, [pc, #44]	; (8000b14 <MX_IWDG_Init+0x34>)
 8000ae8:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 8000aea:	4b09      	ldr	r3, [pc, #36]	; (8000b10 <MX_IWDG_Init+0x30>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4095;
 8000af0:	4b07      	ldr	r3, [pc, #28]	; (8000b10 <MX_IWDG_Init+0x30>)
 8000af2:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000af6:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8000af8:	4805      	ldr	r0, [pc, #20]	; (8000b10 <MX_IWDG_Init+0x30>)
 8000afa:	f002 ff8a 	bl	8003a12 <HAL_IWDG_Init>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d003      	beq.n	8000b0c <MX_IWDG_Init+0x2c>
  {
    _Error_Handler(__FILE__, __LINE__);
 8000b04:	2126      	movs	r1, #38	; 0x26
 8000b06:	4804      	ldr	r0, [pc, #16]	; (8000b18 <MX_IWDG_Init+0x38>)
 8000b08:	f000 f950 	bl	8000dac <_Error_Handler>
  }

}
 8000b0c:	bf00      	nop
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	20000104 	.word	0x20000104
 8000b14:	40003000 	.word	0x40003000
 8000b18:	08006184 	.word	0x08006184

08000b1c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000b1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b1e:	b083      	sub	sp, #12
 8000b20:	af02      	add	r7, sp, #8
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 8000b22:	f001 f81f 	bl	8001b64 <HAL_Init>
    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 8000b26:	f000 f8e1 	bl	8000cec <SystemClock_Config>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 8000b2a:	f7ff ff75 	bl	8000a18 <MX_GPIO_Init>
    MX_DMA_Init();
 8000b2e:	f7ff ff4d 	bl	80009cc <MX_DMA_Init>
    MX_USART2_UART_Init();
 8000b32:	f000 fee5 	bl	8001900 <MX_USART2_UART_Init>
    MX_IWDG_Init();
 8000b36:	f7ff ffd3 	bl	8000ae0 <MX_IWDG_Init>
//  MX_I2C1_Init();
//  HAL_I2C_MspInit(&hi2c1);
    /* USER CODE BEGIN 2 */
    I2C_Init();
 8000b3a:	f000 fa5b 	bl	8000ff4 <I2C_Init>
    vIWDG_Init(&hiwdg, 5000);
 8000b3e:	f241 3188 	movw	r1, #5000	; 0x1388
 8000b42:	485c      	ldr	r0, [pc, #368]	; (8000cb4 <main+0x198>)
 8000b44:	f000 f9d4 	bl	8000ef0 <vIWDG_Init>
    __RETARGET_INIT(DEBUG_USART);
 8000b48:	485b      	ldr	r0, [pc, #364]	; (8000cb8 <main+0x19c>)
 8000b4a:	f000 fca7 	bl	800149c <RetargetInit>
    __PRINT_RESET_CAUSE();
 8000b4e:	f000 f93b 	bl	8000dc8 <resetCauseGet>
 8000b52:	4603      	mov	r3, r0
 8000b54:	4618      	mov	r0, r3
 8000b56:	f000 f97d 	bl	8000e54 <resetCauseGetName>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f004 fafd 	bl	800515c <iprintf>
 8000b62:	4856      	ldr	r0, [pc, #344]	; (8000cbc <main+0x1a0>)
 8000b64:	f004 fb6e 	bl	8005244 <puts>
    __MY_OFF_ALL_LED();
 8000b68:	2201      	movs	r2, #1
 8000b6a:	2120      	movs	r1, #32
 8000b6c:	4854      	ldr	r0, [pc, #336]	; (8000cc0 <main+0x1a4>)
 8000b6e:	f001 fc47 	bl	8002400 <HAL_GPIO_WritePin>
 8000b72:	2201      	movs	r2, #1
 8000b74:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b78:	4852      	ldr	r0, [pc, #328]	; (8000cc4 <main+0x1a8>)
 8000b7a:	f001 fc41 	bl	8002400 <HAL_GPIO_WritePin>
 8000b7e:	2201      	movs	r2, #1
 8000b80:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b84:	484f      	ldr	r0, [pc, #316]	; (8000cc4 <main+0x1a8>)
 8000b86:	f001 fc3b 	bl	8002400 <HAL_GPIO_WritePin>
 8000b8a:	2201      	movs	r2, #1
 8000b8c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b90:	484b      	ldr	r0, [pc, #300]	; (8000cc0 <main+0x1a4>)
 8000b92:	f001 fc35 	bl	8002400 <HAL_GPIO_WritePin>

    /* USER CODE END 2 */

    /* Infinite loop */
    /* USER CODE BEGIN WHILE */
    prev_time_blinkled = HAL_GetTick();
 8000b96:	f001 f80d 	bl	8001bb4 <HAL_GetTick>
 8000b9a:	4602      	mov	r2, r0
 8000b9c:	4b4a      	ldr	r3, [pc, #296]	; (8000cc8 <main+0x1ac>)
 8000b9e:	601a      	str	r2, [r3, #0]
    prev_time_read_sensor = HAL_GetTick();
 8000ba0:	f001 f808 	bl	8001bb4 <HAL_GetTick>
 8000ba4:	4602      	mov	r2, r0
 8000ba6:	4b49      	ldr	r3, [pc, #292]	; (8000ccc <main+0x1b0>)
 8000ba8:	601a      	str	r2, [r3, #0]
    while (1) {
        /* Task blink led 500ms */
        if (HAL_GetTick() - prev_time_blinkled >= BLINK_LED_FREQ) {
 8000baa:	f001 f803 	bl	8001bb4 <HAL_GetTick>
 8000bae:	4602      	mov	r2, r0
 8000bb0:	4b45      	ldr	r3, [pc, #276]	; (8000cc8 <main+0x1ac>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	1ad3      	subs	r3, r2, r3
 8000bb6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000bba:	d30f      	bcc.n	8000bdc <main+0xc0>
            prev_time_blinkled = HAL_GetTick();
 8000bbc:	f000 fffa 	bl	8001bb4 <HAL_GetTick>
 8000bc0:	4602      	mov	r2, r0
 8000bc2:	4b41      	ldr	r3, [pc, #260]	; (8000cc8 <main+0x1ac>)
 8000bc4:	601a      	str	r2, [r3, #0]
            __MY_TOGGLE_LED(LED_4);
 8000bc6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bca:	483d      	ldr	r0, [pc, #244]	; (8000cc0 <main+0x1a4>)
 8000bcc:	f001 fc30 	bl	8002430 <HAL_GPIO_TogglePin>
            vTimeStamp(HAL_GetTick());
 8000bd0:	f000 fff0 	bl	8001bb4 <HAL_GetTick>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f000 f9c2 	bl	8000f60 <vTimeStamp>
        }

        /* Task read sensor 1000ms */
        if (HAL_GetTick() - prev_time_read_sensor >= SHT3x_READ_FREQ) {
 8000bdc:	f000 ffea 	bl	8001bb4 <HAL_GetTick>
 8000be0:	4602      	mov	r2, r0
 8000be2:	4b3a      	ldr	r3, [pc, #232]	; (8000ccc <main+0x1b0>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	1ad3      	subs	r3, r2, r3
 8000be8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000bec:	d35d      	bcc.n	8000caa <main+0x18e>
            newline;
 8000bee:	4833      	ldr	r0, [pc, #204]	; (8000cbc <main+0x1a0>)
 8000bf0:	f004 fb28 	bl	8005244 <puts>
            prev_time_read_sensor = HAL_GetTick();
 8000bf4:	f000 ffde 	bl	8001bb4 <HAL_GetTick>
 8000bf8:	4602      	mov	r2, r0
 8000bfa:	4b34      	ldr	r3, [pc, #208]	; (8000ccc <main+0x1b0>)
 8000bfc:	601a      	str	r2, [r3, #0]
            __MY_TOGGLE_LED(LED_1);
 8000bfe:	2120      	movs	r1, #32
 8000c00:	482f      	ldr	r0, [pc, #188]	; (8000cc0 <main+0x1a4>)
 8000c02:	f001 fc15 	bl	8002430 <HAL_GPIO_TogglePin>

            /* SHT31 data read */
            I2C_Write(0x44 << 1, cmd[0], cmd[1]);
 8000c06:	4b32      	ldr	r3, [pc, #200]	; (8000cd0 <main+0x1b4>)
 8000c08:	7819      	ldrb	r1, [r3, #0]
 8000c0a:	4b31      	ldr	r3, [pc, #196]	; (8000cd0 <main+0x1b4>)
 8000c0c:	785b      	ldrb	r3, [r3, #1]
 8000c0e:	461a      	mov	r2, r3
 8000c10:	2088      	movs	r0, #136	; 0x88
 8000c12:	f000 fb9d 	bl	8001350 <I2C_Write>
            I2C_ReadMulti(0x44 << 1, 0x00, 6, sht3x_raw_data);
 8000c16:	4b2f      	ldr	r3, [pc, #188]	; (8000cd4 <main+0x1b8>)
 8000c18:	2206      	movs	r2, #6
 8000c1a:	2100      	movs	r1, #0
 8000c1c:	2088      	movs	r0, #136	; 0x88
 8000c1e:	f000 fbd3 	bl	80013c8 <I2C_ReadMulti>

            temp = (float) (((sht3x_raw_data[0] << 8)
 8000c22:	4b2c      	ldr	r3, [pc, #176]	; (8000cd4 <main+0x1b8>)
 8000c24:	781b      	ldrb	r3, [r3, #0]
 8000c26:	021b      	lsls	r3, r3, #8
                    | sht3x_raw_data[1]) * 175) / 65535 - 45;
 8000c28:	4a2a      	ldr	r2, [pc, #168]	; (8000cd4 <main+0x1b8>)
 8000c2a:	7852      	ldrb	r2, [r2, #1]
 8000c2c:	4313      	orrs	r3, r2
 8000c2e:	22af      	movs	r2, #175	; 0xaf
 8000c30:	fb02 f303 	mul.w	r3, r2, r3
            temp = (float) (((sht3x_raw_data[0] << 8)
 8000c34:	4618      	mov	r0, r3
 8000c36:	f7ff fcff 	bl	8000638 <__aeabi_i2f>
 8000c3a:	4603      	mov	r3, r0
                    | sht3x_raw_data[1]) * 175) / 65535 - 45;
 8000c3c:	4926      	ldr	r1, [pc, #152]	; (8000cd8 <main+0x1bc>)
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f7ff fe02 	bl	8000848 <__aeabi_fdiv>
 8000c44:	4603      	mov	r3, r0
 8000c46:	4925      	ldr	r1, [pc, #148]	; (8000cdc <main+0x1c0>)
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f7ff fc3f 	bl	80004cc <__aeabi_fsub>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	461a      	mov	r2, r3
            temp = (float) (((sht3x_raw_data[0] << 8)
 8000c52:	4b23      	ldr	r3, [pc, #140]	; (8000ce0 <main+0x1c4>)
 8000c54:	601a      	str	r2, [r3, #0]
            humid = (float) (((sht3x_raw_data[3] << 8)
 8000c56:	4b1f      	ldr	r3, [pc, #124]	; (8000cd4 <main+0x1b8>)
 8000c58:	78db      	ldrb	r3, [r3, #3]
 8000c5a:	021b      	lsls	r3, r3, #8
                    | sht3x_raw_data[4]) * 100) / 65535;
 8000c5c:	4a1d      	ldr	r2, [pc, #116]	; (8000cd4 <main+0x1b8>)
 8000c5e:	7912      	ldrb	r2, [r2, #4]
 8000c60:	4313      	orrs	r3, r2
 8000c62:	2264      	movs	r2, #100	; 0x64
 8000c64:	fb02 f303 	mul.w	r3, r2, r3
            humid = (float) (((sht3x_raw_data[3] << 8)
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f7ff fce5 	bl	8000638 <__aeabi_i2f>
 8000c6e:	4603      	mov	r3, r0
                    | sht3x_raw_data[4]) * 100) / 65535;
 8000c70:	4919      	ldr	r1, [pc, #100]	; (8000cd8 <main+0x1bc>)
 8000c72:	4618      	mov	r0, r3
 8000c74:	f7ff fde8 	bl	8000848 <__aeabi_fdiv>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	461a      	mov	r2, r3
            humid = (float) (((sht3x_raw_data[3] << 8)
 8000c7c:	4b19      	ldr	r3, [pc, #100]	; (8000ce4 <main+0x1c8>)
 8000c7e:	601a      	str	r2, [r3, #0]

            PRINTF("temp = %f\r\n humid = %f\r\n", temp, humid);
 8000c80:	4b17      	ldr	r3, [pc, #92]	; (8000ce0 <main+0x1c4>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4618      	mov	r0, r3
 8000c86:	f7ff fbc5 	bl	8000414 <__aeabi_f2d>
 8000c8a:	4605      	mov	r5, r0
 8000c8c:	460e      	mov	r6, r1
 8000c8e:	4b15      	ldr	r3, [pc, #84]	; (8000ce4 <main+0x1c8>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	4618      	mov	r0, r3
 8000c94:	f7ff fbbe 	bl	8000414 <__aeabi_f2d>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	460c      	mov	r4, r1
 8000c9c:	e9cd 3400 	strd	r3, r4, [sp]
 8000ca0:	462a      	mov	r2, r5
 8000ca2:	4633      	mov	r3, r6
 8000ca4:	4810      	ldr	r0, [pc, #64]	; (8000ce8 <main+0x1cc>)
 8000ca6:	f004 fa59 	bl	800515c <iprintf>
        }

        /* USER CODE END WHILE */
        /* USER CODE BEGIN 3 */

        HAL_IWDG_Refresh(&hiwdg);
 8000caa:	4802      	ldr	r0, [pc, #8]	; (8000cb4 <main+0x198>)
 8000cac:	f002 feea 	bl	8003a84 <HAL_IWDG_Refresh>
        if (HAL_GetTick() - prev_time_blinkled >= BLINK_LED_FREQ) {
 8000cb0:	e77b      	b.n	8000baa <main+0x8e>
 8000cb2:	bf00      	nop
 8000cb4:	20000104 	.word	0x20000104
 8000cb8:	200001f0 	.word	0x200001f0
 8000cbc:	08006198 	.word	0x08006198
 8000cc0:	40010c00 	.word	0x40010c00
 8000cc4:	40010800 	.word	0x40010800
 8000cc8:	20000090 	.word	0x20000090
 8000ccc:	20000094 	.word	0x20000094
 8000cd0:	20000000 	.word	0x20000000
 8000cd4:	2000011c 	.word	0x2000011c
 8000cd8:	477fff00 	.word	0x477fff00
 8000cdc:	42340000 	.word	0x42340000
 8000ce0:	20000098 	.word	0x20000098
 8000ce4:	2000009c 	.word	0x2000009c
 8000ce8:	0800619c 	.word	0x0800619c

08000cec <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b090      	sub	sp, #64	; 0x40
 8000cf0:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000cf2:	f107 0318 	add.w	r3, r7, #24
 8000cf6:	2228      	movs	r2, #40	; 0x28
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f004 fa26 	bl	800514c <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000d00:	1d3b      	adds	r3, r7, #4
 8000d02:	2200      	movs	r2, #0
 8000d04:	601a      	str	r2, [r3, #0]
 8000d06:	605a      	str	r2, [r3, #4]
 8000d08:	609a      	str	r2, [r3, #8]
 8000d0a:	60da      	str	r2, [r3, #12]
 8000d0c:	611a      	str	r2, [r3, #16]

    /** Initializes the RCC Oscillators according to the specified parameters
     * in the RCC_OscInitTypeDef structure.
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI
 8000d0e:	2309      	movs	r3, #9
 8000d10:	61bb      	str	r3, [r7, #24]
            | RCC_OSCILLATORTYPE_HSE;
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d12:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d16:	61fb      	str	r3, [r7, #28]
    RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	62bb      	str	r3, [r7, #40]	; 0x28
    RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000d20:	2301      	movs	r3, #1
 8000d22:	633b      	str	r3, [r7, #48]	; 0x30
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d24:	2302      	movs	r3, #2
 8000d26:	637b      	str	r3, [r7, #52]	; 0x34
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d28:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d2c:	63bb      	str	r3, [r7, #56]	; 0x38
    RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000d2e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000d32:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000d34:	f107 0318 	add.w	r3, r7, #24
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f002 feb3 	bl	8003aa4 <HAL_RCC_OscConfig>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d003      	beq.n	8000d4c <SystemClock_Config+0x60>
        _Error_Handler(__FILE__, __LINE__);
 8000d44:	21b7      	movs	r1, #183	; 0xb7
 8000d46:	480f      	ldr	r0, [pc, #60]	; (8000d84 <SystemClock_Config+0x98>)
 8000d48:	f000 f830 	bl	8000dac <_Error_Handler>
    }
    /** Initializes the CPU, AHB and APB buses clocks
     */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000d4c:	230f      	movs	r3, #15
 8000d4e:	607b      	str	r3, [r7, #4]
            | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d50:	2302      	movs	r3, #2
 8000d52:	60bb      	str	r3, [r7, #8]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d54:	2300      	movs	r3, #0
 8000d56:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d5c:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	617b      	str	r3, [r7, #20]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000d62:	1d3b      	adds	r3, r7, #4
 8000d64:	2102      	movs	r1, #2
 8000d66:	4618      	mov	r0, r3
 8000d68:	f003 f91c 	bl	8003fa4 <HAL_RCC_ClockConfig>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d003      	beq.n	8000d7a <SystemClock_Config+0x8e>
        _Error_Handler(__FILE__, __LINE__);
 8000d72:	21c3      	movs	r1, #195	; 0xc3
 8000d74:	4803      	ldr	r0, [pc, #12]	; (8000d84 <SystemClock_Config+0x98>)
 8000d76:	f000 f819 	bl	8000dac <_Error_Handler>
    }
}
 8000d7a:	bf00      	nop
 8000d7c:	3740      	adds	r7, #64	; 0x40
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	080061b8 	.word	0x080061b8

08000d88 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b082      	sub	sp, #8
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
    /* USER CODE BEGIN Callback 0 */

    /* USER CODE END Callback 0 */
    if (htim->Instance == TIM4) {
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a04      	ldr	r2, [pc, #16]	; (8000da8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d101      	bne.n	8000d9e <HAL_TIM_PeriodElapsedCallback+0x16>
        HAL_IncTick();
 8000d9a:	f000 fef9 	bl	8001b90 <HAL_IncTick>
    }
    /* USER CODE BEGIN Callback 1 */

    /* USER CODE END Callback 1 */
}
 8000d9e:	bf00      	nop
 8000da0:	3708      	adds	r7, #8
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	40000800 	.word	0x40000800

08000dac <_Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void _Error_Handler(char *file, int line) {
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
 8000db4:	6039      	str	r1, [r7, #0]
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    while (1) {
        PRINTF("\r\nError file %s line %d", file, line);
 8000db6:	683a      	ldr	r2, [r7, #0]
 8000db8:	6879      	ldr	r1, [r7, #4]
 8000dba:	4802      	ldr	r0, [pc, #8]	; (8000dc4 <_Error_Handler+0x18>)
 8000dbc:	f004 f9ce 	bl	800515c <iprintf>
 8000dc0:	e7f9      	b.n	8000db6 <_Error_Handler+0xa>
 8000dc2:	bf00      	nop
 8000dc4:	080061cc 	.word	0x080061cc

08000dc8 <resetCauseGet>:
	}
}
#endif /* !configLL_UART */

reset_cause_t resetCauseGet(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b083      	sub	sp, #12
 8000dcc:	af00      	add	r7, sp, #0
	reset_cause_t reset_cause;

	if (__HAL_RCC_GET_FLAG(RCC_FLAG_LPWRRST))
 8000dce:	4b1f      	ldr	r3, [pc, #124]	; (8000e4c <resetCauseGet+0x84>)
 8000dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	da02      	bge.n	8000ddc <resetCauseGet+0x14>
	{
		reset_cause = eRESET_CAUSE_LOW_POWER_RESET;
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	71fb      	strb	r3, [r7, #7]
 8000dda:	e02e      	b.n	8000e3a <resetCauseGet+0x72>
	}
	else if (__HAL_RCC_GET_FLAG(RCC_FLAG_WWDGRST))
 8000ddc:	4b1b      	ldr	r3, [pc, #108]	; (8000e4c <resetCauseGet+0x84>)
 8000dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000de0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d002      	beq.n	8000dee <resetCauseGet+0x26>
	{
		reset_cause = eRESET_CAUSE_WINDOW_WATCHDOG_RESET;
 8000de8:	2302      	movs	r3, #2
 8000dea:	71fb      	strb	r3, [r7, #7]
 8000dec:	e025      	b.n	8000e3a <resetCauseGet+0x72>
	}
	else if (__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST))
 8000dee:	4b17      	ldr	r3, [pc, #92]	; (8000e4c <resetCauseGet+0x84>)
 8000df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000df2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d002      	beq.n	8000e00 <resetCauseGet+0x38>
	{
		reset_cause = eRESET_CAUSE_INDEPENDENT_WATCHDOG_RESET;
 8000dfa:	2303      	movs	r3, #3
 8000dfc:	71fb      	strb	r3, [r7, #7]
 8000dfe:	e01c      	b.n	8000e3a <resetCauseGet+0x72>
	}
	else if (__HAL_RCC_GET_FLAG(RCC_FLAG_SFTRST))
 8000e00:	4b12      	ldr	r3, [pc, #72]	; (8000e4c <resetCauseGet+0x84>)
 8000e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d002      	beq.n	8000e12 <resetCauseGet+0x4a>
	{
		reset_cause = eRESET_CAUSE_SOFTWARE_RESET; // This reset is induced by calling the ARM CMSIS `NVIC_SystemReset()` function!
 8000e0c:	2304      	movs	r3, #4
 8000e0e:	71fb      	strb	r3, [r7, #7]
 8000e10:	e013      	b.n	8000e3a <resetCauseGet+0x72>
	}
	else if (__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST))
 8000e12:	4b0e      	ldr	r3, [pc, #56]	; (8000e4c <resetCauseGet+0x84>)
 8000e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e16:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d002      	beq.n	8000e24 <resetCauseGet+0x5c>
	{
		reset_cause = eRESET_CAUSE_POWER_ON_POWER_DOWN_RESET;
 8000e1e:	2305      	movs	r3, #5
 8000e20:	71fb      	strb	r3, [r7, #7]
 8000e22:	e00a      	b.n	8000e3a <resetCauseGet+0x72>
	}
	else if (__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST))
 8000e24:	4b09      	ldr	r3, [pc, #36]	; (8000e4c <resetCauseGet+0x84>)
 8000e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e28:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d002      	beq.n	8000e36 <resetCauseGet+0x6e>
	{
		reset_cause = eRESET_CAUSE_EXTERNAL_RESET_PIN_RESET;
 8000e30:	2306      	movs	r3, #6
 8000e32:	71fb      	strb	r3, [r7, #7]
 8000e34:	e001      	b.n	8000e3a <resetCauseGet+0x72>
     {
     reset_cause = eRESET_CAUSE_BROWNOUT_RESET;
     } */
	else
	{
		reset_cause = eRESET_CAUSE_UNKNOWN;
 8000e36:	2300      	movs	r3, #0
 8000e38:	71fb      	strb	r3, [r7, #7]
	}

	// Clear all the reset flags or else they will remain set during future resets until system power is fully removed.
	__HAL_RCC_CLEAR_RESET_FLAGS();
 8000e3a:	4b05      	ldr	r3, [pc, #20]	; (8000e50 <resetCauseGet+0x88>)
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	601a      	str	r2, [r3, #0]

	return reset_cause;
 8000e40:	79fb      	ldrb	r3, [r7, #7]
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	370c      	adds	r7, #12
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bc80      	pop	{r7}
 8000e4a:	4770      	bx	lr
 8000e4c:	40021000 	.word	0x40021000
 8000e50:	424204e0 	.word	0x424204e0

08000e54 <resetCauseGetName>:

const char *resetCauseGetName(reset_cause_t reset_cause)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b085      	sub	sp, #20
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	71fb      	strb	r3, [r7, #7]
	const char *reset_cause_name = "TBD";
 8000e5e:	4b1b      	ldr	r3, [pc, #108]	; (8000ecc <resetCauseGetName+0x78>)
 8000e60:	60fb      	str	r3, [r7, #12]

	switch (reset_cause)
 8000e62:	79fb      	ldrb	r3, [r7, #7]
 8000e64:	2b07      	cmp	r3, #7
 8000e66:	d82b      	bhi.n	8000ec0 <resetCauseGetName+0x6c>
 8000e68:	a201      	add	r2, pc, #4	; (adr r2, 8000e70 <resetCauseGetName+0x1c>)
 8000e6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e6e:	bf00      	nop
 8000e70:	08000e91 	.word	0x08000e91
 8000e74:	08000e97 	.word	0x08000e97
 8000e78:	08000e9d 	.word	0x08000e9d
 8000e7c:	08000ea3 	.word	0x08000ea3
 8000e80:	08000ea9 	.word	0x08000ea9
 8000e84:	08000eaf 	.word	0x08000eaf
 8000e88:	08000eb5 	.word	0x08000eb5
 8000e8c:	08000ebb 	.word	0x08000ebb
	{
	case eRESET_CAUSE_UNKNOWN:
		reset_cause_name = "UNKNOWN";
 8000e90:	4b0f      	ldr	r3, [pc, #60]	; (8000ed0 <resetCauseGetName+0x7c>)
 8000e92:	60fb      	str	r3, [r7, #12]
		break;
 8000e94:	e014      	b.n	8000ec0 <resetCauseGetName+0x6c>
	case eRESET_CAUSE_LOW_POWER_RESET:
		reset_cause_name = "LOW_POWER_RESET";
 8000e96:	4b0f      	ldr	r3, [pc, #60]	; (8000ed4 <resetCauseGetName+0x80>)
 8000e98:	60fb      	str	r3, [r7, #12]
		break;
 8000e9a:	e011      	b.n	8000ec0 <resetCauseGetName+0x6c>
	case eRESET_CAUSE_WINDOW_WATCHDOG_RESET:
		reset_cause_name = "WINDOW_WATCHDOG_RESET";
 8000e9c:	4b0e      	ldr	r3, [pc, #56]	; (8000ed8 <resetCauseGetName+0x84>)
 8000e9e:	60fb      	str	r3, [r7, #12]
		break;
 8000ea0:	e00e      	b.n	8000ec0 <resetCauseGetName+0x6c>
	case eRESET_CAUSE_INDEPENDENT_WATCHDOG_RESET:
		reset_cause_name = "INDEPENDENT_WATCHDOG_RESET";
 8000ea2:	4b0e      	ldr	r3, [pc, #56]	; (8000edc <resetCauseGetName+0x88>)
 8000ea4:	60fb      	str	r3, [r7, #12]
		break;
 8000ea6:	e00b      	b.n	8000ec0 <resetCauseGetName+0x6c>
	case eRESET_CAUSE_SOFTWARE_RESET:
		reset_cause_name = "SOFTWARE_RESET";
 8000ea8:	4b0d      	ldr	r3, [pc, #52]	; (8000ee0 <resetCauseGetName+0x8c>)
 8000eaa:	60fb      	str	r3, [r7, #12]
		break;
 8000eac:	e008      	b.n	8000ec0 <resetCauseGetName+0x6c>
	case eRESET_CAUSE_POWER_ON_POWER_DOWN_RESET:
		reset_cause_name = "POWER-ON_RESET (POR) / POWER-DOWN_RESET (PDR)";
 8000eae:	4b0d      	ldr	r3, [pc, #52]	; (8000ee4 <resetCauseGetName+0x90>)
 8000eb0:	60fb      	str	r3, [r7, #12]
		break;
 8000eb2:	e005      	b.n	8000ec0 <resetCauseGetName+0x6c>
	case eRESET_CAUSE_EXTERNAL_RESET_PIN_RESET:
		reset_cause_name = "EXTERNAL_RESET_PIN_RESET";
 8000eb4:	4b0c      	ldr	r3, [pc, #48]	; (8000ee8 <resetCauseGetName+0x94>)
 8000eb6:	60fb      	str	r3, [r7, #12]
		break;
 8000eb8:	e002      	b.n	8000ec0 <resetCauseGetName+0x6c>
	case eRESET_CAUSE_BROWNOUT_RESET:
		reset_cause_name = "BROWNOUT_RESET (BOR)";
 8000eba:	4b0c      	ldr	r3, [pc, #48]	; (8000eec <resetCauseGetName+0x98>)
 8000ebc:	60fb      	str	r3, [r7, #12]
		break;
 8000ebe:	bf00      	nop
	}
	return reset_cause_name;
 8000ec0:	68fb      	ldr	r3, [r7, #12]
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	3714      	adds	r7, #20
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bc80      	pop	{r7}
 8000eca:	4770      	bx	lr
 8000ecc:	080061e4 	.word	0x080061e4
 8000ed0:	080061e8 	.word	0x080061e8
 8000ed4:	080061f0 	.word	0x080061f0
 8000ed8:	08006200 	.word	0x08006200
 8000edc:	08006218 	.word	0x08006218
 8000ee0:	08006234 	.word	0x08006234
 8000ee4:	08006244 	.word	0x08006244
 8000ee8:	08006274 	.word	0x08006274
 8000eec:	08006290 	.word	0x08006290

08000ef0 <vIWDG_Init>:

void vIWDG_Init(IWDG_HandleTypeDef *hiwdg, uint32_t millis)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b084      	sub	sp, #16
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
 8000ef8:	6039      	str	r1, [r7, #0]
	uint32_t iwdg_timeout_millis = millis;
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	60fb      	str	r3, [r7, #12]

	/* Select INDEPENDENT_WATCHDOG */
	hiwdg->Instance = IWDG;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	4a13      	ldr	r2, [pc, #76]	; (8000f50 <vIWDG_Init+0x60>)
 8000f02:	601a      	str	r2, [r3, #0]
	/* Use prescaler LSI/128 */
	hiwdg->Init.Prescaler = IWDG_PRESCALER_128;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	2205      	movs	r2, #5
 8000f08:	605a      	str	r2, [r3, #4]
	hiwdg->Init.Reload = (int)(IWDG_RESOLUTION * ((float)iwdg_timeout_millis / PRESCALER_128_UPPER_LIMIT));
 8000f0a:	68f8      	ldr	r0, [r7, #12]
 8000f0c:	f7ff fb90 	bl	8000630 <__aeabi_ui2f>
 8000f10:	4603      	mov	r3, r0
 8000f12:	4910      	ldr	r1, [pc, #64]	; (8000f54 <vIWDG_Init+0x64>)
 8000f14:	4618      	mov	r0, r3
 8000f16:	f7ff fc97 	bl	8000848 <__aeabi_fdiv>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	490e      	ldr	r1, [pc, #56]	; (8000f58 <vIWDG_Init+0x68>)
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f7ff fbde 	bl	80006e0 <__aeabi_fmul>
 8000f24:	4603      	mov	r3, r0
 8000f26:	4618      	mov	r0, r3
 8000f28:	f7ff fd2a 	bl	8000980 <__aeabi_f2iz>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	461a      	mov	r2, r3
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	609a      	str	r2, [r3, #8]

	if (HAL_IWDG_Init(hiwdg) != HAL_OK)
 8000f34:	6878      	ldr	r0, [r7, #4]
 8000f36:	f002 fd6c 	bl	8003a12 <HAL_IWDG_Init>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d003      	beq.n	8000f48 <vIWDG_Init+0x58>
	{
		_Error_Handler(__FILE__, __LINE__);
 8000f40:	217f      	movs	r1, #127	; 0x7f
 8000f42:	4806      	ldr	r0, [pc, #24]	; (8000f5c <vIWDG_Init+0x6c>)
 8000f44:	f7ff ff32 	bl	8000dac <_Error_Handler>
	}
}
 8000f48:	bf00      	nop
 8000f4a:	3710      	adds	r7, #16
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	40003000 	.word	0x40003000
 8000f54:	464ccc00 	.word	0x464ccc00
 8000f58:	457ff000 	.word	0x457ff000
 8000f5c:	080062a8 	.word	0x080062a8

08000f60 <vTimeStamp>:
	}
	/* USER CODE END Error_Handler_Debug */
}

void vTimeStamp(uint32_t now_tick)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b088      	sub	sp, #32
 8000f64:	af02      	add	r7, sp, #8
 8000f66:	6078      	str	r0, [r7, #4]
	uint8_t second, minute, hour;
	uint32_t millis_second, now_second;

	/* ex: 450235ms => now_second = 450 */
	now_second = now_tick / 1000;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	4a1f      	ldr	r2, [pc, #124]	; (8000fe8 <vTimeStamp+0x88>)
 8000f6c:	fba2 2303 	umull	r2, r3, r2, r3
 8000f70:	099b      	lsrs	r3, r3, #6
 8000f72:	613b      	str	r3, [r7, #16]
	/* ex: 450235ms => millis_second = 235 */
	millis_second = now_tick - now_second * 1000;
 8000f74:	693b      	ldr	r3, [r7, #16]
 8000f76:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f7a:	fb02 f303 	mul.w	r3, r2, r3
 8000f7e:	687a      	ldr	r2, [r7, #4]
 8000f80:	1ad3      	subs	r3, r2, r3
 8000f82:	60fb      	str	r3, [r7, #12]
	/* ex: 450235ms => 450/60 = 7 */
	minute = now_second / 60;
 8000f84:	693b      	ldr	r3, [r7, #16]
 8000f86:	4a19      	ldr	r2, [pc, #100]	; (8000fec <vTimeStamp+0x8c>)
 8000f88:	fba2 2303 	umull	r2, r3, r2, r3
 8000f8c:	095b      	lsrs	r3, r3, #5
 8000f8e:	75fb      	strb	r3, [r7, #23]
	/* ex: 450235ms => 450 - 7*60 = 30 */
	second = now_second - minute * 60;
 8000f90:	693b      	ldr	r3, [r7, #16]
 8000f92:	b2da      	uxtb	r2, r3
 8000f94:	7dfb      	ldrb	r3, [r7, #23]
 8000f96:	4619      	mov	r1, r3
 8000f98:	0109      	lsls	r1, r1, #4
 8000f9a:	1acb      	subs	r3, r1, r3
 8000f9c:	009b      	lsls	r3, r3, #2
 8000f9e:	b2db      	uxtb	r3, r3
 8000fa0:	1ad3      	subs	r3, r2, r3
 8000fa2:	72fb      	strb	r3, [r7, #11]
	if (minute > 60)
 8000fa4:	7dfb      	ldrb	r3, [r7, #23]
 8000fa6:	2b3c      	cmp	r3, #60	; 0x3c
 8000fa8:	d90f      	bls.n	8000fca <vTimeStamp+0x6a>
	{
		hour = minute / 60;
 8000faa:	7dfb      	ldrb	r3, [r7, #23]
 8000fac:	4a0f      	ldr	r2, [pc, #60]	; (8000fec <vTimeStamp+0x8c>)
 8000fae:	fba2 2303 	umull	r2, r3, r2, r3
 8000fb2:	095b      	lsrs	r3, r3, #5
 8000fb4:	75bb      	strb	r3, [r7, #22]
		minute = minute - hour * 60;
 8000fb6:	7dbb      	ldrb	r3, [r7, #22]
 8000fb8:	461a      	mov	r2, r3
 8000fba:	011b      	lsls	r3, r3, #4
 8000fbc:	1ad3      	subs	r3, r2, r3
 8000fbe:	009b      	lsls	r3, r3, #2
 8000fc0:	b2da      	uxtb	r2, r3
 8000fc2:	7dfb      	ldrb	r3, [r7, #23]
 8000fc4:	4413      	add	r3, r2
 8000fc6:	75fb      	strb	r3, [r7, #23]
 8000fc8:	e001      	b.n	8000fce <vTimeStamp+0x6e>
	}
	else
	{
		hour = 0;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	75bb      	strb	r3, [r7, #22]
	}

#if (defined(PRINT_DEBUG))
	printf("[%02d:%02d:%02d.%03ld]\r\n", hour, minute, second, millis_second);
 8000fce:	7db9      	ldrb	r1, [r7, #22]
 8000fd0:	7dfa      	ldrb	r2, [r7, #23]
 8000fd2:	7af8      	ldrb	r0, [r7, #11]
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	9300      	str	r3, [sp, #0]
 8000fd8:	4603      	mov	r3, r0
 8000fda:	4805      	ldr	r0, [pc, #20]	; (8000ff0 <vTimeStamp+0x90>)
 8000fdc:	f004 f8be 	bl	800515c <iprintf>
#endif
	return;
 8000fe0:	bf00      	nop
}
 8000fe2:	3718      	adds	r7, #24
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	10624dd3 	.word	0x10624dd3
 8000fec:	88888889 	.word	0x88888889
 8000ff0:	080062d8 	.word	0x080062d8

08000ff4 <I2C_Init>:
#include "myI2C_2.h"

static void DelayMicroSeconds(uint32_t nbrOfUs); /* -- adapt this delay for your uC -- */

void I2C_Init(void) {
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b086      	sub	sp, #24
 8000ff8:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000ffa:	f107 0308 	add.w	r3, r7, #8
 8000ffe:	2200      	movs	r2, #0
 8001000:	601a      	str	r2, [r3, #0]
 8001002:	605a      	str	r2, [r3, #4]
 8001004:	609a      	str	r2, [r3, #8]
 8001006:	60da      	str	r2, [r3, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001008:	4b18      	ldr	r3, [pc, #96]	; (800106c <I2C_Init+0x78>)
 800100a:	699b      	ldr	r3, [r3, #24]
 800100c:	4a17      	ldr	r2, [pc, #92]	; (800106c <I2C_Init+0x78>)
 800100e:	f043 0308 	orr.w	r3, r3, #8
 8001012:	6193      	str	r3, [r2, #24]
 8001014:	4b15      	ldr	r3, [pc, #84]	; (800106c <I2C_Init+0x78>)
 8001016:	699b      	ldr	r3, [r3, #24]
 8001018:	f003 0308 	and.w	r3, r3, #8
 800101c:	607b      	str	r3, [r7, #4]
 800101e:	687b      	ldr	r3, [r7, #4]
    //	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8|GPIO_Pin_9;			    //LED0-->PB.5
    GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_7;
 8001020:	23c0      	movs	r3, #192	; 0xc0
 8001022:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001024:	2312      	movs	r3, #18
 8001026:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001028:	2303      	movs	r3, #3
 800102a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800102c:	f107 0308 	add.w	r3, r7, #8
 8001030:	4619      	mov	r1, r3
 8001032:	480f      	ldr	r0, [pc, #60]	; (8001070 <I2C_Init+0x7c>)
 8001034:	f001 f88a 	bl	800214c <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001038:	4b0c      	ldr	r3, [pc, #48]	; (800106c <I2C_Init+0x78>)
 800103a:	69db      	ldr	r3, [r3, #28]
 800103c:	4a0b      	ldr	r2, [pc, #44]	; (800106c <I2C_Init+0x78>)
 800103e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001042:	61d3      	str	r3, [r2, #28]
 8001044:	4b09      	ldr	r3, [pc, #36]	; (800106c <I2C_Init+0x78>)
 8001046:	69db      	ldr	r3, [r3, #28]
 8001048:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800104c:	603b      	str	r3, [r7, #0]
 800104e:	683b      	ldr	r3, [r7, #0]
    I2C_SCL_SET;
 8001050:	4b07      	ldr	r3, [pc, #28]	; (8001070 <I2C_Init+0x7c>)
 8001052:	2240      	movs	r2, #64	; 0x40
 8001054:	611a      	str	r2, [r3, #16]
    I2C_SDA_SET;
 8001056:	4b06      	ldr	r3, [pc, #24]	; (8001070 <I2C_Init+0x7c>)
 8001058:	691b      	ldr	r3, [r3, #16]
 800105a:	4a05      	ldr	r2, [pc, #20]	; (8001070 <I2C_Init+0x7c>)
 800105c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001060:	6113      	str	r3, [r2, #16]
}
 8001062:	bf00      	nop
 8001064:	3718      	adds	r7, #24
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	40021000 	.word	0x40021000
 8001070:	40010c00 	.word	0x40010c00

08001074 <I2C_Start>:

void I2C_Start(void) {
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
    I2C_SDA_OUT();
 8001078:	4b12      	ldr	r3, [pc, #72]	; (80010c4 <I2C_Start+0x50>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a11      	ldr	r2, [pc, #68]	; (80010c4 <I2C_Start+0x50>)
 800107e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001082:	6013      	str	r3, [r2, #0]
 8001084:	4b0f      	ldr	r3, [pc, #60]	; (80010c4 <I2C_Start+0x50>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a0e      	ldr	r2, [pc, #56]	; (80010c4 <I2C_Start+0x50>)
 800108a:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 800108e:	6013      	str	r3, [r2, #0]
    I2C_SCL_SET;
 8001090:	4b0c      	ldr	r3, [pc, #48]	; (80010c4 <I2C_Start+0x50>)
 8001092:	2240      	movs	r2, #64	; 0x40
 8001094:	611a      	str	r2, [r3, #16]
    I2C_SDA_SET;
 8001096:	4b0b      	ldr	r3, [pc, #44]	; (80010c4 <I2C_Start+0x50>)
 8001098:	691b      	ldr	r3, [r3, #16]
 800109a:	4a0a      	ldr	r2, [pc, #40]	; (80010c4 <I2C_Start+0x50>)
 800109c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010a0:	6113      	str	r3, [r2, #16]
    DelayMicroSeconds(4);
 80010a2:	2004      	movs	r0, #4
 80010a4:	f000 f9e2 	bl	800146c <DelayMicroSeconds>
    I2C_SDA_RESET;
 80010a8:	4b06      	ldr	r3, [pc, #24]	; (80010c4 <I2C_Start+0x50>)
 80010aa:	695b      	ldr	r3, [r3, #20]
 80010ac:	4a05      	ldr	r2, [pc, #20]	; (80010c4 <I2C_Start+0x50>)
 80010ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010b2:	6153      	str	r3, [r2, #20]
    DelayMicroSeconds(4);
 80010b4:	2004      	movs	r0, #4
 80010b6:	f000 f9d9 	bl	800146c <DelayMicroSeconds>
    I2C_SCL_RESET;
 80010ba:	4b02      	ldr	r3, [pc, #8]	; (80010c4 <I2C_Start+0x50>)
 80010bc:	2240      	movs	r2, #64	; 0x40
 80010be:	615a      	str	r2, [r3, #20]
}
 80010c0:	bf00      	nop
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	40010c00 	.word	0x40010c00

080010c8 <I2C_Stop>:

void I2C_Stop(void) {
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
    I2C_SDA_OUT();
 80010cc:	4b12      	ldr	r3, [pc, #72]	; (8001118 <I2C_Stop+0x50>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a11      	ldr	r2, [pc, #68]	; (8001118 <I2C_Stop+0x50>)
 80010d2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80010d6:	6013      	str	r3, [r2, #0]
 80010d8:	4b0f      	ldr	r3, [pc, #60]	; (8001118 <I2C_Stop+0x50>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a0e      	ldr	r2, [pc, #56]	; (8001118 <I2C_Stop+0x50>)
 80010de:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 80010e2:	6013      	str	r3, [r2, #0]
    I2C_SCL_RESET;
 80010e4:	4b0c      	ldr	r3, [pc, #48]	; (8001118 <I2C_Stop+0x50>)
 80010e6:	2240      	movs	r2, #64	; 0x40
 80010e8:	615a      	str	r2, [r3, #20]
    I2C_SDA_RESET;
 80010ea:	4b0b      	ldr	r3, [pc, #44]	; (8001118 <I2C_Stop+0x50>)
 80010ec:	695b      	ldr	r3, [r3, #20]
 80010ee:	4a0a      	ldr	r2, [pc, #40]	; (8001118 <I2C_Stop+0x50>)
 80010f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010f4:	6153      	str	r3, [r2, #20]
    DelayMicroSeconds(4);
 80010f6:	2004      	movs	r0, #4
 80010f8:	f000 f9b8 	bl	800146c <DelayMicroSeconds>
    I2C_SDA_SET;
 80010fc:	4b06      	ldr	r3, [pc, #24]	; (8001118 <I2C_Stop+0x50>)
 80010fe:	691b      	ldr	r3, [r3, #16]
 8001100:	4a05      	ldr	r2, [pc, #20]	; (8001118 <I2C_Stop+0x50>)
 8001102:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001106:	6113      	str	r3, [r2, #16]
    I2C_SCL_SET;
 8001108:	4b03      	ldr	r3, [pc, #12]	; (8001118 <I2C_Stop+0x50>)
 800110a:	2240      	movs	r2, #64	; 0x40
 800110c:	611a      	str	r2, [r3, #16]
    DelayMicroSeconds(4);
 800110e:	2004      	movs	r0, #4
 8001110:	f000 f9ac 	bl	800146c <DelayMicroSeconds>
}
 8001114:	bf00      	nop
 8001116:	bd80      	pop	{r7, pc}
 8001118:	40010c00 	.word	0x40010c00

0800111c <I2C_Send_Byte>:

void I2C_Send_Byte(uint8_t txd) { //11111111&10000000
 800111c:	b580      	push	{r7, lr}
 800111e:	b084      	sub	sp, #16
 8001120:	af00      	add	r7, sp, #0
 8001122:	4603      	mov	r3, r0
 8001124:	71fb      	strb	r3, [r7, #7]
    int i = 0;
 8001126:	2300      	movs	r3, #0
 8001128:	60fb      	str	r3, [r7, #12]
    I2C_SDA_OUT();
 800112a:	4b1f      	ldr	r3, [pc, #124]	; (80011a8 <I2C_Send_Byte+0x8c>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	4a1e      	ldr	r2, [pc, #120]	; (80011a8 <I2C_Send_Byte+0x8c>)
 8001130:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001134:	6013      	str	r3, [r2, #0]
 8001136:	4b1c      	ldr	r3, [pc, #112]	; (80011a8 <I2C_Send_Byte+0x8c>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	4a1b      	ldr	r2, [pc, #108]	; (80011a8 <I2C_Send_Byte+0x8c>)
 800113c:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 8001140:	6013      	str	r3, [r2, #0]
    I2C_SCL_RESET;
 8001142:	4b19      	ldr	r3, [pc, #100]	; (80011a8 <I2C_Send_Byte+0x8c>)
 8001144:	2240      	movs	r2, #64	; 0x40
 8001146:	615a      	str	r2, [r3, #20]
    for (i = 0; i < 8; i++) {
 8001148:	2300      	movs	r3, #0
 800114a:	60fb      	str	r3, [r7, #12]
 800114c:	e024      	b.n	8001198 <I2C_Send_Byte+0x7c>
        uint8_t send_bit = (txd & 0x80) >> 7;
 800114e:	79fb      	ldrb	r3, [r7, #7]
 8001150:	09db      	lsrs	r3, r3, #7
 8001152:	72fb      	strb	r3, [r7, #11]
        if(send_bit == 1){
 8001154:	7afb      	ldrb	r3, [r7, #11]
 8001156:	2b01      	cmp	r3, #1
 8001158:	d106      	bne.n	8001168 <I2C_Send_Byte+0x4c>
            I2C_SDA_SET;
 800115a:	4b13      	ldr	r3, [pc, #76]	; (80011a8 <I2C_Send_Byte+0x8c>)
 800115c:	691b      	ldr	r3, [r3, #16]
 800115e:	4a12      	ldr	r2, [pc, #72]	; (80011a8 <I2C_Send_Byte+0x8c>)
 8001160:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001164:	6113      	str	r3, [r2, #16]
 8001166:	e005      	b.n	8001174 <I2C_Send_Byte+0x58>
        }
        else{
            I2C_SDA_RESET;
 8001168:	4b0f      	ldr	r3, [pc, #60]	; (80011a8 <I2C_Send_Byte+0x8c>)
 800116a:	695b      	ldr	r3, [r3, #20]
 800116c:	4a0e      	ldr	r2, [pc, #56]	; (80011a8 <I2C_Send_Byte+0x8c>)
 800116e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001172:	6153      	str	r3, [r2, #20]
        }
        txd <<= 1;
 8001174:	79fb      	ldrb	r3, [r7, #7]
 8001176:	005b      	lsls	r3, r3, #1
 8001178:	71fb      	strb	r3, [r7, #7]
        DelayMicroSeconds(2);
 800117a:	2002      	movs	r0, #2
 800117c:	f000 f976 	bl	800146c <DelayMicroSeconds>
        I2C_SCL_SET;
 8001180:	4b09      	ldr	r3, [pc, #36]	; (80011a8 <I2C_Send_Byte+0x8c>)
 8001182:	2240      	movs	r2, #64	; 0x40
 8001184:	611a      	str	r2, [r3, #16]
        DelayMicroSeconds(2);
 8001186:	2002      	movs	r0, #2
 8001188:	f000 f970 	bl	800146c <DelayMicroSeconds>
        I2C_SCL_RESET;
 800118c:	4b06      	ldr	r3, [pc, #24]	; (80011a8 <I2C_Send_Byte+0x8c>)
 800118e:	2240      	movs	r2, #64	; 0x40
 8001190:	615a      	str	r2, [r3, #20]
    for (i = 0; i < 8; i++) {
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	3301      	adds	r3, #1
 8001196:	60fb      	str	r3, [r7, #12]
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	2b07      	cmp	r3, #7
 800119c:	ddd7      	ble.n	800114e <I2C_Send_Byte+0x32>
    }
}
 800119e:	bf00      	nop
 80011a0:	3710      	adds	r7, #16
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	40010c00 	.word	0x40010c00

080011ac <I2C_Ack>:

void I2C_Ack(void) {
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
    I2C_SCL_RESET;
 80011b0:	4b11      	ldr	r3, [pc, #68]	; (80011f8 <I2C_Ack+0x4c>)
 80011b2:	2240      	movs	r2, #64	; 0x40
 80011b4:	615a      	str	r2, [r3, #20]
    I2C_SDA_OUT();
 80011b6:	4b10      	ldr	r3, [pc, #64]	; (80011f8 <I2C_Ack+0x4c>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	4a0f      	ldr	r2, [pc, #60]	; (80011f8 <I2C_Ack+0x4c>)
 80011bc:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80011c0:	6013      	str	r3, [r2, #0]
 80011c2:	4b0d      	ldr	r3, [pc, #52]	; (80011f8 <I2C_Ack+0x4c>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4a0c      	ldr	r2, [pc, #48]	; (80011f8 <I2C_Ack+0x4c>)
 80011c8:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 80011cc:	6013      	str	r3, [r2, #0]
    I2C_SDA_RESET;
 80011ce:	4b0a      	ldr	r3, [pc, #40]	; (80011f8 <I2C_Ack+0x4c>)
 80011d0:	695b      	ldr	r3, [r3, #20]
 80011d2:	4a09      	ldr	r2, [pc, #36]	; (80011f8 <I2C_Ack+0x4c>)
 80011d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011d8:	6153      	str	r3, [r2, #20]
    DelayMicroSeconds(2);
 80011da:	2002      	movs	r0, #2
 80011dc:	f000 f946 	bl	800146c <DelayMicroSeconds>
    I2C_SCL_SET;
 80011e0:	4b05      	ldr	r3, [pc, #20]	; (80011f8 <I2C_Ack+0x4c>)
 80011e2:	2240      	movs	r2, #64	; 0x40
 80011e4:	611a      	str	r2, [r3, #16]
    DelayMicroSeconds(2);
 80011e6:	2002      	movs	r0, #2
 80011e8:	f000 f940 	bl	800146c <DelayMicroSeconds>
    I2C_SCL_RESET;
 80011ec:	4b02      	ldr	r3, [pc, #8]	; (80011f8 <I2C_Ack+0x4c>)
 80011ee:	2240      	movs	r2, #64	; 0x40
 80011f0:	615a      	str	r2, [r3, #20]
}
 80011f2:	bf00      	nop
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	40010c00 	.word	0x40010c00

080011fc <I2C_NAck>:

void I2C_NAck(void) {
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
    I2C_SCL_RESET;
 8001200:	4b11      	ldr	r3, [pc, #68]	; (8001248 <I2C_NAck+0x4c>)
 8001202:	2240      	movs	r2, #64	; 0x40
 8001204:	615a      	str	r2, [r3, #20]
    I2C_SDA_OUT();
 8001206:	4b10      	ldr	r3, [pc, #64]	; (8001248 <I2C_NAck+0x4c>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4a0f      	ldr	r2, [pc, #60]	; (8001248 <I2C_NAck+0x4c>)
 800120c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001210:	6013      	str	r3, [r2, #0]
 8001212:	4b0d      	ldr	r3, [pc, #52]	; (8001248 <I2C_NAck+0x4c>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4a0c      	ldr	r2, [pc, #48]	; (8001248 <I2C_NAck+0x4c>)
 8001218:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 800121c:	6013      	str	r3, [r2, #0]
    I2C_SDA_SET;
 800121e:	4b0a      	ldr	r3, [pc, #40]	; (8001248 <I2C_NAck+0x4c>)
 8001220:	691b      	ldr	r3, [r3, #16]
 8001222:	4a09      	ldr	r2, [pc, #36]	; (8001248 <I2C_NAck+0x4c>)
 8001224:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001228:	6113      	str	r3, [r2, #16]
    DelayMicroSeconds(2);
 800122a:	2002      	movs	r0, #2
 800122c:	f000 f91e 	bl	800146c <DelayMicroSeconds>
    I2C_SCL_SET;
 8001230:	4b05      	ldr	r3, [pc, #20]	; (8001248 <I2C_NAck+0x4c>)
 8001232:	2240      	movs	r2, #64	; 0x40
 8001234:	611a      	str	r2, [r3, #16]
    DelayMicroSeconds(2);
 8001236:	2002      	movs	r0, #2
 8001238:	f000 f918 	bl	800146c <DelayMicroSeconds>
    I2C_SCL_RESET;
 800123c:	4b02      	ldr	r3, [pc, #8]	; (8001248 <I2C_NAck+0x4c>)
 800123e:	2240      	movs	r2, #64	; 0x40
 8001240:	615a      	str	r2, [r3, #20]
}
 8001242:	bf00      	nop
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	40010c00 	.word	0x40010c00

0800124c <I2C_Read_Byte>:

uint8_t I2C_Read_Byte(unsigned char ack) {
 800124c:	b580      	push	{r7, lr}
 800124e:	b084      	sub	sp, #16
 8001250:	af00      	add	r7, sp, #0
 8001252:	4603      	mov	r3, r0
 8001254:	71fb      	strb	r3, [r7, #7]
    int i = 0;
 8001256:	2300      	movs	r3, #0
 8001258:	60fb      	str	r3, [r7, #12]
    uint8_t rec = 0;
 800125a:	2300      	movs	r3, #0
 800125c:	72fb      	strb	r3, [r7, #11]
    I2C_SDA_IN();
 800125e:	4b1d      	ldr	r3, [pc, #116]	; (80012d4 <I2C_Read_Byte+0x88>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4a1c      	ldr	r2, [pc, #112]	; (80012d4 <I2C_Read_Byte+0x88>)
 8001264:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001268:	6013      	str	r3, [r2, #0]
 800126a:	4b1a      	ldr	r3, [pc, #104]	; (80012d4 <I2C_Read_Byte+0x88>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4a19      	ldr	r2, [pc, #100]	; (80012d4 <I2C_Read_Byte+0x88>)
 8001270:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001274:	6013      	str	r3, [r2, #0]
    for (i = 0; i < 8; i++) { //11111111
 8001276:	2300      	movs	r3, #0
 8001278:	60fb      	str	r3, [r7, #12]
 800127a:	e01a      	b.n	80012b2 <I2C_Read_Byte+0x66>
        I2C_SCL_RESET;
 800127c:	4b15      	ldr	r3, [pc, #84]	; (80012d4 <I2C_Read_Byte+0x88>)
 800127e:	2240      	movs	r2, #64	; 0x40
 8001280:	615a      	str	r2, [r3, #20]
        DelayMicroSeconds(2);
 8001282:	2002      	movs	r0, #2
 8001284:	f000 f8f2 	bl	800146c <DelayMicroSeconds>
        I2C_SCL_SET;
 8001288:	4b12      	ldr	r3, [pc, #72]	; (80012d4 <I2C_Read_Byte+0x88>)
 800128a:	2240      	movs	r2, #64	; 0x40
 800128c:	611a      	str	r2, [r3, #16]
        DelayMicroSeconds(2);
 800128e:	2002      	movs	r0, #2
 8001290:	f000 f8ec 	bl	800146c <DelayMicroSeconds>
        rec <<= 1;
 8001294:	7afb      	ldrb	r3, [r7, #11]
 8001296:	005b      	lsls	r3, r3, #1
 8001298:	72fb      	strb	r3, [r7, #11]
        if (I2C_SDA_READ)
 800129a:	4b0e      	ldr	r3, [pc, #56]	; (80012d4 <I2C_Read_Byte+0x88>)
 800129c:	689b      	ldr	r3, [r3, #8]
 800129e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d002      	beq.n	80012ac <I2C_Read_Byte+0x60>
            rec++;
 80012a6:	7afb      	ldrb	r3, [r7, #11]
 80012a8:	3301      	adds	r3, #1
 80012aa:	72fb      	strb	r3, [r7, #11]
    for (i = 0; i < 8; i++) { //11111111
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	3301      	adds	r3, #1
 80012b0:	60fb      	str	r3, [r7, #12]
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	2b07      	cmp	r3, #7
 80012b6:	dde1      	ble.n	800127c <I2C_Read_Byte+0x30>
    }
    if (!ack) {
 80012b8:	79fb      	ldrb	r3, [r7, #7]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d102      	bne.n	80012c4 <I2C_Read_Byte+0x78>
        I2C_Ack();
 80012be:	f7ff ff75 	bl	80011ac <I2C_Ack>
 80012c2:	e001      	b.n	80012c8 <I2C_Read_Byte+0x7c>
    } else {
        I2C_NAck();
 80012c4:	f7ff ff9a 	bl	80011fc <I2C_NAck>
    }
    return rec;
 80012c8:	7afb      	ldrb	r3, [r7, #11]
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	3710      	adds	r7, #16
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	40010c00 	.word	0x40010c00

080012d8 <I2C_Wait_Ack>:

uint8_t I2C_Wait_Ack(void) {
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
    uint8_t time = 0;
 80012de:	2300      	movs	r3, #0
 80012e0:	71fb      	strb	r3, [r7, #7]
    I2C_SDA_IN();
 80012e2:	4b1a      	ldr	r3, [pc, #104]	; (800134c <I2C_Wait_Ack+0x74>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4a19      	ldr	r2, [pc, #100]	; (800134c <I2C_Wait_Ack+0x74>)
 80012e8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80012ec:	6013      	str	r3, [r2, #0]
 80012ee:	4b17      	ldr	r3, [pc, #92]	; (800134c <I2C_Wait_Ack+0x74>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4a16      	ldr	r2, [pc, #88]	; (800134c <I2C_Wait_Ack+0x74>)
 80012f4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80012f8:	6013      	str	r3, [r2, #0]
    I2C_SDA_SET;
 80012fa:	4b14      	ldr	r3, [pc, #80]	; (800134c <I2C_Wait_Ack+0x74>)
 80012fc:	691b      	ldr	r3, [r3, #16]
 80012fe:	4a13      	ldr	r2, [pc, #76]	; (800134c <I2C_Wait_Ack+0x74>)
 8001300:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001304:	6113      	str	r3, [r2, #16]
    DelayMicroSeconds(1);
 8001306:	2001      	movs	r0, #1
 8001308:	f000 f8b0 	bl	800146c <DelayMicroSeconds>
    I2C_SCL_SET;
 800130c:	4b0f      	ldr	r3, [pc, #60]	; (800134c <I2C_Wait_Ack+0x74>)
 800130e:	2240      	movs	r2, #64	; 0x40
 8001310:	611a      	str	r2, [r3, #16]
    DelayMicroSeconds(1);
 8001312:	2001      	movs	r0, #1
 8001314:	f000 f8aa 	bl	800146c <DelayMicroSeconds>
    while (I2C_SDA_READ) {
 8001318:	e009      	b.n	800132e <I2C_Wait_Ack+0x56>
        time++;
 800131a:	79fb      	ldrb	r3, [r7, #7]
 800131c:	3301      	adds	r3, #1
 800131e:	71fb      	strb	r3, [r7, #7]
        if (time > 250) {
 8001320:	79fb      	ldrb	r3, [r7, #7]
 8001322:	2bfa      	cmp	r3, #250	; 0xfa
 8001324:	d903      	bls.n	800132e <I2C_Wait_Ack+0x56>
            I2C_Stop();
 8001326:	f7ff fecf 	bl	80010c8 <I2C_Stop>
            return 1;
 800132a:	2301      	movs	r3, #1
 800132c:	e009      	b.n	8001342 <I2C_Wait_Ack+0x6a>
    while (I2C_SDA_READ) {
 800132e:	4b07      	ldr	r3, [pc, #28]	; (800134c <I2C_Wait_Ack+0x74>)
 8001330:	689b      	ldr	r3, [r3, #8]
 8001332:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001336:	2b00      	cmp	r3, #0
 8001338:	d1ef      	bne.n	800131a <I2C_Wait_Ack+0x42>
        }
    }
    I2C_SCL_RESET;
 800133a:	4b04      	ldr	r3, [pc, #16]	; (800134c <I2C_Wait_Ack+0x74>)
 800133c:	2240      	movs	r2, #64	; 0x40
 800133e:	615a      	str	r2, [r3, #20]
    return 0;
 8001340:	2300      	movs	r3, #0
}
 8001342:	4618      	mov	r0, r3
 8001344:	3708      	adds	r7, #8
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	40010c00 	.word	0x40010c00

08001350 <I2C_Write>:

    I2C_Stop();
    delay_ms(2);
}

uint8_t I2C_Write(uint8_t addr, uint8_t reg, uint8_t data) {
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
 8001356:	4603      	mov	r3, r0
 8001358:	71fb      	strb	r3, [r7, #7]
 800135a:	460b      	mov	r3, r1
 800135c:	71bb      	strb	r3, [r7, #6]
 800135e:	4613      	mov	r3, r2
 8001360:	717b      	strb	r3, [r7, #5]
    I2C_Start();
 8001362:	f7ff fe87 	bl	8001074 <I2C_Start>

    I2C_Send_Byte(addr | 0);
 8001366:	79fb      	ldrb	r3, [r7, #7]
 8001368:	4618      	mov	r0, r3
 800136a:	f7ff fed7 	bl	800111c <I2C_Send_Byte>
    if (I2C_Wait_Ack()) {
 800136e:	f7ff ffb3 	bl	80012d8 <I2C_Wait_Ack>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d003      	beq.n	8001380 <I2C_Write+0x30>
        I2C_Stop();
 8001378:	f7ff fea6 	bl	80010c8 <I2C_Stop>
        return 1;
 800137c:	2301      	movs	r3, #1
 800137e:	e01f      	b.n	80013c0 <I2C_Write+0x70>
    }
    I2C_Send_Byte(reg);
 8001380:	79bb      	ldrb	r3, [r7, #6]
 8001382:	4618      	mov	r0, r3
 8001384:	f7ff feca 	bl	800111c <I2C_Send_Byte>
    if (I2C_Wait_Ack()) {
 8001388:	f7ff ffa6 	bl	80012d8 <I2C_Wait_Ack>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d003      	beq.n	800139a <I2C_Write+0x4a>
        I2C_Stop();
 8001392:	f7ff fe99 	bl	80010c8 <I2C_Stop>
        return 1;
 8001396:	2301      	movs	r3, #1
 8001398:	e012      	b.n	80013c0 <I2C_Write+0x70>
    }
    I2C_Send_Byte(data);
 800139a:	797b      	ldrb	r3, [r7, #5]
 800139c:	4618      	mov	r0, r3
 800139e:	f7ff febd 	bl	800111c <I2C_Send_Byte>
    if (I2C_Wait_Ack()) {
 80013a2:	f7ff ff99 	bl	80012d8 <I2C_Wait_Ack>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d003      	beq.n	80013b4 <I2C_Write+0x64>
        I2C_Stop();
 80013ac:	f7ff fe8c 	bl	80010c8 <I2C_Stop>
        return 1;
 80013b0:	2301      	movs	r3, #1
 80013b2:	e005      	b.n	80013c0 <I2C_Write+0x70>
    }

    I2C_Stop();
 80013b4:	f7ff fe88 	bl	80010c8 <I2C_Stop>
    delay_ms(2);
 80013b8:	2002      	movs	r0, #2
 80013ba:	f000 fb7f 	bl	8001abc <delay_ms>
    return 0;
 80013be:	2300      	movs	r3, #0
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	3708      	adds	r7, #8
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}

080013c8 <I2C_ReadMulti>:
    I2C_Stop();
    delay_ms(2);
    return reg;
}

uint8_t I2C_ReadMulti(uint8_t addr, uint8_t reg, uint8_t len, uint8_t *buf) {
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	603b      	str	r3, [r7, #0]
 80013d0:	4603      	mov	r3, r0
 80013d2:	71fb      	strb	r3, [r7, #7]
 80013d4:	460b      	mov	r3, r1
 80013d6:	71bb      	strb	r3, [r7, #6]
 80013d8:	4613      	mov	r3, r2
 80013da:	717b      	strb	r3, [r7, #5]
    I2C_Start();
 80013dc:	f7ff fe4a 	bl	8001074 <I2C_Start>
    I2C_Send_Byte(addr | 0);
 80013e0:	79fb      	ldrb	r3, [r7, #7]
 80013e2:	4618      	mov	r0, r3
 80013e4:	f7ff fe9a 	bl	800111c <I2C_Send_Byte>
    while (I2C_Wait_Ack())
 80013e8:	bf00      	nop
 80013ea:	f7ff ff75 	bl	80012d8 <I2C_Wait_Ack>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d1fa      	bne.n	80013ea <I2C_ReadMulti+0x22>
        ;
    I2C_Send_Byte(reg);
 80013f4:	79bb      	ldrb	r3, [r7, #6]
 80013f6:	4618      	mov	r0, r3
 80013f8:	f7ff fe90 	bl	800111c <I2C_Send_Byte>
    while (I2C_Wait_Ack())
 80013fc:	bf00      	nop
 80013fe:	f7ff ff6b 	bl	80012d8 <I2C_Wait_Ack>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d1fa      	bne.n	80013fe <I2C_ReadMulti+0x36>
        ;

    I2C_Start();
 8001408:	f7ff fe34 	bl	8001074 <I2C_Start>
    I2C_Send_Byte(addr | 1);
 800140c:	79fb      	ldrb	r3, [r7, #7]
 800140e:	f043 0301 	orr.w	r3, r3, #1
 8001412:	b2db      	uxtb	r3, r3
 8001414:	4618      	mov	r0, r3
 8001416:	f7ff fe81 	bl	800111c <I2C_Send_Byte>
    while (I2C_Wait_Ack())
 800141a:	bf00      	nop
 800141c:	f7ff ff5c 	bl	80012d8 <I2C_Wait_Ack>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d1fa      	bne.n	800141c <I2C_ReadMulti+0x54>
        ;

    while (len) {
 8001426:	e017      	b.n	8001458 <I2C_ReadMulti+0x90>
        if (len == 1)
 8001428:	797b      	ldrb	r3, [r7, #5]
 800142a:	2b01      	cmp	r3, #1
 800142c:	d107      	bne.n	800143e <I2C_ReadMulti+0x76>
            *buf = I2C_Read_Byte(1);
 800142e:	2001      	movs	r0, #1
 8001430:	f7ff ff0c 	bl	800124c <I2C_Read_Byte>
 8001434:	4603      	mov	r3, r0
 8001436:	461a      	mov	r2, r3
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	701a      	strb	r2, [r3, #0]
 800143c:	e006      	b.n	800144c <I2C_ReadMulti+0x84>
        else
            *buf = I2C_Read_Byte(0);
 800143e:	2000      	movs	r0, #0
 8001440:	f7ff ff04 	bl	800124c <I2C_Read_Byte>
 8001444:	4603      	mov	r3, r0
 8001446:	461a      	mov	r2, r3
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	701a      	strb	r2, [r3, #0]
        len--;
 800144c:	797b      	ldrb	r3, [r7, #5]
 800144e:	3b01      	subs	r3, #1
 8001450:	717b      	strb	r3, [r7, #5]
        buf++;
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	3301      	adds	r3, #1
 8001456:	603b      	str	r3, [r7, #0]
    while (len) {
 8001458:	797b      	ldrb	r3, [r7, #5]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d1e4      	bne.n	8001428 <I2C_ReadMulti+0x60>
    }

    I2C_Stop();
 800145e:	f7ff fe33 	bl	80010c8 <I2C_Stop>
    return 0;
 8001462:	2300      	movs	r3, #0
}
 8001464:	4618      	mov	r0, r3
 8001466:	3708      	adds	r7, #8
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}

0800146c <DelayMicroSeconds>:
    I2C_Stop();
    return 0;
}

static void DelayMicroSeconds(uint32_t nbrOfUs) /* -- adapt this delay for your uC -- */
{
 800146c:	b480      	push	{r7}
 800146e:	b085      	sub	sp, #20
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
    uint32_t i;
    for (i = 0; i < nbrOfUs; i++) {
 8001474:	2300      	movs	r3, #0
 8001476:	60fb      	str	r3, [r7, #12]
 8001478:	e006      	b.n	8001488 <DelayMicroSeconds+0x1c>
        __NOP(); // nop's may be added or removed for timing adjustment
 800147a:	bf00      	nop
        __NOP();
 800147c:	bf00      	nop
        __NOP();
 800147e:	bf00      	nop
        __NOP();
 8001480:	bf00      	nop
    for (i = 0; i < nbrOfUs; i++) {
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	3301      	adds	r3, #1
 8001486:	60fb      	str	r3, [r7, #12]
 8001488:	68fa      	ldr	r2, [r7, #12]
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	429a      	cmp	r2, r3
 800148e:	d3f4      	bcc.n	800147a <DelayMicroSeconds+0xe>
    }
}
 8001490:	bf00      	nop
 8001492:	3714      	adds	r7, #20
 8001494:	46bd      	mov	sp, r7
 8001496:	bc80      	pop	{r7}
 8001498:	4770      	bx	lr
	...

0800149c <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 80014a4:	4a07      	ldr	r2, [pc, #28]	; (80014c4 <RetargetInit+0x28>)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 80014aa:	4b07      	ldr	r3, [pc, #28]	; (80014c8 <RetargetInit+0x2c>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	6898      	ldr	r0, [r3, #8]
 80014b0:	2300      	movs	r3, #0
 80014b2:	2202      	movs	r2, #2
 80014b4:	2100      	movs	r1, #0
 80014b6:	f003 fecd 	bl	8005254 <setvbuf>
}
 80014ba:	bf00      	nop
 80014bc:	3708      	adds	r7, #8
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	20000124 	.word	0x20000124
 80014c8:	20000010 	.word	0x20000010

080014cc <_isatty>:

int _isatty(int fd) {
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	db04      	blt.n	80014e4 <_isatty+0x18>
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2b02      	cmp	r3, #2
 80014de:	dc01      	bgt.n	80014e4 <_isatty+0x18>
    return 1;
 80014e0:	2301      	movs	r3, #1
 80014e2:	e005      	b.n	80014f0 <_isatty+0x24>

  errno = EBADF;
 80014e4:	f003 fe08 	bl	80050f8 <__errno>
 80014e8:	4602      	mov	r2, r0
 80014ea:	2309      	movs	r3, #9
 80014ec:	6013      	str	r3, [r2, #0]
  return 0;
 80014ee:	2300      	movs	r3, #0
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	3708      	adds	r7, #8
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}

080014f8 <_write>:

int _write(int fd, char* ptr, int len) {
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b086      	sub	sp, #24
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	60f8      	str	r0, [r7, #12]
 8001500:	60b9      	str	r1, [r7, #8]
 8001502:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	2b01      	cmp	r3, #1
 8001508:	d002      	beq.n	8001510 <_write+0x18>
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	2b02      	cmp	r3, #2
 800150e:	d111      	bne.n	8001534 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8001510:	4b0e      	ldr	r3, [pc, #56]	; (800154c <_write+0x54>)
 8001512:	6818      	ldr	r0, [r3, #0]
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	b29a      	uxth	r2, r3
 8001518:	f04f 33ff 	mov.w	r3, #4294967295
 800151c:	68b9      	ldr	r1, [r7, #8]
 800151e:	f003 f952 	bl	80047c6 <HAL_UART_Transmit>
 8001522:	4603      	mov	r3, r0
 8001524:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8001526:	7dfb      	ldrb	r3, [r7, #23]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d101      	bne.n	8001530 <_write+0x38>
      return len;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	e008      	b.n	8001542 <_write+0x4a>
    else
      return EIO;
 8001530:	2305      	movs	r3, #5
 8001532:	e006      	b.n	8001542 <_write+0x4a>
  }
  errno = EBADF;
 8001534:	f003 fde0 	bl	80050f8 <__errno>
 8001538:	4602      	mov	r2, r0
 800153a:	2309      	movs	r3, #9
 800153c:	6013      	str	r3, [r2, #0]
  return -1;
 800153e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001542:	4618      	mov	r0, r3
 8001544:	3718      	adds	r7, #24
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	20000124 	.word	0x20000124

08001550 <_close>:

int _close(int fd) {
 8001550:	b580      	push	{r7, lr}
 8001552:	b082      	sub	sp, #8
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2b00      	cmp	r3, #0
 800155c:	db04      	blt.n	8001568 <_close+0x18>
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2b02      	cmp	r3, #2
 8001562:	dc01      	bgt.n	8001568 <_close+0x18>
    return 0;
 8001564:	2300      	movs	r3, #0
 8001566:	e006      	b.n	8001576 <_close+0x26>

  errno = EBADF;
 8001568:	f003 fdc6 	bl	80050f8 <__errno>
 800156c:	4602      	mov	r2, r0
 800156e:	2309      	movs	r3, #9
 8001570:	6013      	str	r3, [r2, #0]
  return -1;
 8001572:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001576:	4618      	mov	r0, r3
 8001578:	3708      	adds	r7, #8
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}

0800157e <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 800157e:	b580      	push	{r7, lr}
 8001580:	b084      	sub	sp, #16
 8001582:	af00      	add	r7, sp, #0
 8001584:	60f8      	str	r0, [r7, #12]
 8001586:	60b9      	str	r1, [r7, #8]
 8001588:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 800158a:	f003 fdb5 	bl	80050f8 <__errno>
 800158e:	4602      	mov	r2, r0
 8001590:	2309      	movs	r3, #9
 8001592:	6013      	str	r3, [r2, #0]
  return -1;
 8001594:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001598:	4618      	mov	r0, r3
 800159a:	3710      	adds	r7, #16
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}

080015a0 <_read>:

int _read(int fd, char* ptr, int len) {
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b086      	sub	sp, #24
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	60f8      	str	r0, [r7, #12]
 80015a8:	60b9      	str	r1, [r7, #8]
 80015aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d110      	bne.n	80015d4 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 80015b2:	4b0e      	ldr	r3, [pc, #56]	; (80015ec <_read+0x4c>)
 80015b4:	6818      	ldr	r0, [r3, #0]
 80015b6:	f04f 33ff 	mov.w	r3, #4294967295
 80015ba:	2201      	movs	r2, #1
 80015bc:	68b9      	ldr	r1, [r7, #8]
 80015be:	f003 f99b 	bl	80048f8 <HAL_UART_Receive>
 80015c2:	4603      	mov	r3, r0
 80015c4:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 80015c6:	7dfb      	ldrb	r3, [r7, #23]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d101      	bne.n	80015d0 <_read+0x30>
      return 1;
 80015cc:	2301      	movs	r3, #1
 80015ce:	e008      	b.n	80015e2 <_read+0x42>
    else
      return EIO;
 80015d0:	2305      	movs	r3, #5
 80015d2:	e006      	b.n	80015e2 <_read+0x42>
  }
  errno = EBADF;
 80015d4:	f003 fd90 	bl	80050f8 <__errno>
 80015d8:	4602      	mov	r2, r0
 80015da:	2309      	movs	r3, #9
 80015dc:	6013      	str	r3, [r2, #0]
  return -1;
 80015de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	3718      	adds	r7, #24
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	20000124 	.word	0x20000124

080015f0 <_fstat>:

int _fstat(int fd, struct stat* st) {
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
 80015f8:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	db08      	blt.n	8001612 <_fstat+0x22>
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2b02      	cmp	r3, #2
 8001604:	dc05      	bgt.n	8001612 <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800160c:	605a      	str	r2, [r3, #4]
    return 0;
 800160e:	2300      	movs	r3, #0
 8001610:	e005      	b.n	800161e <_fstat+0x2e>
  }

  errno = EBADF;
 8001612:	f003 fd71 	bl	80050f8 <__errno>
 8001616:	4602      	mov	r2, r0
 8001618:	2309      	movs	r3, #9
 800161a:	6013      	str	r3, [r2, #0]
  return 0;
 800161c:	2300      	movs	r3, #0
}
 800161e:	4618      	mov	r0, r3
 8001620:	3708      	adds	r7, #8
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
	...

08001628 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b084      	sub	sp, #16
 800162c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800162e:	4b19      	ldr	r3, [pc, #100]	; (8001694 <HAL_MspInit+0x6c>)
 8001630:	699b      	ldr	r3, [r3, #24]
 8001632:	4a18      	ldr	r2, [pc, #96]	; (8001694 <HAL_MspInit+0x6c>)
 8001634:	f043 0301 	orr.w	r3, r3, #1
 8001638:	6193      	str	r3, [r2, #24]
 800163a:	4b16      	ldr	r3, [pc, #88]	; (8001694 <HAL_MspInit+0x6c>)
 800163c:	699b      	ldr	r3, [r3, #24]
 800163e:	f003 0301 	and.w	r3, r3, #1
 8001642:	60bb      	str	r3, [r7, #8]
 8001644:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001646:	4b13      	ldr	r3, [pc, #76]	; (8001694 <HAL_MspInit+0x6c>)
 8001648:	69db      	ldr	r3, [r3, #28]
 800164a:	4a12      	ldr	r2, [pc, #72]	; (8001694 <HAL_MspInit+0x6c>)
 800164c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001650:	61d3      	str	r3, [r2, #28]
 8001652:	4b10      	ldr	r3, [pc, #64]	; (8001694 <HAL_MspInit+0x6c>)
 8001654:	69db      	ldr	r3, [r3, #28]
 8001656:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800165a:	607b      	str	r3, [r7, #4]
 800165c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 800165e:	2200      	movs	r2, #0
 8001660:	2100      	movs	r1, #0
 8001662:	2005      	movs	r0, #5
 8001664:	f000 fb65 	bl	8001d32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001668:	2005      	movs	r0, #5
 800166a:	f000 fb7e 	bl	8001d6a <HAL_NVIC_EnableIRQ>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800166e:	4b0a      	ldr	r3, [pc, #40]	; (8001698 <HAL_MspInit+0x70>)
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	60fb      	str	r3, [r7, #12]
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800167a:	60fb      	str	r3, [r7, #12]
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001682:	60fb      	str	r3, [r7, #12]
 8001684:	4a04      	ldr	r2, [pc, #16]	; (8001698 <HAL_MspInit+0x70>)
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800168a:	bf00      	nop
 800168c:	3710      	adds	r7, #16
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	40021000 	.word	0x40021000
 8001698:	40010000 	.word	0x40010000

0800169c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b08c      	sub	sp, #48	; 0x30
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80016a4:	2300      	movs	r3, #0
 80016a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80016a8:	2300      	movs	r3, #0
 80016aa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 80016ac:	2200      	movs	r2, #0
 80016ae:	6879      	ldr	r1, [r7, #4]
 80016b0:	201e      	movs	r0, #30
 80016b2:	f000 fb3e 	bl	8001d32 <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80016b6:	201e      	movs	r0, #30
 80016b8:	f000 fb57 	bl	8001d6a <HAL_NVIC_EnableIRQ>
  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 80016bc:	4b1f      	ldr	r3, [pc, #124]	; (800173c <HAL_InitTick+0xa0>)
 80016be:	69db      	ldr	r3, [r3, #28]
 80016c0:	4a1e      	ldr	r2, [pc, #120]	; (800173c <HAL_InitTick+0xa0>)
 80016c2:	f043 0304 	orr.w	r3, r3, #4
 80016c6:	61d3      	str	r3, [r2, #28]
 80016c8:	4b1c      	ldr	r3, [pc, #112]	; (800173c <HAL_InitTick+0xa0>)
 80016ca:	69db      	ldr	r3, [r3, #28]
 80016cc:	f003 0304 	and.w	r3, r3, #4
 80016d0:	60fb      	str	r3, [r7, #12]
 80016d2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80016d4:	f107 0210 	add.w	r2, r7, #16
 80016d8:	f107 0314 	add.w	r3, r7, #20
 80016dc:	4611      	mov	r1, r2
 80016de:	4618      	mov	r0, r3
 80016e0:	f002 fdde 	bl	80042a0 <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80016e4:	f002 fdb4 	bl	8004250 <HAL_RCC_GetPCLK1Freq>
 80016e8:	4603      	mov	r3, r0
 80016ea:	005b      	lsls	r3, r3, #1
 80016ec:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80016ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016f0:	4a13      	ldr	r2, [pc, #76]	; (8001740 <HAL_InitTick+0xa4>)
 80016f2:	fba2 2303 	umull	r2, r3, r2, r3
 80016f6:	0c9b      	lsrs	r3, r3, #18
 80016f8:	3b01      	subs	r3, #1
 80016fa:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 80016fc:	4b11      	ldr	r3, [pc, #68]	; (8001744 <HAL_InitTick+0xa8>)
 80016fe:	4a12      	ldr	r2, [pc, #72]	; (8001748 <HAL_InitTick+0xac>)
 8001700:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000 / 1000) - 1;
 8001702:	4b10      	ldr	r3, [pc, #64]	; (8001744 <HAL_InitTick+0xa8>)
 8001704:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001708:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 800170a:	4a0e      	ldr	r2, [pc, #56]	; (8001744 <HAL_InitTick+0xa8>)
 800170c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800170e:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8001710:	4b0c      	ldr	r3, [pc, #48]	; (8001744 <HAL_InitTick+0xa8>)
 8001712:	2200      	movs	r2, #0
 8001714:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001716:	4b0b      	ldr	r3, [pc, #44]	; (8001744 <HAL_InitTick+0xa8>)
 8001718:	2200      	movs	r2, #0
 800171a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 800171c:	4809      	ldr	r0, [pc, #36]	; (8001744 <HAL_InitTick+0xa8>)
 800171e:	f002 fe0d 	bl	800433c <HAL_TIM_Base_Init>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d104      	bne.n	8001732 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 8001728:	4806      	ldr	r0, [pc, #24]	; (8001744 <HAL_InitTick+0xa8>)
 800172a:	f002 fe3b 	bl	80043a4 <HAL_TIM_Base_Start_IT>
 800172e:	4603      	mov	r3, r0
 8001730:	e000      	b.n	8001734 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8001732:	2301      	movs	r3, #1
}
 8001734:	4618      	mov	r0, r3
 8001736:	3730      	adds	r7, #48	; 0x30
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	40021000 	.word	0x40021000
 8001740:	431bde83 	.word	0x431bde83
 8001744:	20000128 	.word	0x20000128
 8001748:	40000800 	.word	0x40000800

0800174c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001750:	bf00      	nop
 8001752:	46bd      	mov	sp, r7
 8001754:	bc80      	pop	{r7}
 8001756:	4770      	bx	lr

08001758 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800175c:	e7fe      	b.n	800175c <HardFault_Handler+0x4>

0800175e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800175e:	b480      	push	{r7}
 8001760:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001762:	e7fe      	b.n	8001762 <MemManage_Handler+0x4>

08001764 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001768:	e7fe      	b.n	8001768 <BusFault_Handler+0x4>

0800176a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800176a:	b480      	push	{r7}
 800176c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800176e:	e7fe      	b.n	800176e <UsageFault_Handler+0x4>

08001770 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001774:	bf00      	nop
 8001776:	46bd      	mov	sp, r7
 8001778:	bc80      	pop	{r7}
 800177a:	4770      	bx	lr

0800177c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001780:	bf00      	nop
 8001782:	46bd      	mov	sp, r7
 8001784:	bc80      	pop	{r7}
 8001786:	4770      	bx	lr

08001788 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800178c:	bf00      	nop
 800178e:	46bd      	mov	sp, r7
 8001790:	bc80      	pop	{r7}
 8001792:	4770      	bx	lr

08001794 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001798:	bf00      	nop
 800179a:	46bd      	mov	sp, r7
 800179c:	bc80      	pop	{r7}
 800179e:	4770      	bx	lr

080017a0 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80017a4:	bf00      	nop
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bc80      	pop	{r7}
 80017aa:	4770      	bx	lr

080017ac <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80017b0:	4802      	ldr	r0, [pc, #8]	; (80017bc <DMA1_Channel6_IRQHandler+0x10>)
 80017b2:	f000 fbb9 	bl	8001f28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80017b6:	bf00      	nop
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	20000168 	.word	0x20000168

080017c0 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80017c4:	4802      	ldr	r0, [pc, #8]	; (80017d0 <DMA1_Channel7_IRQHandler+0x10>)
 80017c6:	f000 fbaf 	bl	8001f28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 80017ca:	bf00      	nop
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	200001ac 	.word	0x200001ac

080017d4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80017d8:	2040      	movs	r0, #64	; 0x40
 80017da:	f000 fe41 	bl	8002460 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80017de:	2080      	movs	r0, #128	; 0x80
 80017e0:	f000 fe3e 	bl	8002460 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80017e4:	f44f 7080 	mov.w	r0, #256	; 0x100
 80017e8:	f000 fe3a 	bl	8002460 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80017ec:	bf00      	nop
 80017ee:	bd80      	pop	{r7, pc}

080017f0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80017f4:	4802      	ldr	r0, [pc, #8]	; (8001800 <TIM4_IRQHandler+0x10>)
 80017f6:	f002 fdf8 	bl	80043ea <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80017fa:	bf00      	nop
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	20000128 	.word	0x20000128

08001804 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001808:	4802      	ldr	r0, [pc, #8]	; (8001814 <I2C1_EV_IRQHandler+0x10>)
 800180a:	f000 fe4b 	bl	80024a4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800180e:	bf00      	nop
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	200000b0 	.word	0x200000b0

08001818 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800181c:	4802      	ldr	r0, [pc, #8]	; (8001828 <USART2_IRQHandler+0x10>)
 800181e:	f003 f911 	bl	8004a44 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001822:	bf00      	nop
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	200001f0 	.word	0x200001f0

0800182c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b086      	sub	sp, #24
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001834:	4a14      	ldr	r2, [pc, #80]	; (8001888 <_sbrk+0x5c>)
 8001836:	4b15      	ldr	r3, [pc, #84]	; (800188c <_sbrk+0x60>)
 8001838:	1ad3      	subs	r3, r2, r3
 800183a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001840:	4b13      	ldr	r3, [pc, #76]	; (8001890 <_sbrk+0x64>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d102      	bne.n	800184e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001848:	4b11      	ldr	r3, [pc, #68]	; (8001890 <_sbrk+0x64>)
 800184a:	4a12      	ldr	r2, [pc, #72]	; (8001894 <_sbrk+0x68>)
 800184c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800184e:	4b10      	ldr	r3, [pc, #64]	; (8001890 <_sbrk+0x64>)
 8001850:	681a      	ldr	r2, [r3, #0]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	4413      	add	r3, r2
 8001856:	693a      	ldr	r2, [r7, #16]
 8001858:	429a      	cmp	r2, r3
 800185a:	d207      	bcs.n	800186c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800185c:	f003 fc4c 	bl	80050f8 <__errno>
 8001860:	4602      	mov	r2, r0
 8001862:	230c      	movs	r3, #12
 8001864:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001866:	f04f 33ff 	mov.w	r3, #4294967295
 800186a:	e009      	b.n	8001880 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800186c:	4b08      	ldr	r3, [pc, #32]	; (8001890 <_sbrk+0x64>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001872:	4b07      	ldr	r3, [pc, #28]	; (8001890 <_sbrk+0x64>)
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	4413      	add	r3, r2
 800187a:	4a05      	ldr	r2, [pc, #20]	; (8001890 <_sbrk+0x64>)
 800187c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800187e:	68fb      	ldr	r3, [r7, #12]
}
 8001880:	4618      	mov	r0, r3
 8001882:	3718      	adds	r7, #24
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}
 8001888:	20005000 	.word	0x20005000
 800188c:	00000400 	.word	0x00000400
 8001890:	200000a0 	.word	0x200000a0
 8001894:	20000238 	.word	0x20000238

08001898 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800189c:	4b15      	ldr	r3, [pc, #84]	; (80018f4 <SystemInit+0x5c>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a14      	ldr	r2, [pc, #80]	; (80018f4 <SystemInit+0x5c>)
 80018a2:	f043 0301 	orr.w	r3, r3, #1
 80018a6:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80018a8:	4b12      	ldr	r3, [pc, #72]	; (80018f4 <SystemInit+0x5c>)
 80018aa:	685a      	ldr	r2, [r3, #4]
 80018ac:	4911      	ldr	r1, [pc, #68]	; (80018f4 <SystemInit+0x5c>)
 80018ae:	4b12      	ldr	r3, [pc, #72]	; (80018f8 <SystemInit+0x60>)
 80018b0:	4013      	ands	r3, r2
 80018b2:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80018b4:	4b0f      	ldr	r3, [pc, #60]	; (80018f4 <SystemInit+0x5c>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a0e      	ldr	r2, [pc, #56]	; (80018f4 <SystemInit+0x5c>)
 80018ba:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80018be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018c2:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80018c4:	4b0b      	ldr	r3, [pc, #44]	; (80018f4 <SystemInit+0x5c>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a0a      	ldr	r2, [pc, #40]	; (80018f4 <SystemInit+0x5c>)
 80018ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018ce:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80018d0:	4b08      	ldr	r3, [pc, #32]	; (80018f4 <SystemInit+0x5c>)
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	4a07      	ldr	r2, [pc, #28]	; (80018f4 <SystemInit+0x5c>)
 80018d6:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80018da:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80018dc:	4b05      	ldr	r3, [pc, #20]	; (80018f4 <SystemInit+0x5c>)
 80018de:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80018e2:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80018e4:	4b05      	ldr	r3, [pc, #20]	; (80018fc <SystemInit+0x64>)
 80018e6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80018ea:	609a      	str	r2, [r3, #8]
#endif 
}
 80018ec:	bf00      	nop
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bc80      	pop	{r7}
 80018f2:	4770      	bx	lr
 80018f4:	40021000 	.word	0x40021000
 80018f8:	f8ff0000 	.word	0xf8ff0000
 80018fc:	e000ed00 	.word	0xe000ed00

08001900 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8001904:	4b12      	ldr	r3, [pc, #72]	; (8001950 <MX_USART2_UART_Init+0x50>)
 8001906:	4a13      	ldr	r2, [pc, #76]	; (8001954 <MX_USART2_UART_Init+0x54>)
 8001908:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800190a:	4b11      	ldr	r3, [pc, #68]	; (8001950 <MX_USART2_UART_Init+0x50>)
 800190c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001910:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001912:	4b0f      	ldr	r3, [pc, #60]	; (8001950 <MX_USART2_UART_Init+0x50>)
 8001914:	2200      	movs	r2, #0
 8001916:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001918:	4b0d      	ldr	r3, [pc, #52]	; (8001950 <MX_USART2_UART_Init+0x50>)
 800191a:	2200      	movs	r2, #0
 800191c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800191e:	4b0c      	ldr	r3, [pc, #48]	; (8001950 <MX_USART2_UART_Init+0x50>)
 8001920:	2200      	movs	r2, #0
 8001922:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001924:	4b0a      	ldr	r3, [pc, #40]	; (8001950 <MX_USART2_UART_Init+0x50>)
 8001926:	220c      	movs	r2, #12
 8001928:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800192a:	4b09      	ldr	r3, [pc, #36]	; (8001950 <MX_USART2_UART_Init+0x50>)
 800192c:	2200      	movs	r2, #0
 800192e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001930:	4b07      	ldr	r3, [pc, #28]	; (8001950 <MX_USART2_UART_Init+0x50>)
 8001932:	2200      	movs	r2, #0
 8001934:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001936:	4806      	ldr	r0, [pc, #24]	; (8001950 <MX_USART2_UART_Init+0x50>)
 8001938:	f002 fef8 	bl	800472c <HAL_UART_Init>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d003      	beq.n	800194a <MX_USART2_UART_Init+0x4a>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001942:	212e      	movs	r1, #46	; 0x2e
 8001944:	4804      	ldr	r0, [pc, #16]	; (8001958 <MX_USART2_UART_Init+0x58>)
 8001946:	f7ff fa31 	bl	8000dac <_Error_Handler>
  }

}
 800194a:	bf00      	nop
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	200001f0 	.word	0x200001f0
 8001954:	40004400 	.word	0x40004400
 8001958:	080062f4 	.word	0x080062f4

0800195c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b088      	sub	sp, #32
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001964:	f107 0310 	add.w	r3, r7, #16
 8001968:	2200      	movs	r2, #0
 800196a:	601a      	str	r2, [r3, #0]
 800196c:	605a      	str	r2, [r3, #4]
 800196e:	609a      	str	r2, [r3, #8]
 8001970:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4a49      	ldr	r2, [pc, #292]	; (8001a9c <HAL_UART_MspInit+0x140>)
 8001978:	4293      	cmp	r3, r2
 800197a:	f040 808a 	bne.w	8001a92 <HAL_UART_MspInit+0x136>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800197e:	4b48      	ldr	r3, [pc, #288]	; (8001aa0 <HAL_UART_MspInit+0x144>)
 8001980:	69db      	ldr	r3, [r3, #28]
 8001982:	4a47      	ldr	r2, [pc, #284]	; (8001aa0 <HAL_UART_MspInit+0x144>)
 8001984:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001988:	61d3      	str	r3, [r2, #28]
 800198a:	4b45      	ldr	r3, [pc, #276]	; (8001aa0 <HAL_UART_MspInit+0x144>)
 800198c:	69db      	ldr	r3, [r3, #28]
 800198e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001992:	60fb      	str	r3, [r7, #12]
 8001994:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001996:	4b42      	ldr	r3, [pc, #264]	; (8001aa0 <HAL_UART_MspInit+0x144>)
 8001998:	699b      	ldr	r3, [r3, #24]
 800199a:	4a41      	ldr	r2, [pc, #260]	; (8001aa0 <HAL_UART_MspInit+0x144>)
 800199c:	f043 0304 	orr.w	r3, r3, #4
 80019a0:	6193      	str	r3, [r2, #24]
 80019a2:	4b3f      	ldr	r3, [pc, #252]	; (8001aa0 <HAL_UART_MspInit+0x144>)
 80019a4:	699b      	ldr	r3, [r3, #24]
 80019a6:	f003 0304 	and.w	r3, r3, #4
 80019aa:	60bb      	str	r3, [r7, #8]
 80019ac:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80019ae:	2304      	movs	r3, #4
 80019b0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b2:	2302      	movs	r3, #2
 80019b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019b6:	2303      	movs	r3, #3
 80019b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019ba:	f107 0310 	add.w	r3, r7, #16
 80019be:	4619      	mov	r1, r3
 80019c0:	4838      	ldr	r0, [pc, #224]	; (8001aa4 <HAL_UART_MspInit+0x148>)
 80019c2:	f000 fbc3 	bl	800214c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80019c6:	2308      	movs	r3, #8
 80019c8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019ca:	2300      	movs	r3, #0
 80019cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ce:	2300      	movs	r3, #0
 80019d0:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019d2:	f107 0310 	add.w	r3, r7, #16
 80019d6:	4619      	mov	r1, r3
 80019d8:	4832      	ldr	r0, [pc, #200]	; (8001aa4 <HAL_UART_MspInit+0x148>)
 80019da:	f000 fbb7 	bl	800214c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 80019de:	4b32      	ldr	r3, [pc, #200]	; (8001aa8 <HAL_UART_MspInit+0x14c>)
 80019e0:	4a32      	ldr	r2, [pc, #200]	; (8001aac <HAL_UART_MspInit+0x150>)
 80019e2:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80019e4:	4b30      	ldr	r3, [pc, #192]	; (8001aa8 <HAL_UART_MspInit+0x14c>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80019ea:	4b2f      	ldr	r3, [pc, #188]	; (8001aa8 <HAL_UART_MspInit+0x14c>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80019f0:	4b2d      	ldr	r3, [pc, #180]	; (8001aa8 <HAL_UART_MspInit+0x14c>)
 80019f2:	2280      	movs	r2, #128	; 0x80
 80019f4:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80019f6:	4b2c      	ldr	r3, [pc, #176]	; (8001aa8 <HAL_UART_MspInit+0x14c>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80019fc:	4b2a      	ldr	r3, [pc, #168]	; (8001aa8 <HAL_UART_MspInit+0x14c>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8001a02:	4b29      	ldr	r3, [pc, #164]	; (8001aa8 <HAL_UART_MspInit+0x14c>)
 8001a04:	2220      	movs	r2, #32
 8001a06:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001a08:	4b27      	ldr	r3, [pc, #156]	; (8001aa8 <HAL_UART_MspInit+0x14c>)
 8001a0a:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8001a0e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001a10:	4825      	ldr	r0, [pc, #148]	; (8001aa8 <HAL_UART_MspInit+0x14c>)
 8001a12:	f000 f9b9 	bl	8001d88 <HAL_DMA_Init>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d003      	beq.n	8001a24 <HAL_UART_MspInit+0xc8>
    {
      _Error_Handler(__FILE__, __LINE__);
 8001a1c:	215a      	movs	r1, #90	; 0x5a
 8001a1e:	4824      	ldr	r0, [pc, #144]	; (8001ab0 <HAL_UART_MspInit+0x154>)
 8001a20:	f7ff f9c4 	bl	8000dac <_Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	4a20      	ldr	r2, [pc, #128]	; (8001aa8 <HAL_UART_MspInit+0x14c>)
 8001a28:	635a      	str	r2, [r3, #52]	; 0x34
 8001a2a:	4a1f      	ldr	r2, [pc, #124]	; (8001aa8 <HAL_UART_MspInit+0x14c>)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8001a30:	4b20      	ldr	r3, [pc, #128]	; (8001ab4 <HAL_UART_MspInit+0x158>)
 8001a32:	4a21      	ldr	r2, [pc, #132]	; (8001ab8 <HAL_UART_MspInit+0x15c>)
 8001a34:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001a36:	4b1f      	ldr	r3, [pc, #124]	; (8001ab4 <HAL_UART_MspInit+0x158>)
 8001a38:	2210      	movs	r2, #16
 8001a3a:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a3c:	4b1d      	ldr	r3, [pc, #116]	; (8001ab4 <HAL_UART_MspInit+0x158>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001a42:	4b1c      	ldr	r3, [pc, #112]	; (8001ab4 <HAL_UART_MspInit+0x158>)
 8001a44:	2280      	movs	r2, #128	; 0x80
 8001a46:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a48:	4b1a      	ldr	r3, [pc, #104]	; (8001ab4 <HAL_UART_MspInit+0x158>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a4e:	4b19      	ldr	r3, [pc, #100]	; (8001ab4 <HAL_UART_MspInit+0x158>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001a54:	4b17      	ldr	r3, [pc, #92]	; (8001ab4 <HAL_UART_MspInit+0x158>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001a5a:	4b16      	ldr	r3, [pc, #88]	; (8001ab4 <HAL_UART_MspInit+0x158>)
 8001a5c:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8001a60:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001a62:	4814      	ldr	r0, [pc, #80]	; (8001ab4 <HAL_UART_MspInit+0x158>)
 8001a64:	f000 f990 	bl	8001d88 <HAL_DMA_Init>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d003      	beq.n	8001a76 <HAL_UART_MspInit+0x11a>
    {
      _Error_Handler(__FILE__, __LINE__);
 8001a6e:	216a      	movs	r1, #106	; 0x6a
 8001a70:	480f      	ldr	r0, [pc, #60]	; (8001ab0 <HAL_UART_MspInit+0x154>)
 8001a72:	f7ff f99b 	bl	8000dac <_Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	4a0e      	ldr	r2, [pc, #56]	; (8001ab4 <HAL_UART_MspInit+0x158>)
 8001a7a:	631a      	str	r2, [r3, #48]	; 0x30
 8001a7c:	4a0d      	ldr	r2, [pc, #52]	; (8001ab4 <HAL_UART_MspInit+0x158>)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001a82:	2200      	movs	r2, #0
 8001a84:	2100      	movs	r1, #0
 8001a86:	2026      	movs	r0, #38	; 0x26
 8001a88:	f000 f953 	bl	8001d32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001a8c:	2026      	movs	r0, #38	; 0x26
 8001a8e:	f000 f96c 	bl	8001d6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001a92:	bf00      	nop
 8001a94:	3720      	adds	r7, #32
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	40004400 	.word	0x40004400
 8001aa0:	40021000 	.word	0x40021000
 8001aa4:	40010800 	.word	0x40010800
 8001aa8:	20000168 	.word	0x20000168
 8001aac:	4002006c 	.word	0x4002006c
 8001ab0:	080062f4 	.word	0x080062f4
 8001ab4:	200001ac 	.word	0x200001ac
 8001ab8:	40020080 	.word	0x40020080

08001abc <delay_ms>:
Tham Bien   : nms: Thoi gian can dinh thoi.
Tra Ve      : Khong.
********************************************************************************/

void delay_ms(uint16_t nms)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b085      	sub	sp, #20
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	80fb      	strh	r3, [r7, #6]
	uint32_t temp;
	SysTick->LOAD = (uint32_t)(nms * fac_ms);
 8001ac6:	88fb      	ldrh	r3, [r7, #6]
 8001ac8:	4a11      	ldr	r2, [pc, #68]	; (8001b10 <delay_ms+0x54>)
 8001aca:	8812      	ldrh	r2, [r2, #0]
 8001acc:	fb02 f203 	mul.w	r2, r2, r3
 8001ad0:	4b10      	ldr	r3, [pc, #64]	; (8001b14 <delay_ms+0x58>)
 8001ad2:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0x00;
 8001ad4:	4b0f      	ldr	r3, [pc, #60]	; (8001b14 <delay_ms+0x58>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	609a      	str	r2, [r3, #8]
	SysTick->CTRL = 0x01;
 8001ada:	4b0e      	ldr	r3, [pc, #56]	; (8001b14 <delay_ms+0x58>)
 8001adc:	2201      	movs	r2, #1
 8001ade:	601a      	str	r2, [r3, #0]
	do
	{
		temp = SysTick->CTRL;
 8001ae0:	4b0c      	ldr	r3, [pc, #48]	; (8001b14 <delay_ms+0x58>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	60fb      	str	r3, [r7, #12]
	} while ((temp & 0x01) && (!(temp & (1 << 16))));
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	f003 0301 	and.w	r3, r3, #1
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d004      	beq.n	8001afa <delay_ms+0x3e>
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d0f2      	beq.n	8001ae0 <delay_ms+0x24>
	SysTick->CTRL = 0x00;
 8001afa:	4b06      	ldr	r3, [pc, #24]	; (8001b14 <delay_ms+0x58>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	601a      	str	r2, [r3, #0]
	SysTick->VAL = 0X00;
 8001b00:	4b04      	ldr	r3, [pc, #16]	; (8001b14 <delay_ms+0x58>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	609a      	str	r2, [r3, #8]
}
 8001b06:	bf00      	nop
 8001b08:	3714      	adds	r7, #20
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bc80      	pop	{r7}
 8001b0e:	4770      	bx	lr
 8001b10:	200000a4 	.word	0x200000a4
 8001b14:	e000e010 	.word	0xe000e010

08001b18 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001b18:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001b1a:	e003      	b.n	8001b24 <LoopCopyDataInit>

08001b1c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001b1c:	4b0b      	ldr	r3, [pc, #44]	; (8001b4c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001b1e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001b20:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001b22:	3104      	adds	r1, #4

08001b24 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001b24:	480a      	ldr	r0, [pc, #40]	; (8001b50 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001b26:	4b0b      	ldr	r3, [pc, #44]	; (8001b54 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001b28:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001b2a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001b2c:	d3f6      	bcc.n	8001b1c <CopyDataInit>
  ldr r2, =_sbss
 8001b2e:	4a0a      	ldr	r2, [pc, #40]	; (8001b58 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001b30:	e002      	b.n	8001b38 <LoopFillZerobss>

08001b32 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001b32:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001b34:	f842 3b04 	str.w	r3, [r2], #4

08001b38 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001b38:	4b08      	ldr	r3, [pc, #32]	; (8001b5c <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001b3a:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001b3c:	d3f9      	bcc.n	8001b32 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001b3e:	f7ff feab 	bl	8001898 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b42:	f003 fadf 	bl	8005104 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001b46:	f7fe ffe9 	bl	8000b1c <main>
  bx lr
 8001b4a:	4770      	bx	lr
  ldr r3, =_sidata
 8001b4c:	080063d4 	.word	0x080063d4
  ldr r0, =_sdata
 8001b50:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001b54:	20000074 	.word	0x20000074
  ldr r2, =_sbss
 8001b58:	20000074 	.word	0x20000074
  ldr r3, = _ebss
 8001b5c:	20000238 	.word	0x20000238

08001b60 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b60:	e7fe      	b.n	8001b60 <ADC1_2_IRQHandler>
	...

08001b64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b68:	4b08      	ldr	r3, [pc, #32]	; (8001b8c <HAL_Init+0x28>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a07      	ldr	r2, [pc, #28]	; (8001b8c <HAL_Init+0x28>)
 8001b6e:	f043 0310 	orr.w	r3, r3, #16
 8001b72:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b74:	2003      	movs	r0, #3
 8001b76:	f000 f8d1 	bl	8001d1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b7a:	2000      	movs	r0, #0
 8001b7c:	f7ff fd8e 	bl	800169c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b80:	f7ff fd52 	bl	8001628 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b84:	2300      	movs	r3, #0
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	40022000 	.word	0x40022000

08001b90 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b90:	b480      	push	{r7}
 8001b92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b94:	4b05      	ldr	r3, [pc, #20]	; (8001bac <HAL_IncTick+0x1c>)
 8001b96:	781b      	ldrb	r3, [r3, #0]
 8001b98:	461a      	mov	r2, r3
 8001b9a:	4b05      	ldr	r3, [pc, #20]	; (8001bb0 <HAL_IncTick+0x20>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4413      	add	r3, r2
 8001ba0:	4a03      	ldr	r2, [pc, #12]	; (8001bb0 <HAL_IncTick+0x20>)
 8001ba2:	6013      	str	r3, [r2, #0]
}
 8001ba4:	bf00      	nop
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bc80      	pop	{r7}
 8001baa:	4770      	bx	lr
 8001bac:	2000000c 	.word	0x2000000c
 8001bb0:	20000230 	.word	0x20000230

08001bb4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	af00      	add	r7, sp, #0
  return uwTick;
 8001bb8:	4b02      	ldr	r3, [pc, #8]	; (8001bc4 <HAL_GetTick+0x10>)
 8001bba:	681b      	ldr	r3, [r3, #0]
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bc80      	pop	{r7}
 8001bc2:	4770      	bx	lr
 8001bc4:	20000230 	.word	0x20000230

08001bc8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b085      	sub	sp, #20
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	f003 0307 	and.w	r3, r3, #7
 8001bd6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bd8:	4b0c      	ldr	r3, [pc, #48]	; (8001c0c <__NVIC_SetPriorityGrouping+0x44>)
 8001bda:	68db      	ldr	r3, [r3, #12]
 8001bdc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bde:	68ba      	ldr	r2, [r7, #8]
 8001be0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001be4:	4013      	ands	r3, r2
 8001be6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bec:	68bb      	ldr	r3, [r7, #8]
 8001bee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bf0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bf4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bf8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bfa:	4a04      	ldr	r2, [pc, #16]	; (8001c0c <__NVIC_SetPriorityGrouping+0x44>)
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	60d3      	str	r3, [r2, #12]
}
 8001c00:	bf00      	nop
 8001c02:	3714      	adds	r7, #20
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bc80      	pop	{r7}
 8001c08:	4770      	bx	lr
 8001c0a:	bf00      	nop
 8001c0c:	e000ed00 	.word	0xe000ed00

08001c10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c10:	b480      	push	{r7}
 8001c12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c14:	4b04      	ldr	r3, [pc, #16]	; (8001c28 <__NVIC_GetPriorityGrouping+0x18>)
 8001c16:	68db      	ldr	r3, [r3, #12]
 8001c18:	0a1b      	lsrs	r3, r3, #8
 8001c1a:	f003 0307 	and.w	r3, r3, #7
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bc80      	pop	{r7}
 8001c24:	4770      	bx	lr
 8001c26:	bf00      	nop
 8001c28:	e000ed00 	.word	0xe000ed00

08001c2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b083      	sub	sp, #12
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	4603      	mov	r3, r0
 8001c34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	db0b      	blt.n	8001c56 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c3e:	79fb      	ldrb	r3, [r7, #7]
 8001c40:	f003 021f 	and.w	r2, r3, #31
 8001c44:	4906      	ldr	r1, [pc, #24]	; (8001c60 <__NVIC_EnableIRQ+0x34>)
 8001c46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c4a:	095b      	lsrs	r3, r3, #5
 8001c4c:	2001      	movs	r0, #1
 8001c4e:	fa00 f202 	lsl.w	r2, r0, r2
 8001c52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c56:	bf00      	nop
 8001c58:	370c      	adds	r7, #12
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bc80      	pop	{r7}
 8001c5e:	4770      	bx	lr
 8001c60:	e000e100 	.word	0xe000e100

08001c64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b083      	sub	sp, #12
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	6039      	str	r1, [r7, #0]
 8001c6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	db0a      	blt.n	8001c8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	b2da      	uxtb	r2, r3
 8001c7c:	490c      	ldr	r1, [pc, #48]	; (8001cb0 <__NVIC_SetPriority+0x4c>)
 8001c7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c82:	0112      	lsls	r2, r2, #4
 8001c84:	b2d2      	uxtb	r2, r2
 8001c86:	440b      	add	r3, r1
 8001c88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c8c:	e00a      	b.n	8001ca4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	b2da      	uxtb	r2, r3
 8001c92:	4908      	ldr	r1, [pc, #32]	; (8001cb4 <__NVIC_SetPriority+0x50>)
 8001c94:	79fb      	ldrb	r3, [r7, #7]
 8001c96:	f003 030f 	and.w	r3, r3, #15
 8001c9a:	3b04      	subs	r3, #4
 8001c9c:	0112      	lsls	r2, r2, #4
 8001c9e:	b2d2      	uxtb	r2, r2
 8001ca0:	440b      	add	r3, r1
 8001ca2:	761a      	strb	r2, [r3, #24]
}
 8001ca4:	bf00      	nop
 8001ca6:	370c      	adds	r7, #12
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bc80      	pop	{r7}
 8001cac:	4770      	bx	lr
 8001cae:	bf00      	nop
 8001cb0:	e000e100 	.word	0xe000e100
 8001cb4:	e000ed00 	.word	0xe000ed00

08001cb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b089      	sub	sp, #36	; 0x24
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	60f8      	str	r0, [r7, #12]
 8001cc0:	60b9      	str	r1, [r7, #8]
 8001cc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	f003 0307 	and.w	r3, r3, #7
 8001cca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ccc:	69fb      	ldr	r3, [r7, #28]
 8001cce:	f1c3 0307 	rsb	r3, r3, #7
 8001cd2:	2b04      	cmp	r3, #4
 8001cd4:	bf28      	it	cs
 8001cd6:	2304      	movcs	r3, #4
 8001cd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cda:	69fb      	ldr	r3, [r7, #28]
 8001cdc:	3304      	adds	r3, #4
 8001cde:	2b06      	cmp	r3, #6
 8001ce0:	d902      	bls.n	8001ce8 <NVIC_EncodePriority+0x30>
 8001ce2:	69fb      	ldr	r3, [r7, #28]
 8001ce4:	3b03      	subs	r3, #3
 8001ce6:	e000      	b.n	8001cea <NVIC_EncodePriority+0x32>
 8001ce8:	2300      	movs	r3, #0
 8001cea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cec:	f04f 32ff 	mov.w	r2, #4294967295
 8001cf0:	69bb      	ldr	r3, [r7, #24]
 8001cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf6:	43da      	mvns	r2, r3
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	401a      	ands	r2, r3
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d00:	f04f 31ff 	mov.w	r1, #4294967295
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	fa01 f303 	lsl.w	r3, r1, r3
 8001d0a:	43d9      	mvns	r1, r3
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d10:	4313      	orrs	r3, r2
         );
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3724      	adds	r7, #36	; 0x24
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bc80      	pop	{r7}
 8001d1a:	4770      	bx	lr

08001d1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b082      	sub	sp, #8
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d24:	6878      	ldr	r0, [r7, #4]
 8001d26:	f7ff ff4f 	bl	8001bc8 <__NVIC_SetPriorityGrouping>
}
 8001d2a:	bf00      	nop
 8001d2c:	3708      	adds	r7, #8
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}

08001d32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d32:	b580      	push	{r7, lr}
 8001d34:	b086      	sub	sp, #24
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	4603      	mov	r3, r0
 8001d3a:	60b9      	str	r1, [r7, #8]
 8001d3c:	607a      	str	r2, [r7, #4]
 8001d3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d40:	2300      	movs	r3, #0
 8001d42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d44:	f7ff ff64 	bl	8001c10 <__NVIC_GetPriorityGrouping>
 8001d48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d4a:	687a      	ldr	r2, [r7, #4]
 8001d4c:	68b9      	ldr	r1, [r7, #8]
 8001d4e:	6978      	ldr	r0, [r7, #20]
 8001d50:	f7ff ffb2 	bl	8001cb8 <NVIC_EncodePriority>
 8001d54:	4602      	mov	r2, r0
 8001d56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d5a:	4611      	mov	r1, r2
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f7ff ff81 	bl	8001c64 <__NVIC_SetPriority>
}
 8001d62:	bf00      	nop
 8001d64:	3718      	adds	r7, #24
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}

08001d6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d6a:	b580      	push	{r7, lr}
 8001d6c:	b082      	sub	sp, #8
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	4603      	mov	r3, r0
 8001d72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f7ff ff57 	bl	8001c2c <__NVIC_EnableIRQ>
}
 8001d7e:	bf00      	nop
 8001d80:	3708      	adds	r7, #8
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
	...

08001d88 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b085      	sub	sp, #20
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001d90:	2300      	movs	r3, #0
 8001d92:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d101      	bne.n	8001d9e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e043      	b.n	8001e26 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	461a      	mov	r2, r3
 8001da4:	4b22      	ldr	r3, [pc, #136]	; (8001e30 <HAL_DMA_Init+0xa8>)
 8001da6:	4413      	add	r3, r2
 8001da8:	4a22      	ldr	r2, [pc, #136]	; (8001e34 <HAL_DMA_Init+0xac>)
 8001daa:	fba2 2303 	umull	r2, r3, r2, r3
 8001dae:	091b      	lsrs	r3, r3, #4
 8001db0:	009a      	lsls	r2, r3, #2
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	4a1f      	ldr	r2, [pc, #124]	; (8001e38 <HAL_DMA_Init+0xb0>)
 8001dba:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2202      	movs	r2, #2
 8001dc0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001dd2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001dd6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001de0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	68db      	ldr	r3, [r3, #12]
 8001de6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	695b      	ldr	r3, [r3, #20]
 8001df2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001df8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	69db      	ldr	r3, [r3, #28]
 8001dfe:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001e00:	68fa      	ldr	r2, [r7, #12]
 8001e02:	4313      	orrs	r3, r2
 8001e04:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	68fa      	ldr	r2, [r7, #12]
 8001e0c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2200      	movs	r2, #0
 8001e12:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2201      	movs	r2, #1
 8001e18:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2200      	movs	r2, #0
 8001e20:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001e24:	2300      	movs	r3, #0
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	3714      	adds	r7, #20
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bc80      	pop	{r7}
 8001e2e:	4770      	bx	lr
 8001e30:	bffdfff8 	.word	0xbffdfff8
 8001e34:	cccccccd 	.word	0xcccccccd
 8001e38:	40020000 	.word	0x40020000

08001e3c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b084      	sub	sp, #16
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e44:	2300      	movs	r3, #0
 8001e46:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001e4e:	2b02      	cmp	r3, #2
 8001e50:	d005      	beq.n	8001e5e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2204      	movs	r2, #4
 8001e56:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	73fb      	strb	r3, [r7, #15]
 8001e5c:	e051      	b.n	8001f02 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	681a      	ldr	r2, [r3, #0]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f022 020e 	bic.w	r2, r2, #14
 8001e6c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	681a      	ldr	r2, [r3, #0]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f022 0201 	bic.w	r2, r2, #1
 8001e7c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a22      	ldr	r2, [pc, #136]	; (8001f0c <HAL_DMA_Abort_IT+0xd0>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d029      	beq.n	8001edc <HAL_DMA_Abort_IT+0xa0>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a20      	ldr	r2, [pc, #128]	; (8001f10 <HAL_DMA_Abort_IT+0xd4>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d022      	beq.n	8001ed8 <HAL_DMA_Abort_IT+0x9c>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a1f      	ldr	r2, [pc, #124]	; (8001f14 <HAL_DMA_Abort_IT+0xd8>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d01a      	beq.n	8001ed2 <HAL_DMA_Abort_IT+0x96>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a1d      	ldr	r2, [pc, #116]	; (8001f18 <HAL_DMA_Abort_IT+0xdc>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d012      	beq.n	8001ecc <HAL_DMA_Abort_IT+0x90>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a1c      	ldr	r2, [pc, #112]	; (8001f1c <HAL_DMA_Abort_IT+0xe0>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d00a      	beq.n	8001ec6 <HAL_DMA_Abort_IT+0x8a>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a1a      	ldr	r2, [pc, #104]	; (8001f20 <HAL_DMA_Abort_IT+0xe4>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d102      	bne.n	8001ec0 <HAL_DMA_Abort_IT+0x84>
 8001eba:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001ebe:	e00e      	b.n	8001ede <HAL_DMA_Abort_IT+0xa2>
 8001ec0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001ec4:	e00b      	b.n	8001ede <HAL_DMA_Abort_IT+0xa2>
 8001ec6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001eca:	e008      	b.n	8001ede <HAL_DMA_Abort_IT+0xa2>
 8001ecc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ed0:	e005      	b.n	8001ede <HAL_DMA_Abort_IT+0xa2>
 8001ed2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ed6:	e002      	b.n	8001ede <HAL_DMA_Abort_IT+0xa2>
 8001ed8:	2310      	movs	r3, #16
 8001eda:	e000      	b.n	8001ede <HAL_DMA_Abort_IT+0xa2>
 8001edc:	2301      	movs	r3, #1
 8001ede:	4a11      	ldr	r2, [pc, #68]	; (8001f24 <HAL_DMA_Abort_IT+0xe8>)
 8001ee0:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2200      	movs	r2, #0
 8001eee:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d003      	beq.n	8001f02 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	4798      	blx	r3
    } 
  }
  return status;
 8001f02:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	3710      	adds	r7, #16
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	40020008 	.word	0x40020008
 8001f10:	4002001c 	.word	0x4002001c
 8001f14:	40020030 	.word	0x40020030
 8001f18:	40020044 	.word	0x40020044
 8001f1c:	40020058 	.word	0x40020058
 8001f20:	4002006c 	.word	0x4002006c
 8001f24:	40020000 	.word	0x40020000

08001f28 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b084      	sub	sp, #16
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f44:	2204      	movs	r2, #4
 8001f46:	409a      	lsls	r2, r3
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d04f      	beq.n	8001ff0 <HAL_DMA_IRQHandler+0xc8>
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	f003 0304 	and.w	r3, r3, #4
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d04a      	beq.n	8001ff0 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f003 0320 	and.w	r3, r3, #32
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d107      	bne.n	8001f78 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f022 0204 	bic.w	r2, r2, #4
 8001f76:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a66      	ldr	r2, [pc, #408]	; (8002118 <HAL_DMA_IRQHandler+0x1f0>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d029      	beq.n	8001fd6 <HAL_DMA_IRQHandler+0xae>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4a65      	ldr	r2, [pc, #404]	; (800211c <HAL_DMA_IRQHandler+0x1f4>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d022      	beq.n	8001fd2 <HAL_DMA_IRQHandler+0xaa>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a63      	ldr	r2, [pc, #396]	; (8002120 <HAL_DMA_IRQHandler+0x1f8>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d01a      	beq.n	8001fcc <HAL_DMA_IRQHandler+0xa4>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a62      	ldr	r2, [pc, #392]	; (8002124 <HAL_DMA_IRQHandler+0x1fc>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d012      	beq.n	8001fc6 <HAL_DMA_IRQHandler+0x9e>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a60      	ldr	r2, [pc, #384]	; (8002128 <HAL_DMA_IRQHandler+0x200>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d00a      	beq.n	8001fc0 <HAL_DMA_IRQHandler+0x98>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a5f      	ldr	r2, [pc, #380]	; (800212c <HAL_DMA_IRQHandler+0x204>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d102      	bne.n	8001fba <HAL_DMA_IRQHandler+0x92>
 8001fb4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001fb8:	e00e      	b.n	8001fd8 <HAL_DMA_IRQHandler+0xb0>
 8001fba:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001fbe:	e00b      	b.n	8001fd8 <HAL_DMA_IRQHandler+0xb0>
 8001fc0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001fc4:	e008      	b.n	8001fd8 <HAL_DMA_IRQHandler+0xb0>
 8001fc6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001fca:	e005      	b.n	8001fd8 <HAL_DMA_IRQHandler+0xb0>
 8001fcc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001fd0:	e002      	b.n	8001fd8 <HAL_DMA_IRQHandler+0xb0>
 8001fd2:	2340      	movs	r3, #64	; 0x40
 8001fd4:	e000      	b.n	8001fd8 <HAL_DMA_IRQHandler+0xb0>
 8001fd6:	2304      	movs	r3, #4
 8001fd8:	4a55      	ldr	r2, [pc, #340]	; (8002130 <HAL_DMA_IRQHandler+0x208>)
 8001fda:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	f000 8094 	beq.w	800210e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fea:	6878      	ldr	r0, [r7, #4]
 8001fec:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001fee:	e08e      	b.n	800210e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff4:	2202      	movs	r2, #2
 8001ff6:	409a      	lsls	r2, r3
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d056      	beq.n	80020ae <HAL_DMA_IRQHandler+0x186>
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	f003 0302 	and.w	r3, r3, #2
 8002006:	2b00      	cmp	r3, #0
 8002008:	d051      	beq.n	80020ae <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f003 0320 	and.w	r3, r3, #32
 8002014:	2b00      	cmp	r3, #0
 8002016:	d10b      	bne.n	8002030 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	681a      	ldr	r2, [r3, #0]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f022 020a 	bic.w	r2, r2, #10
 8002026:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2201      	movs	r2, #1
 800202c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a38      	ldr	r2, [pc, #224]	; (8002118 <HAL_DMA_IRQHandler+0x1f0>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d029      	beq.n	800208e <HAL_DMA_IRQHandler+0x166>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a37      	ldr	r2, [pc, #220]	; (800211c <HAL_DMA_IRQHandler+0x1f4>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d022      	beq.n	800208a <HAL_DMA_IRQHandler+0x162>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a35      	ldr	r2, [pc, #212]	; (8002120 <HAL_DMA_IRQHandler+0x1f8>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d01a      	beq.n	8002084 <HAL_DMA_IRQHandler+0x15c>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a34      	ldr	r2, [pc, #208]	; (8002124 <HAL_DMA_IRQHandler+0x1fc>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d012      	beq.n	800207e <HAL_DMA_IRQHandler+0x156>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a32      	ldr	r2, [pc, #200]	; (8002128 <HAL_DMA_IRQHandler+0x200>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d00a      	beq.n	8002078 <HAL_DMA_IRQHandler+0x150>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a31      	ldr	r2, [pc, #196]	; (800212c <HAL_DMA_IRQHandler+0x204>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d102      	bne.n	8002072 <HAL_DMA_IRQHandler+0x14a>
 800206c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002070:	e00e      	b.n	8002090 <HAL_DMA_IRQHandler+0x168>
 8002072:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002076:	e00b      	b.n	8002090 <HAL_DMA_IRQHandler+0x168>
 8002078:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800207c:	e008      	b.n	8002090 <HAL_DMA_IRQHandler+0x168>
 800207e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002082:	e005      	b.n	8002090 <HAL_DMA_IRQHandler+0x168>
 8002084:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002088:	e002      	b.n	8002090 <HAL_DMA_IRQHandler+0x168>
 800208a:	2320      	movs	r3, #32
 800208c:	e000      	b.n	8002090 <HAL_DMA_IRQHandler+0x168>
 800208e:	2302      	movs	r3, #2
 8002090:	4a27      	ldr	r2, [pc, #156]	; (8002130 <HAL_DMA_IRQHandler+0x208>)
 8002092:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2200      	movs	r2, #0
 8002098:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d034      	beq.n	800210e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020a8:	6878      	ldr	r0, [r7, #4]
 80020aa:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80020ac:	e02f      	b.n	800210e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b2:	2208      	movs	r2, #8
 80020b4:	409a      	lsls	r2, r3
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	4013      	ands	r3, r2
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d028      	beq.n	8002110 <HAL_DMA_IRQHandler+0x1e8>
 80020be:	68bb      	ldr	r3, [r7, #8]
 80020c0:	f003 0308 	and.w	r3, r3, #8
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d023      	beq.n	8002110 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	681a      	ldr	r2, [r3, #0]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f022 020e 	bic.w	r2, r2, #14
 80020d6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020e0:	2101      	movs	r1, #1
 80020e2:	fa01 f202 	lsl.w	r2, r1, r2
 80020e6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2201      	movs	r2, #1
 80020ec:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2201      	movs	r2, #1
 80020f2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2200      	movs	r2, #0
 80020fa:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002102:	2b00      	cmp	r3, #0
 8002104:	d004      	beq.n	8002110 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800210a:	6878      	ldr	r0, [r7, #4]
 800210c:	4798      	blx	r3
    }
  }
  return;
 800210e:	bf00      	nop
 8002110:	bf00      	nop
}
 8002112:	3710      	adds	r7, #16
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}
 8002118:	40020008 	.word	0x40020008
 800211c:	4002001c 	.word	0x4002001c
 8002120:	40020030 	.word	0x40020030
 8002124:	40020044 	.word	0x40020044
 8002128:	40020058 	.word	0x40020058
 800212c:	4002006c 	.word	0x4002006c
 8002130:	40020000 	.word	0x40020000

08002134 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002134:	b480      	push	{r7}
 8002136:	b083      	sub	sp, #12
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 8002142:	4618      	mov	r0, r3
 8002144:	370c      	adds	r7, #12
 8002146:	46bd      	mov	sp, r7
 8002148:	bc80      	pop	{r7}
 800214a:	4770      	bx	lr

0800214c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800214c:	b480      	push	{r7}
 800214e:	b08b      	sub	sp, #44	; 0x2c
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
 8002154:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002156:	2300      	movs	r3, #0
 8002158:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800215a:	2300      	movs	r3, #0
 800215c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800215e:	e127      	b.n	80023b0 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002160:	2201      	movs	r2, #1
 8002162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002164:	fa02 f303 	lsl.w	r3, r2, r3
 8002168:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	69fa      	ldr	r2, [r7, #28]
 8002170:	4013      	ands	r3, r2
 8002172:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002174:	69ba      	ldr	r2, [r7, #24]
 8002176:	69fb      	ldr	r3, [r7, #28]
 8002178:	429a      	cmp	r2, r3
 800217a:	f040 8116 	bne.w	80023aa <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	2b12      	cmp	r3, #18
 8002184:	d034      	beq.n	80021f0 <HAL_GPIO_Init+0xa4>
 8002186:	2b12      	cmp	r3, #18
 8002188:	d80d      	bhi.n	80021a6 <HAL_GPIO_Init+0x5a>
 800218a:	2b02      	cmp	r3, #2
 800218c:	d02b      	beq.n	80021e6 <HAL_GPIO_Init+0x9a>
 800218e:	2b02      	cmp	r3, #2
 8002190:	d804      	bhi.n	800219c <HAL_GPIO_Init+0x50>
 8002192:	2b00      	cmp	r3, #0
 8002194:	d031      	beq.n	80021fa <HAL_GPIO_Init+0xae>
 8002196:	2b01      	cmp	r3, #1
 8002198:	d01c      	beq.n	80021d4 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800219a:	e048      	b.n	800222e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800219c:	2b03      	cmp	r3, #3
 800219e:	d043      	beq.n	8002228 <HAL_GPIO_Init+0xdc>
 80021a0:	2b11      	cmp	r3, #17
 80021a2:	d01b      	beq.n	80021dc <HAL_GPIO_Init+0x90>
          break;
 80021a4:	e043      	b.n	800222e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80021a6:	4a89      	ldr	r2, [pc, #548]	; (80023cc <HAL_GPIO_Init+0x280>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d026      	beq.n	80021fa <HAL_GPIO_Init+0xae>
 80021ac:	4a87      	ldr	r2, [pc, #540]	; (80023cc <HAL_GPIO_Init+0x280>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d806      	bhi.n	80021c0 <HAL_GPIO_Init+0x74>
 80021b2:	4a87      	ldr	r2, [pc, #540]	; (80023d0 <HAL_GPIO_Init+0x284>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d020      	beq.n	80021fa <HAL_GPIO_Init+0xae>
 80021b8:	4a86      	ldr	r2, [pc, #536]	; (80023d4 <HAL_GPIO_Init+0x288>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d01d      	beq.n	80021fa <HAL_GPIO_Init+0xae>
          break;
 80021be:	e036      	b.n	800222e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80021c0:	4a85      	ldr	r2, [pc, #532]	; (80023d8 <HAL_GPIO_Init+0x28c>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d019      	beq.n	80021fa <HAL_GPIO_Init+0xae>
 80021c6:	4a85      	ldr	r2, [pc, #532]	; (80023dc <HAL_GPIO_Init+0x290>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d016      	beq.n	80021fa <HAL_GPIO_Init+0xae>
 80021cc:	4a84      	ldr	r2, [pc, #528]	; (80023e0 <HAL_GPIO_Init+0x294>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d013      	beq.n	80021fa <HAL_GPIO_Init+0xae>
          break;
 80021d2:	e02c      	b.n	800222e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	68db      	ldr	r3, [r3, #12]
 80021d8:	623b      	str	r3, [r7, #32]
          break;
 80021da:	e028      	b.n	800222e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	68db      	ldr	r3, [r3, #12]
 80021e0:	3304      	adds	r3, #4
 80021e2:	623b      	str	r3, [r7, #32]
          break;
 80021e4:	e023      	b.n	800222e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	68db      	ldr	r3, [r3, #12]
 80021ea:	3308      	adds	r3, #8
 80021ec:	623b      	str	r3, [r7, #32]
          break;
 80021ee:	e01e      	b.n	800222e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	68db      	ldr	r3, [r3, #12]
 80021f4:	330c      	adds	r3, #12
 80021f6:	623b      	str	r3, [r7, #32]
          break;
 80021f8:	e019      	b.n	800222e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d102      	bne.n	8002208 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002202:	2304      	movs	r3, #4
 8002204:	623b      	str	r3, [r7, #32]
          break;
 8002206:	e012      	b.n	800222e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	2b01      	cmp	r3, #1
 800220e:	d105      	bne.n	800221c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002210:	2308      	movs	r3, #8
 8002212:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	69fa      	ldr	r2, [r7, #28]
 8002218:	611a      	str	r2, [r3, #16]
          break;
 800221a:	e008      	b.n	800222e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800221c:	2308      	movs	r3, #8
 800221e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	69fa      	ldr	r2, [r7, #28]
 8002224:	615a      	str	r2, [r3, #20]
          break;
 8002226:	e002      	b.n	800222e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002228:	2300      	movs	r3, #0
 800222a:	623b      	str	r3, [r7, #32]
          break;
 800222c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800222e:	69bb      	ldr	r3, [r7, #24]
 8002230:	2bff      	cmp	r3, #255	; 0xff
 8002232:	d801      	bhi.n	8002238 <HAL_GPIO_Init+0xec>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	e001      	b.n	800223c <HAL_GPIO_Init+0xf0>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	3304      	adds	r3, #4
 800223c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800223e:	69bb      	ldr	r3, [r7, #24]
 8002240:	2bff      	cmp	r3, #255	; 0xff
 8002242:	d802      	bhi.n	800224a <HAL_GPIO_Init+0xfe>
 8002244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	e002      	b.n	8002250 <HAL_GPIO_Init+0x104>
 800224a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800224c:	3b08      	subs	r3, #8
 800224e:	009b      	lsls	r3, r3, #2
 8002250:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	210f      	movs	r1, #15
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	fa01 f303 	lsl.w	r3, r1, r3
 800225e:	43db      	mvns	r3, r3
 8002260:	401a      	ands	r2, r3
 8002262:	6a39      	ldr	r1, [r7, #32]
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	fa01 f303 	lsl.w	r3, r1, r3
 800226a:	431a      	orrs	r2, r3
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002278:	2b00      	cmp	r3, #0
 800227a:	f000 8096 	beq.w	80023aa <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800227e:	4b59      	ldr	r3, [pc, #356]	; (80023e4 <HAL_GPIO_Init+0x298>)
 8002280:	699b      	ldr	r3, [r3, #24]
 8002282:	4a58      	ldr	r2, [pc, #352]	; (80023e4 <HAL_GPIO_Init+0x298>)
 8002284:	f043 0301 	orr.w	r3, r3, #1
 8002288:	6193      	str	r3, [r2, #24]
 800228a:	4b56      	ldr	r3, [pc, #344]	; (80023e4 <HAL_GPIO_Init+0x298>)
 800228c:	699b      	ldr	r3, [r3, #24]
 800228e:	f003 0301 	and.w	r3, r3, #1
 8002292:	60bb      	str	r3, [r7, #8]
 8002294:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002296:	4a54      	ldr	r2, [pc, #336]	; (80023e8 <HAL_GPIO_Init+0x29c>)
 8002298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800229a:	089b      	lsrs	r3, r3, #2
 800229c:	3302      	adds	r3, #2
 800229e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022a2:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80022a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a6:	f003 0303 	and.w	r3, r3, #3
 80022aa:	009b      	lsls	r3, r3, #2
 80022ac:	220f      	movs	r2, #15
 80022ae:	fa02 f303 	lsl.w	r3, r2, r3
 80022b2:	43db      	mvns	r3, r3
 80022b4:	68fa      	ldr	r2, [r7, #12]
 80022b6:	4013      	ands	r3, r2
 80022b8:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	4a4b      	ldr	r2, [pc, #300]	; (80023ec <HAL_GPIO_Init+0x2a0>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d013      	beq.n	80022ea <HAL_GPIO_Init+0x19e>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	4a4a      	ldr	r2, [pc, #296]	; (80023f0 <HAL_GPIO_Init+0x2a4>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d00d      	beq.n	80022e6 <HAL_GPIO_Init+0x19a>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	4a49      	ldr	r2, [pc, #292]	; (80023f4 <HAL_GPIO_Init+0x2a8>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d007      	beq.n	80022e2 <HAL_GPIO_Init+0x196>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	4a48      	ldr	r2, [pc, #288]	; (80023f8 <HAL_GPIO_Init+0x2ac>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d101      	bne.n	80022de <HAL_GPIO_Init+0x192>
 80022da:	2303      	movs	r3, #3
 80022dc:	e006      	b.n	80022ec <HAL_GPIO_Init+0x1a0>
 80022de:	2304      	movs	r3, #4
 80022e0:	e004      	b.n	80022ec <HAL_GPIO_Init+0x1a0>
 80022e2:	2302      	movs	r3, #2
 80022e4:	e002      	b.n	80022ec <HAL_GPIO_Init+0x1a0>
 80022e6:	2301      	movs	r3, #1
 80022e8:	e000      	b.n	80022ec <HAL_GPIO_Init+0x1a0>
 80022ea:	2300      	movs	r3, #0
 80022ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022ee:	f002 0203 	and.w	r2, r2, #3
 80022f2:	0092      	lsls	r2, r2, #2
 80022f4:	4093      	lsls	r3, r2
 80022f6:	68fa      	ldr	r2, [r7, #12]
 80022f8:	4313      	orrs	r3, r2
 80022fa:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80022fc:	493a      	ldr	r1, [pc, #232]	; (80023e8 <HAL_GPIO_Init+0x29c>)
 80022fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002300:	089b      	lsrs	r3, r3, #2
 8002302:	3302      	adds	r3, #2
 8002304:	68fa      	ldr	r2, [r7, #12]
 8002306:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002312:	2b00      	cmp	r3, #0
 8002314:	d006      	beq.n	8002324 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002316:	4b39      	ldr	r3, [pc, #228]	; (80023fc <HAL_GPIO_Init+0x2b0>)
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	4938      	ldr	r1, [pc, #224]	; (80023fc <HAL_GPIO_Init+0x2b0>)
 800231c:	69bb      	ldr	r3, [r7, #24]
 800231e:	4313      	orrs	r3, r2
 8002320:	600b      	str	r3, [r1, #0]
 8002322:	e006      	b.n	8002332 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002324:	4b35      	ldr	r3, [pc, #212]	; (80023fc <HAL_GPIO_Init+0x2b0>)
 8002326:	681a      	ldr	r2, [r3, #0]
 8002328:	69bb      	ldr	r3, [r7, #24]
 800232a:	43db      	mvns	r3, r3
 800232c:	4933      	ldr	r1, [pc, #204]	; (80023fc <HAL_GPIO_Init+0x2b0>)
 800232e:	4013      	ands	r3, r2
 8002330:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800233a:	2b00      	cmp	r3, #0
 800233c:	d006      	beq.n	800234c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800233e:	4b2f      	ldr	r3, [pc, #188]	; (80023fc <HAL_GPIO_Init+0x2b0>)
 8002340:	685a      	ldr	r2, [r3, #4]
 8002342:	492e      	ldr	r1, [pc, #184]	; (80023fc <HAL_GPIO_Init+0x2b0>)
 8002344:	69bb      	ldr	r3, [r7, #24]
 8002346:	4313      	orrs	r3, r2
 8002348:	604b      	str	r3, [r1, #4]
 800234a:	e006      	b.n	800235a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800234c:	4b2b      	ldr	r3, [pc, #172]	; (80023fc <HAL_GPIO_Init+0x2b0>)
 800234e:	685a      	ldr	r2, [r3, #4]
 8002350:	69bb      	ldr	r3, [r7, #24]
 8002352:	43db      	mvns	r3, r3
 8002354:	4929      	ldr	r1, [pc, #164]	; (80023fc <HAL_GPIO_Init+0x2b0>)
 8002356:	4013      	ands	r3, r2
 8002358:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002362:	2b00      	cmp	r3, #0
 8002364:	d006      	beq.n	8002374 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002366:	4b25      	ldr	r3, [pc, #148]	; (80023fc <HAL_GPIO_Init+0x2b0>)
 8002368:	689a      	ldr	r2, [r3, #8]
 800236a:	4924      	ldr	r1, [pc, #144]	; (80023fc <HAL_GPIO_Init+0x2b0>)
 800236c:	69bb      	ldr	r3, [r7, #24]
 800236e:	4313      	orrs	r3, r2
 8002370:	608b      	str	r3, [r1, #8]
 8002372:	e006      	b.n	8002382 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002374:	4b21      	ldr	r3, [pc, #132]	; (80023fc <HAL_GPIO_Init+0x2b0>)
 8002376:	689a      	ldr	r2, [r3, #8]
 8002378:	69bb      	ldr	r3, [r7, #24]
 800237a:	43db      	mvns	r3, r3
 800237c:	491f      	ldr	r1, [pc, #124]	; (80023fc <HAL_GPIO_Init+0x2b0>)
 800237e:	4013      	ands	r3, r2
 8002380:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800238a:	2b00      	cmp	r3, #0
 800238c:	d006      	beq.n	800239c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800238e:	4b1b      	ldr	r3, [pc, #108]	; (80023fc <HAL_GPIO_Init+0x2b0>)
 8002390:	68da      	ldr	r2, [r3, #12]
 8002392:	491a      	ldr	r1, [pc, #104]	; (80023fc <HAL_GPIO_Init+0x2b0>)
 8002394:	69bb      	ldr	r3, [r7, #24]
 8002396:	4313      	orrs	r3, r2
 8002398:	60cb      	str	r3, [r1, #12]
 800239a:	e006      	b.n	80023aa <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800239c:	4b17      	ldr	r3, [pc, #92]	; (80023fc <HAL_GPIO_Init+0x2b0>)
 800239e:	68da      	ldr	r2, [r3, #12]
 80023a0:	69bb      	ldr	r3, [r7, #24]
 80023a2:	43db      	mvns	r3, r3
 80023a4:	4915      	ldr	r1, [pc, #84]	; (80023fc <HAL_GPIO_Init+0x2b0>)
 80023a6:	4013      	ands	r3, r2
 80023a8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80023aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ac:	3301      	adds	r3, #1
 80023ae:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b6:	fa22 f303 	lsr.w	r3, r2, r3
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	f47f aed0 	bne.w	8002160 <HAL_GPIO_Init+0x14>
  }
}
 80023c0:	bf00      	nop
 80023c2:	372c      	adds	r7, #44	; 0x2c
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bc80      	pop	{r7}
 80023c8:	4770      	bx	lr
 80023ca:	bf00      	nop
 80023cc:	10210000 	.word	0x10210000
 80023d0:	10110000 	.word	0x10110000
 80023d4:	10120000 	.word	0x10120000
 80023d8:	10310000 	.word	0x10310000
 80023dc:	10320000 	.word	0x10320000
 80023e0:	10220000 	.word	0x10220000
 80023e4:	40021000 	.word	0x40021000
 80023e8:	40010000 	.word	0x40010000
 80023ec:	40010800 	.word	0x40010800
 80023f0:	40010c00 	.word	0x40010c00
 80023f4:	40011000 	.word	0x40011000
 80023f8:	40011400 	.word	0x40011400
 80023fc:	40010400 	.word	0x40010400

08002400 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002400:	b480      	push	{r7}
 8002402:	b083      	sub	sp, #12
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
 8002408:	460b      	mov	r3, r1
 800240a:	807b      	strh	r3, [r7, #2]
 800240c:	4613      	mov	r3, r2
 800240e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002410:	787b      	ldrb	r3, [r7, #1]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d003      	beq.n	800241e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002416:	887a      	ldrh	r2, [r7, #2]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800241c:	e003      	b.n	8002426 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800241e:	887b      	ldrh	r3, [r7, #2]
 8002420:	041a      	lsls	r2, r3, #16
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	611a      	str	r2, [r3, #16]
}
 8002426:	bf00      	nop
 8002428:	370c      	adds	r7, #12
 800242a:	46bd      	mov	sp, r7
 800242c:	bc80      	pop	{r7}
 800242e:	4770      	bx	lr

08002430 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002430:	b480      	push	{r7}
 8002432:	b083      	sub	sp, #12
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
 8002438:	460b      	mov	r3, r1
 800243a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	68da      	ldr	r2, [r3, #12]
 8002440:	887b      	ldrh	r3, [r7, #2]
 8002442:	4013      	ands	r3, r2
 8002444:	2b00      	cmp	r3, #0
 8002446:	d003      	beq.n	8002450 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002448:	887a      	ldrh	r2, [r7, #2]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 800244e:	e002      	b.n	8002456 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002450:	887a      	ldrh	r2, [r7, #2]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	611a      	str	r2, [r3, #16]
}
 8002456:	bf00      	nop
 8002458:	370c      	adds	r7, #12
 800245a:	46bd      	mov	sp, r7
 800245c:	bc80      	pop	{r7}
 800245e:	4770      	bx	lr

08002460 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b082      	sub	sp, #8
 8002464:	af00      	add	r7, sp, #0
 8002466:	4603      	mov	r3, r0
 8002468:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800246a:	4b08      	ldr	r3, [pc, #32]	; (800248c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800246c:	695a      	ldr	r2, [r3, #20]
 800246e:	88fb      	ldrh	r3, [r7, #6]
 8002470:	4013      	ands	r3, r2
 8002472:	2b00      	cmp	r3, #0
 8002474:	d006      	beq.n	8002484 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002476:	4a05      	ldr	r2, [pc, #20]	; (800248c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002478:	88fb      	ldrh	r3, [r7, #6]
 800247a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800247c:	88fb      	ldrh	r3, [r7, #6]
 800247e:	4618      	mov	r0, r3
 8002480:	f000 f806 	bl	8002490 <HAL_GPIO_EXTI_Callback>
  }
}
 8002484:	bf00      	nop
 8002486:	3708      	adds	r7, #8
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}
 800248c:	40010400 	.word	0x40010400

08002490 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002490:	b480      	push	{r7}
 8002492:	b083      	sub	sp, #12
 8002494:	af00      	add	r7, sp, #0
 8002496:	4603      	mov	r3, r0
 8002498:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800249a:	bf00      	nop
 800249c:	370c      	adds	r7, #12
 800249e:	46bd      	mov	sp, r7
 80024a0:	bc80      	pop	{r7}
 80024a2:	4770      	bx	lr

080024a4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b088      	sub	sp, #32
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80024ac:	2300      	movs	r3, #0
 80024ae:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024bc:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80024c4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024cc:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80024ce:	7bfb      	ldrb	r3, [r7, #15]
 80024d0:	2b10      	cmp	r3, #16
 80024d2:	d003      	beq.n	80024dc <HAL_I2C_EV_IRQHandler+0x38>
 80024d4:	7bfb      	ldrb	r3, [r7, #15]
 80024d6:	2b40      	cmp	r3, #64	; 0x40
 80024d8:	f040 80b6 	bne.w	8002648 <HAL_I2C_EV_IRQHandler+0x1a4>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	699b      	ldr	r3, [r3, #24]
 80024e2:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	695b      	ldr	r3, [r3, #20]
 80024ea:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80024ec:	69fb      	ldr	r3, [r7, #28]
 80024ee:	f003 0301 	and.w	r3, r3, #1
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d10d      	bne.n	8002512 <HAL_I2C_EV_IRQHandler+0x6e>
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80024fc:	d003      	beq.n	8002506 <HAL_I2C_EV_IRQHandler+0x62>
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8002504:	d101      	bne.n	800250a <HAL_I2C_EV_IRQHandler+0x66>
 8002506:	2301      	movs	r3, #1
 8002508:	e000      	b.n	800250c <HAL_I2C_EV_IRQHandler+0x68>
 800250a:	2300      	movs	r3, #0
 800250c:	2b01      	cmp	r3, #1
 800250e:	f000 8127 	beq.w	8002760 <HAL_I2C_EV_IRQHandler+0x2bc>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002512:	69fb      	ldr	r3, [r7, #28]
 8002514:	f003 0301 	and.w	r3, r3, #1
 8002518:	2b00      	cmp	r3, #0
 800251a:	d00c      	beq.n	8002536 <HAL_I2C_EV_IRQHandler+0x92>
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	0a5b      	lsrs	r3, r3, #9
 8002520:	f003 0301 	and.w	r3, r3, #1
 8002524:	2b00      	cmp	r3, #0
 8002526:	d006      	beq.n	8002536 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8002528:	6878      	ldr	r0, [r7, #4]
 800252a:	f001 fa58 	bl	80039de <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800252e:	6878      	ldr	r0, [r7, #4]
 8002530:	f000 fc56 	bl	8002de0 <I2C_Master_SB>
 8002534:	e087      	b.n	8002646 <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002536:	69fb      	ldr	r3, [r7, #28]
 8002538:	08db      	lsrs	r3, r3, #3
 800253a:	f003 0301 	and.w	r3, r3, #1
 800253e:	2b00      	cmp	r3, #0
 8002540:	d009      	beq.n	8002556 <HAL_I2C_EV_IRQHandler+0xb2>
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	0a5b      	lsrs	r3, r3, #9
 8002546:	f003 0301 	and.w	r3, r3, #1
 800254a:	2b00      	cmp	r3, #0
 800254c:	d003      	beq.n	8002556 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800254e:	6878      	ldr	r0, [r7, #4]
 8002550:	f000 fccb 	bl	8002eea <I2C_Master_ADD10>
 8002554:	e077      	b.n	8002646 <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002556:	69fb      	ldr	r3, [r7, #28]
 8002558:	085b      	lsrs	r3, r3, #1
 800255a:	f003 0301 	and.w	r3, r3, #1
 800255e:	2b00      	cmp	r3, #0
 8002560:	d009      	beq.n	8002576 <HAL_I2C_EV_IRQHandler+0xd2>
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	0a5b      	lsrs	r3, r3, #9
 8002566:	f003 0301 	and.w	r3, r3, #1
 800256a:	2b00      	cmp	r3, #0
 800256c:	d003      	beq.n	8002576 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	f000 fce4 	bl	8002f3c <I2C_Master_ADDR>
 8002574:	e067      	b.n	8002646 <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8002576:	69bb      	ldr	r3, [r7, #24]
 8002578:	089b      	lsrs	r3, r3, #2
 800257a:	f003 0301 	and.w	r3, r3, #1
 800257e:	2b00      	cmp	r3, #0
 8002580:	d030      	beq.n	80025e4 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800258c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002590:	f000 80e8 	beq.w	8002764 <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002594:	69fb      	ldr	r3, [r7, #28]
 8002596:	09db      	lsrs	r3, r3, #7
 8002598:	f003 0301 	and.w	r3, r3, #1
 800259c:	2b00      	cmp	r3, #0
 800259e:	d00f      	beq.n	80025c0 <HAL_I2C_EV_IRQHandler+0x11c>
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	0a9b      	lsrs	r3, r3, #10
 80025a4:	f003 0301 	and.w	r3, r3, #1
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d009      	beq.n	80025c0 <HAL_I2C_EV_IRQHandler+0x11c>
 80025ac:	69fb      	ldr	r3, [r7, #28]
 80025ae:	089b      	lsrs	r3, r3, #2
 80025b0:	f003 0301 	and.w	r3, r3, #1
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d103      	bne.n	80025c0 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80025b8:	6878      	ldr	r0, [r7, #4]
 80025ba:	f000 f937 	bl	800282c <I2C_MasterTransmit_TXE>
 80025be:	e042      	b.n	8002646 <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80025c0:	69fb      	ldr	r3, [r7, #28]
 80025c2:	089b      	lsrs	r3, r3, #2
 80025c4:	f003 0301 	and.w	r3, r3, #1
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	f000 80cb 	beq.w	8002764 <HAL_I2C_EV_IRQHandler+0x2c0>
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	0a5b      	lsrs	r3, r3, #9
 80025d2:	f003 0301 	and.w	r3, r3, #1
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	f000 80c4 	beq.w	8002764 <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterTransmit_BTF(hi2c);
 80025dc:	6878      	ldr	r0, [r7, #4]
 80025de:	f000 fa1d 	bl	8002a1c <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80025e2:	e0bf      	b.n	8002764 <HAL_I2C_EV_IRQHandler+0x2c0>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80025f2:	f000 80b7 	beq.w	8002764 <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80025f6:	69fb      	ldr	r3, [r7, #28]
 80025f8:	099b      	lsrs	r3, r3, #6
 80025fa:	f003 0301 	and.w	r3, r3, #1
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d00f      	beq.n	8002622 <HAL_I2C_EV_IRQHandler+0x17e>
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	0a9b      	lsrs	r3, r3, #10
 8002606:	f003 0301 	and.w	r3, r3, #1
 800260a:	2b00      	cmp	r3, #0
 800260c:	d009      	beq.n	8002622 <HAL_I2C_EV_IRQHandler+0x17e>
 800260e:	69fb      	ldr	r3, [r7, #28]
 8002610:	089b      	lsrs	r3, r3, #2
 8002612:	f003 0301 	and.w	r3, r3, #1
 8002616:	2b00      	cmp	r3, #0
 8002618:	d103      	bne.n	8002622 <HAL_I2C_EV_IRQHandler+0x17e>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800261a:	6878      	ldr	r0, [r7, #4]
 800261c:	f000 fa74 	bl	8002b08 <I2C_MasterReceive_RXNE>
 8002620:	e011      	b.n	8002646 <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002622:	69fb      	ldr	r3, [r7, #28]
 8002624:	089b      	lsrs	r3, r3, #2
 8002626:	f003 0301 	and.w	r3, r3, #1
 800262a:	2b00      	cmp	r3, #0
 800262c:	f000 809a 	beq.w	8002764 <HAL_I2C_EV_IRQHandler+0x2c0>
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	0a5b      	lsrs	r3, r3, #9
 8002634:	f003 0301 	and.w	r3, r3, #1
 8002638:	2b00      	cmp	r3, #0
 800263a:	f000 8093 	beq.w	8002764 <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterReceive_BTF(hi2c);
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	f000 fae4 	bl	8002c0c <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002644:	e08e      	b.n	8002764 <HAL_I2C_EV_IRQHandler+0x2c0>
 8002646:	e08d      	b.n	8002764 <HAL_I2C_EV_IRQHandler+0x2c0>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264c:	2b00      	cmp	r3, #0
 800264e:	d004      	beq.n	800265a <HAL_I2C_EV_IRQHandler+0x1b6>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	695b      	ldr	r3, [r3, #20]
 8002656:	61fb      	str	r3, [r7, #28]
 8002658:	e007      	b.n	800266a <HAL_I2C_EV_IRQHandler+0x1c6>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	699b      	ldr	r3, [r3, #24]
 8002660:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	695b      	ldr	r3, [r3, #20]
 8002668:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800266a:	69fb      	ldr	r3, [r7, #28]
 800266c:	085b      	lsrs	r3, r3, #1
 800266e:	f003 0301 	and.w	r3, r3, #1
 8002672:	2b00      	cmp	r3, #0
 8002674:	d012      	beq.n	800269c <HAL_I2C_EV_IRQHandler+0x1f8>
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	0a5b      	lsrs	r3, r3, #9
 800267a:	f003 0301 	and.w	r3, r3, #1
 800267e:	2b00      	cmp	r3, #0
 8002680:	d00c      	beq.n	800269c <HAL_I2C_EV_IRQHandler+0x1f8>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002686:	2b00      	cmp	r3, #0
 8002688:	d003      	beq.n	8002692 <HAL_I2C_EV_IRQHandler+0x1ee>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	699b      	ldr	r3, [r3, #24]
 8002690:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8002692:	69b9      	ldr	r1, [r7, #24]
 8002694:	6878      	ldr	r0, [r7, #4]
 8002696:	f000 fea8 	bl	80033ea <I2C_Slave_ADDR>
 800269a:	e066      	b.n	800276a <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800269c:	69fb      	ldr	r3, [r7, #28]
 800269e:	091b      	lsrs	r3, r3, #4
 80026a0:	f003 0301 	and.w	r3, r3, #1
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d009      	beq.n	80026bc <HAL_I2C_EV_IRQHandler+0x218>
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	0a5b      	lsrs	r3, r3, #9
 80026ac:	f003 0301 	and.w	r3, r3, #1
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d003      	beq.n	80026bc <HAL_I2C_EV_IRQHandler+0x218>
    {
      I2C_Slave_STOPF(hi2c);
 80026b4:	6878      	ldr	r0, [r7, #4]
 80026b6:	f000 fedd 	bl	8003474 <I2C_Slave_STOPF>
 80026ba:	e056      	b.n	800276a <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80026bc:	7bbb      	ldrb	r3, [r7, #14]
 80026be:	2b21      	cmp	r3, #33	; 0x21
 80026c0:	d002      	beq.n	80026c8 <HAL_I2C_EV_IRQHandler+0x224>
 80026c2:	7bbb      	ldrb	r3, [r7, #14]
 80026c4:	2b29      	cmp	r3, #41	; 0x29
 80026c6:	d125      	bne.n	8002714 <HAL_I2C_EV_IRQHandler+0x270>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80026c8:	69fb      	ldr	r3, [r7, #28]
 80026ca:	09db      	lsrs	r3, r3, #7
 80026cc:	f003 0301 	and.w	r3, r3, #1
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d00f      	beq.n	80026f4 <HAL_I2C_EV_IRQHandler+0x250>
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	0a9b      	lsrs	r3, r3, #10
 80026d8:	f003 0301 	and.w	r3, r3, #1
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d009      	beq.n	80026f4 <HAL_I2C_EV_IRQHandler+0x250>
 80026e0:	69fb      	ldr	r3, [r7, #28]
 80026e2:	089b      	lsrs	r3, r3, #2
 80026e4:	f003 0301 	and.w	r3, r3, #1
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d103      	bne.n	80026f4 <HAL_I2C_EV_IRQHandler+0x250>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80026ec:	6878      	ldr	r0, [r7, #4]
 80026ee:	f000 fdc0 	bl	8003272 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80026f2:	e039      	b.n	8002768 <HAL_I2C_EV_IRQHandler+0x2c4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80026f4:	69fb      	ldr	r3, [r7, #28]
 80026f6:	089b      	lsrs	r3, r3, #2
 80026f8:	f003 0301 	and.w	r3, r3, #1
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d033      	beq.n	8002768 <HAL_I2C_EV_IRQHandler+0x2c4>
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	0a5b      	lsrs	r3, r3, #9
 8002704:	f003 0301 	and.w	r3, r3, #1
 8002708:	2b00      	cmp	r3, #0
 800270a:	d02d      	beq.n	8002768 <HAL_I2C_EV_IRQHandler+0x2c4>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800270c:	6878      	ldr	r0, [r7, #4]
 800270e:	f000 fded 	bl	80032ec <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002712:	e029      	b.n	8002768 <HAL_I2C_EV_IRQHandler+0x2c4>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002714:	69fb      	ldr	r3, [r7, #28]
 8002716:	099b      	lsrs	r3, r3, #6
 8002718:	f003 0301 	and.w	r3, r3, #1
 800271c:	2b00      	cmp	r3, #0
 800271e:	d00f      	beq.n	8002740 <HAL_I2C_EV_IRQHandler+0x29c>
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	0a9b      	lsrs	r3, r3, #10
 8002724:	f003 0301 	and.w	r3, r3, #1
 8002728:	2b00      	cmp	r3, #0
 800272a:	d009      	beq.n	8002740 <HAL_I2C_EV_IRQHandler+0x29c>
 800272c:	69fb      	ldr	r3, [r7, #28]
 800272e:	089b      	lsrs	r3, r3, #2
 8002730:	f003 0301 	and.w	r3, r3, #1
 8002734:	2b00      	cmp	r3, #0
 8002736:	d103      	bne.n	8002740 <HAL_I2C_EV_IRQHandler+0x29c>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8002738:	6878      	ldr	r0, [r7, #4]
 800273a:	f000 fdf7 	bl	800332c <I2C_SlaveReceive_RXNE>
 800273e:	e014      	b.n	800276a <HAL_I2C_EV_IRQHandler+0x2c6>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002740:	69fb      	ldr	r3, [r7, #28]
 8002742:	089b      	lsrs	r3, r3, #2
 8002744:	f003 0301 	and.w	r3, r3, #1
 8002748:	2b00      	cmp	r3, #0
 800274a:	d00e      	beq.n	800276a <HAL_I2C_EV_IRQHandler+0x2c6>
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	0a5b      	lsrs	r3, r3, #9
 8002750:	f003 0301 	and.w	r3, r3, #1
 8002754:	2b00      	cmp	r3, #0
 8002756:	d008      	beq.n	800276a <HAL_I2C_EV_IRQHandler+0x2c6>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8002758:	6878      	ldr	r0, [r7, #4]
 800275a:	f000 fe25 	bl	80033a8 <I2C_SlaveReceive_BTF>
 800275e:	e004      	b.n	800276a <HAL_I2C_EV_IRQHandler+0x2c6>
      return;
 8002760:	bf00      	nop
 8002762:	e002      	b.n	800276a <HAL_I2C_EV_IRQHandler+0x2c6>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002764:	bf00      	nop
 8002766:	e000      	b.n	800276a <HAL_I2C_EV_IRQHandler+0x2c6>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002768:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800276a:	3720      	adds	r7, #32
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}

08002770 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002770:	b480      	push	{r7}
 8002772:	b083      	sub	sp, #12
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002778:	bf00      	nop
 800277a:	370c      	adds	r7, #12
 800277c:	46bd      	mov	sp, r7
 800277e:	bc80      	pop	{r7}
 8002780:	4770      	bx	lr

08002782 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002782:	b480      	push	{r7}
 8002784:	b083      	sub	sp, #12
 8002786:	af00      	add	r7, sp, #0
 8002788:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800278a:	bf00      	nop
 800278c:	370c      	adds	r7, #12
 800278e:	46bd      	mov	sp, r7
 8002790:	bc80      	pop	{r7}
 8002792:	4770      	bx	lr

08002794 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002794:	b480      	push	{r7}
 8002796:	b083      	sub	sp, #12
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800279c:	bf00      	nop
 800279e:	370c      	adds	r7, #12
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bc80      	pop	{r7}
 80027a4:	4770      	bx	lr

080027a6 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80027a6:	b480      	push	{r7}
 80027a8:	b083      	sub	sp, #12
 80027aa:	af00      	add	r7, sp, #0
 80027ac:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80027ae:	bf00      	nop
 80027b0:	370c      	adds	r7, #12
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bc80      	pop	{r7}
 80027b6:	4770      	bx	lr

080027b8 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80027b8:	b480      	push	{r7}
 80027ba:	b083      	sub	sp, #12
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
 80027c0:	460b      	mov	r3, r1
 80027c2:	70fb      	strb	r3, [r7, #3]
 80027c4:	4613      	mov	r3, r2
 80027c6:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80027c8:	bf00      	nop
 80027ca:	370c      	adds	r7, #12
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bc80      	pop	{r7}
 80027d0:	4770      	bx	lr

080027d2 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80027d2:	b480      	push	{r7}
 80027d4:	b083      	sub	sp, #12
 80027d6:	af00      	add	r7, sp, #0
 80027d8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80027da:	bf00      	nop
 80027dc:	370c      	adds	r7, #12
 80027de:	46bd      	mov	sp, r7
 80027e0:	bc80      	pop	{r7}
 80027e2:	4770      	bx	lr

080027e4 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b083      	sub	sp, #12
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80027ec:	bf00      	nop
 80027ee:	370c      	adds	r7, #12
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bc80      	pop	{r7}
 80027f4:	4770      	bx	lr

080027f6 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80027f6:	b480      	push	{r7}
 80027f8:	b083      	sub	sp, #12
 80027fa:	af00      	add	r7, sp, #0
 80027fc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80027fe:	bf00      	nop
 8002800:	370c      	adds	r7, #12
 8002802:	46bd      	mov	sp, r7
 8002804:	bc80      	pop	{r7}
 8002806:	4770      	bx	lr

08002808 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002808:	b480      	push	{r7}
 800280a:	b083      	sub	sp, #12
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002810:	bf00      	nop
 8002812:	370c      	adds	r7, #12
 8002814:	46bd      	mov	sp, r7
 8002816:	bc80      	pop	{r7}
 8002818:	4770      	bx	lr

0800281a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800281a:	b480      	push	{r7}
 800281c:	b083      	sub	sp, #12
 800281e:	af00      	add	r7, sp, #0
 8002820:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002822:	bf00      	nop
 8002824:	370c      	adds	r7, #12
 8002826:	46bd      	mov	sp, r7
 8002828:	bc80      	pop	{r7}
 800282a:	4770      	bx	lr

0800282c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b084      	sub	sp, #16
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800283a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002842:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002848:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800284e:	2b00      	cmp	r3, #0
 8002850:	d150      	bne.n	80028f4 <I2C_MasterTransmit_TXE+0xc8>
 8002852:	7bfb      	ldrb	r3, [r7, #15]
 8002854:	2b21      	cmp	r3, #33	; 0x21
 8002856:	d14d      	bne.n	80028f4 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	2b08      	cmp	r3, #8
 800285c:	d01d      	beq.n	800289a <I2C_MasterTransmit_TXE+0x6e>
 800285e:	68bb      	ldr	r3, [r7, #8]
 8002860:	2b20      	cmp	r3, #32
 8002862:	d01a      	beq.n	800289a <I2C_MasterTransmit_TXE+0x6e>
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800286a:	d016      	beq.n	800289a <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	685a      	ldr	r2, [r3, #4]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800287a:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2211      	movs	r2, #17
 8002880:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2200      	movs	r2, #0
 8002886:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2220      	movs	r2, #32
 800288e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002892:	6878      	ldr	r0, [r7, #4]
 8002894:	f7ff ff6c 	bl	8002770 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002898:	e0bc      	b.n	8002a14 <I2C_MasterTransmit_TXE+0x1e8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	685a      	ldr	r2, [r3, #4]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80028a8:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	681a      	ldr	r2, [r3, #0]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028b8:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2200      	movs	r2, #0
 80028be:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2220      	movs	r2, #32
 80028c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80028ce:	b2db      	uxtb	r3, r3
 80028d0:	2b40      	cmp	r3, #64	; 0x40
 80028d2:	d107      	bne.n	80028e4 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2200      	movs	r2, #0
 80028d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80028dc:	6878      	ldr	r0, [r7, #4]
 80028de:	f7ff ff81 	bl	80027e4 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80028e2:	e097      	b.n	8002a14 <I2C_MasterTransmit_TXE+0x1e8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2200      	movs	r2, #0
 80028e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80028ec:	6878      	ldr	r0, [r7, #4]
 80028ee:	f7ff ff3f 	bl	8002770 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80028f2:	e08f      	b.n	8002a14 <I2C_MasterTransmit_TXE+0x1e8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80028f4:	7bfb      	ldrb	r3, [r7, #15]
 80028f6:	2b21      	cmp	r3, #33	; 0x21
 80028f8:	d007      	beq.n	800290a <I2C_MasterTransmit_TXE+0xde>
 80028fa:	7bbb      	ldrb	r3, [r7, #14]
 80028fc:	2b40      	cmp	r3, #64	; 0x40
 80028fe:	f040 8089 	bne.w	8002a14 <I2C_MasterTransmit_TXE+0x1e8>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8002902:	7bfb      	ldrb	r3, [r7, #15]
 8002904:	2b22      	cmp	r3, #34	; 0x22
 8002906:	f040 8085 	bne.w	8002a14 <I2C_MasterTransmit_TXE+0x1e8>
  {
    if (hi2c->XferCount == 0U)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800290e:	b29b      	uxth	r3, r3
 8002910:	2b00      	cmp	r3, #0
 8002912:	d108      	bne.n	8002926 <I2C_MasterTransmit_TXE+0xfa>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	685a      	ldr	r2, [r3, #4]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002922:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8002924:	e076      	b.n	8002a14 <I2C_MasterTransmit_TXE+0x1e8>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800292c:	b2db      	uxtb	r3, r3
 800292e:	2b40      	cmp	r3, #64	; 0x40
 8002930:	d15d      	bne.n	80029ee <I2C_MasterTransmit_TXE+0x1c2>
        if (hi2c->EventCount == 0U)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002936:	2b00      	cmp	r3, #0
 8002938:	d11d      	bne.n	8002976 <I2C_MasterTransmit_TXE+0x14a>
          if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800293e:	2b01      	cmp	r3, #1
 8002940:	d10b      	bne.n	800295a <I2C_MasterTransmit_TXE+0x12e>
            hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002946:	b2da      	uxtb	r2, r3
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	611a      	str	r2, [r3, #16]
            hi2c->EventCount += 2U;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002952:	1c9a      	adds	r2, r3, #2
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002958:	e05c      	b.n	8002a14 <I2C_MasterTransmit_TXE+0x1e8>
            hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800295e:	b29b      	uxth	r3, r3
 8002960:	121b      	asrs	r3, r3, #8
 8002962:	b2da      	uxtb	r2, r3
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	611a      	str	r2, [r3, #16]
            hi2c->EventCount++;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800296e:	1c5a      	adds	r2, r3, #1
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002974:	e04e      	b.n	8002a14 <I2C_MasterTransmit_TXE+0x1e8>
        else if (hi2c->EventCount == 1U)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800297a:	2b01      	cmp	r3, #1
 800297c:	d10b      	bne.n	8002996 <I2C_MasterTransmit_TXE+0x16a>
          hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002982:	b2da      	uxtb	r2, r3
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	611a      	str	r2, [r3, #16]
          hi2c->EventCount++;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800298e:	1c5a      	adds	r2, r3, #1
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002994:	e03e      	b.n	8002a14 <I2C_MasterTransmit_TXE+0x1e8>
        else if (hi2c->EventCount == 2U)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800299a:	2b02      	cmp	r3, #2
 800299c:	d13a      	bne.n	8002a14 <I2C_MasterTransmit_TXE+0x1e8>
          if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029a4:	b2db      	uxtb	r3, r3
 80029a6:	2b22      	cmp	r3, #34	; 0x22
 80029a8:	d108      	bne.n	80029bc <I2C_MasterTransmit_TXE+0x190>
            hi2c->Instance->CR1 |= I2C_CR1_START;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80029b8:	601a      	str	r2, [r3, #0]
}
 80029ba:	e02b      	b.n	8002a14 <I2C_MasterTransmit_TXE+0x1e8>
          else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029c2:	b2db      	uxtb	r3, r3
 80029c4:	2b21      	cmp	r3, #33	; 0x21
 80029c6:	d125      	bne.n	8002a14 <I2C_MasterTransmit_TXE+0x1e8>
            hi2c->Instance->DR = *hi2c->pBuffPtr;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029cc:	781a      	ldrb	r2, [r3, #0]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	611a      	str	r2, [r3, #16]
            hi2c->pBuffPtr++;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d8:	1c5a      	adds	r2, r3, #1
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	625a      	str	r2, [r3, #36]	; 0x24
            hi2c->XferCount--;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029e2:	b29b      	uxth	r3, r3
 80029e4:	3b01      	subs	r3, #1
 80029e6:	b29a      	uxth	r2, r3
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80029ec:	e012      	b.n	8002a14 <I2C_MasterTransmit_TXE+0x1e8>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f2:	781a      	ldrb	r2, [r3, #0]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029fe:	1c5a      	adds	r2, r3, #1
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a08:	b29b      	uxth	r3, r3
 8002a0a:	3b01      	subs	r3, #1
 8002a0c:	b29a      	uxth	r2, r3
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002a12:	e7ff      	b.n	8002a14 <I2C_MasterTransmit_TXE+0x1e8>
 8002a14:	bf00      	nop
 8002a16:	3710      	adds	r7, #16
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}

08002a1c <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b084      	sub	sp, #16
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a28:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	2b21      	cmp	r3, #33	; 0x21
 8002a34:	d164      	bne.n	8002b00 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a3a:	b29b      	uxth	r3, r3
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d012      	beq.n	8002a66 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a44:	781a      	ldrb	r2, [r3, #0]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a50:	1c5a      	adds	r2, r3, #1
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a5a:	b29b      	uxth	r3, r3
 8002a5c:	3b01      	subs	r3, #1
 8002a5e:	b29a      	uxth	r2, r3
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	855a      	strh	r2, [r3, #42]	; 0x2a
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
        }
      }
    }
  }
}
 8002a64:	e04c      	b.n	8002b00 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	2b08      	cmp	r3, #8
 8002a6a:	d01d      	beq.n	8002aa8 <I2C_MasterTransmit_BTF+0x8c>
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	2b20      	cmp	r3, #32
 8002a70:	d01a      	beq.n	8002aa8 <I2C_MasterTransmit_BTF+0x8c>
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002a78:	d016      	beq.n	8002aa8 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	685a      	ldr	r2, [r3, #4]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002a88:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2211      	movs	r2, #17
 8002a8e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2200      	movs	r2, #0
 8002a94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2220      	movs	r2, #32
 8002a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002aa0:	6878      	ldr	r0, [r7, #4]
 8002aa2:	f7ff fe65 	bl	8002770 <HAL_I2C_MasterTxCpltCallback>
}
 8002aa6:	e02b      	b.n	8002b00 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	685a      	ldr	r2, [r3, #4]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002ab6:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ac6:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2200      	movs	r2, #0
 8002acc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2220      	movs	r2, #32
 8002ad2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002adc:	b2db      	uxtb	r3, r3
 8002ade:	2b40      	cmp	r3, #64	; 0x40
 8002ae0:	d107      	bne.n	8002af2 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8002aea:	6878      	ldr	r0, [r7, #4]
 8002aec:	f7ff fe7a 	bl	80027e4 <HAL_I2C_MemTxCpltCallback>
}
 8002af0:	e006      	b.n	8002b00 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2200      	movs	r2, #0
 8002af6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	f7ff fe38 	bl	8002770 <HAL_I2C_MasterTxCpltCallback>
}
 8002b00:	bf00      	nop
 8002b02:	3710      	adds	r7, #16
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd80      	pop	{r7, pc}

08002b08 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b084      	sub	sp, #16
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b16:	b2db      	uxtb	r3, r3
 8002b18:	2b22      	cmp	r3, #34	; 0x22
 8002b1a:	d173      	bne.n	8002c04 <I2C_MasterReceive_RXNE+0xfc>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b20:	b29b      	uxth	r3, r3
 8002b22:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	2b03      	cmp	r3, #3
 8002b28:	d920      	bls.n	8002b6c <I2C_MasterReceive_RXNE+0x64>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	691a      	ldr	r2, [r3, #16]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b34:	b2d2      	uxtb	r2, r2
 8002b36:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b3c:	1c5a      	adds	r2, r3, #1
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b46:	b29b      	uxth	r3, r3
 8002b48:	3b01      	subs	r3, #1
 8002b4a:	b29a      	uxth	r2, r3
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b54:	b29b      	uxth	r3, r3
 8002b56:	2b03      	cmp	r3, #3
 8002b58:	d154      	bne.n	8002c04 <I2C_MasterReceive_RXNE+0xfc>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	685a      	ldr	r2, [r3, #4]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b68:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8002b6a:	e04b      	b.n	8002c04 <I2C_MasterReceive_RXNE+0xfc>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b70:	2b02      	cmp	r3, #2
 8002b72:	d047      	beq.n	8002c04 <I2C_MasterReceive_RXNE+0xfc>
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	2b01      	cmp	r3, #1
 8002b78:	d002      	beq.n	8002b80 <I2C_MasterReceive_RXNE+0x78>
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d141      	bne.n	8002c04 <I2C_MasterReceive_RXNE+0xfc>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b8e:	601a      	str	r2, [r3, #0]
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	685a      	ldr	r2, [r3, #4]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002b9e:	605a      	str	r2, [r3, #4]
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	691a      	ldr	r2, [r3, #16]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002baa:	b2d2      	uxtb	r2, r2
 8002bac:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb2:	1c5a      	adds	r2, r3, #1
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bbc:	b29b      	uxth	r3, r3
 8002bbe:	3b01      	subs	r3, #1
 8002bc0:	b29a      	uxth	r2, r3
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->State = HAL_I2C_STATE_READY;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2220      	movs	r2, #32
 8002bca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002bd4:	b2db      	uxtb	r3, r3
 8002bd6:	2b40      	cmp	r3, #64	; 0x40
 8002bd8:	d10a      	bne.n	8002bf0 <I2C_MasterReceive_RXNE+0xe8>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2200      	movs	r2, #0
 8002be6:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8002be8:	6878      	ldr	r0, [r7, #4]
 8002bea:	f7ff fe04 	bl	80027f6 <HAL_I2C_MemRxCpltCallback>
}
 8002bee:	e009      	b.n	8002c04 <I2C_MasterReceive_RXNE+0xfc>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2212      	movs	r2, #18
 8002bfc:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	f7ff fdbf 	bl	8002782 <HAL_I2C_MasterRxCpltCallback>
}
 8002c04:	bf00      	nop
 8002c06:	3710      	adds	r7, #16
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd80      	pop	{r7, pc}

08002c0c <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b084      	sub	sp, #16
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c18:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c1e:	b29b      	uxth	r3, r3
 8002c20:	2b04      	cmp	r3, #4
 8002c22:	d11b      	bne.n	8002c5c <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	685a      	ldr	r2, [r3, #4]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c32:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	691a      	ldr	r2, [r3, #16]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c3e:	b2d2      	uxtb	r2, r2
 8002c40:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c46:	1c5a      	adds	r2, r3, #1
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c50:	b29b      	uxth	r3, r3
 8002c52:	3b01      	subs	r3, #1
 8002c54:	b29a      	uxth	r2, r3
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8002c5a:	e0bd      	b.n	8002dd8 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c60:	b29b      	uxth	r3, r3
 8002c62:	2b03      	cmp	r3, #3
 8002c64:	d129      	bne.n	8002cba <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	685a      	ldr	r2, [r3, #4]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c74:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	2b04      	cmp	r3, #4
 8002c7a:	d00a      	beq.n	8002c92 <I2C_MasterReceive_BTF+0x86>
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	2b02      	cmp	r3, #2
 8002c80:	d007      	beq.n	8002c92 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c90:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	691a      	ldr	r2, [r3, #16]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c9c:	b2d2      	uxtb	r2, r2
 8002c9e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca4:	1c5a      	adds	r2, r3, #1
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cae:	b29b      	uxth	r3, r3
 8002cb0:	3b01      	subs	r3, #1
 8002cb2:	b29a      	uxth	r2, r3
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002cb8:	e08e      	b.n	8002dd8 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cbe:	b29b      	uxth	r3, r3
 8002cc0:	2b02      	cmp	r3, #2
 8002cc2:	d176      	bne.n	8002db2 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	2b01      	cmp	r3, #1
 8002cc8:	d002      	beq.n	8002cd0 <I2C_MasterReceive_BTF+0xc4>
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	2b10      	cmp	r3, #16
 8002cce:	d108      	bne.n	8002ce2 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cde:	601a      	str	r2, [r3, #0]
 8002ce0:	e019      	b.n	8002d16 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	2b04      	cmp	r3, #4
 8002ce6:	d002      	beq.n	8002cee <I2C_MasterReceive_BTF+0xe2>
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	2b02      	cmp	r3, #2
 8002cec:	d108      	bne.n	8002d00 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	681a      	ldr	r2, [r3, #0]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002cfc:	601a      	str	r2, [r3, #0]
 8002cfe:	e00a      	b.n	8002d16 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	2b10      	cmp	r3, #16
 8002d04:	d007      	beq.n	8002d16 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	681a      	ldr	r2, [r3, #0]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d14:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	691a      	ldr	r2, [r3, #16]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d20:	b2d2      	uxtb	r2, r2
 8002d22:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d28:	1c5a      	adds	r2, r3, #1
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d32:	b29b      	uxth	r3, r3
 8002d34:	3b01      	subs	r3, #1
 8002d36:	b29a      	uxth	r2, r3
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	691a      	ldr	r2, [r3, #16]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d46:	b2d2      	uxtb	r2, r2
 8002d48:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d4e:	1c5a      	adds	r2, r3, #1
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d58:	b29b      	uxth	r3, r3
 8002d5a:	3b01      	subs	r3, #1
 8002d5c:	b29a      	uxth	r2, r3
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	685a      	ldr	r2, [r3, #4]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002d70:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2220      	movs	r2, #32
 8002d76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d80:	b2db      	uxtb	r3, r3
 8002d82:	2b40      	cmp	r3, #64	; 0x40
 8002d84:	d10a      	bne.n	8002d9c <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2200      	movs	r2, #0
 8002d92:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002d94:	6878      	ldr	r0, [r7, #4]
 8002d96:	f7ff fd2e 	bl	80027f6 <HAL_I2C_MemRxCpltCallback>
}
 8002d9a:	e01d      	b.n	8002dd8 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2212      	movs	r2, #18
 8002da8:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	f7ff fce9 	bl	8002782 <HAL_I2C_MasterRxCpltCallback>
}
 8002db0:	e012      	b.n	8002dd8 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	691a      	ldr	r2, [r3, #16]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dbc:	b2d2      	uxtb	r2, r2
 8002dbe:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc4:	1c5a      	adds	r2, r3, #1
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dce:	b29b      	uxth	r3, r3
 8002dd0:	3b01      	subs	r3, #1
 8002dd2:	b29a      	uxth	r2, r3
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002dd8:	bf00      	nop
 8002dda:	3710      	adds	r7, #16
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}

08002de0 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b083      	sub	sp, #12
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002dee:	b2db      	uxtb	r3, r3
 8002df0:	2b40      	cmp	r3, #64	; 0x40
 8002df2:	d117      	bne.n	8002e24 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d109      	bne.n	8002e10 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e00:	b2db      	uxtb	r3, r3
 8002e02:	461a      	mov	r2, r3
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002e0c:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8002e0e:	e067      	b.n	8002ee0 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	f043 0301 	orr.w	r3, r3, #1
 8002e1a:	b2da      	uxtb	r2, r3
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	611a      	str	r2, [r3, #16]
}
 8002e22:	e05d      	b.n	8002ee0 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	691b      	ldr	r3, [r3, #16]
 8002e28:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e2c:	d133      	bne.n	8002e96 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	2b21      	cmp	r3, #33	; 0x21
 8002e38:	d109      	bne.n	8002e4e <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e3e:	b2db      	uxtb	r3, r3
 8002e40:	461a      	mov	r2, r3
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002e4a:	611a      	str	r2, [r3, #16]
 8002e4c:	e008      	b.n	8002e60 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e52:	b2db      	uxtb	r3, r3
 8002e54:	f043 0301 	orr.w	r3, r3, #1
 8002e58:	b2da      	uxtb	r2, r3
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	611a      	str	r2, [r3, #16]
      if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d103      	bne.n	8002e70 <I2C_Master_SB+0x90>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d037      	beq.n	8002ee0 <I2C_Master_SB+0x100>
        if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d104      	bne.n	8002e84 <I2C_Master_SB+0xa4>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d02d      	beq.n	8002ee0 <I2C_Master_SB+0x100>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	685a      	ldr	r2, [r3, #4]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e92:	605a      	str	r2, [r3, #4]
}
 8002e94:	e024      	b.n	8002ee0 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d10e      	bne.n	8002ebc <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ea2:	b29b      	uxth	r3, r3
 8002ea4:	11db      	asrs	r3, r3, #7
 8002ea6:	b2db      	uxtb	r3, r3
 8002ea8:	f003 0306 	and.w	r3, r3, #6
 8002eac:	b2db      	uxtb	r3, r3
 8002eae:	f063 030f 	orn	r3, r3, #15
 8002eb2:	b2da      	uxtb	r2, r3
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	611a      	str	r2, [r3, #16]
}
 8002eba:	e011      	b.n	8002ee0 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ec0:	2b01      	cmp	r3, #1
 8002ec2:	d10d      	bne.n	8002ee0 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ec8:	b29b      	uxth	r3, r3
 8002eca:	11db      	asrs	r3, r3, #7
 8002ecc:	b2db      	uxtb	r3, r3
 8002ece:	f003 0306 	and.w	r3, r3, #6
 8002ed2:	b2db      	uxtb	r3, r3
 8002ed4:	f063 030e 	orn	r3, r3, #14
 8002ed8:	b2da      	uxtb	r2, r3
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	611a      	str	r2, [r3, #16]
}
 8002ee0:	bf00      	nop
 8002ee2:	370c      	adds	r7, #12
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bc80      	pop	{r7}
 8002ee8:	4770      	bx	lr

08002eea <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8002eea:	b480      	push	{r7}
 8002eec:	b083      	sub	sp, #12
 8002eee:	af00      	add	r7, sp, #0
 8002ef0:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ef6:	b2da      	uxtb	r2, r3
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d103      	bne.n	8002f0e <I2C_Master_ADD10+0x24>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d011      	beq.n	8002f32 <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d104      	bne.n	8002f22 <I2C_Master_ADD10+0x38>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d007      	beq.n	8002f32 <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	685a      	ldr	r2, [r3, #4]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f30:	605a      	str	r2, [r3, #4]
    }
  }
}
 8002f32:	bf00      	nop
 8002f34:	370c      	adds	r7, #12
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bc80      	pop	{r7}
 8002f3a:	4770      	bx	lr

08002f3c <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b091      	sub	sp, #68	; 0x44
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002f4a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f52:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f58:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	2b22      	cmp	r3, #34	; 0x22
 8002f64:	f040 8174 	bne.w	8003250 <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d10f      	bne.n	8002f90 <I2C_Master_ADDR+0x54>
 8002f70:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002f74:	2b40      	cmp	r3, #64	; 0x40
 8002f76:	d10b      	bne.n	8002f90 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f78:	2300      	movs	r3, #0
 8002f7a:	633b      	str	r3, [r7, #48]	; 0x30
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	695b      	ldr	r3, [r3, #20]
 8002f82:	633b      	str	r3, [r7, #48]	; 0x30
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	699b      	ldr	r3, [r3, #24]
 8002f8a:	633b      	str	r3, [r7, #48]	; 0x30
 8002f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f8e:	e16b      	b.n	8003268 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d11d      	bne.n	8002fd4 <I2C_Master_ADDR+0x98>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	691b      	ldr	r3, [r3, #16]
 8002f9c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002fa0:	d118      	bne.n	8002fd4 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	695b      	ldr	r3, [r3, #20]
 8002fac:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	699b      	ldr	r3, [r3, #24]
 8002fb4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002fb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	681a      	ldr	r2, [r3, #0]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002fc6:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fcc:	1c5a      	adds	r2, r3, #1
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	651a      	str	r2, [r3, #80]	; 0x50
 8002fd2:	e149      	b.n	8003268 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fd8:	b29b      	uxth	r3, r3
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d113      	bne.n	8003006 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fde:	2300      	movs	r3, #0
 8002fe0:	62bb      	str	r3, [r7, #40]	; 0x28
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	695b      	ldr	r3, [r3, #20]
 8002fe8:	62bb      	str	r3, [r7, #40]	; 0x28
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	699b      	ldr	r3, [r3, #24]
 8002ff0:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003002:	601a      	str	r2, [r3, #0]
 8003004:	e120      	b.n	8003248 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800300a:	b29b      	uxth	r3, r3
 800300c:	2b01      	cmp	r3, #1
 800300e:	f040 808a 	bne.w	8003126 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003012:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003014:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003018:	d137      	bne.n	800308a <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	681a      	ldr	r2, [r3, #0]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003028:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003034:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003038:	d113      	bne.n	8003062 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003048:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800304a:	2300      	movs	r3, #0
 800304c:	627b      	str	r3, [r7, #36]	; 0x24
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	695b      	ldr	r3, [r3, #20]
 8003054:	627b      	str	r3, [r7, #36]	; 0x24
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	699b      	ldr	r3, [r3, #24]
 800305c:	627b      	str	r3, [r7, #36]	; 0x24
 800305e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003060:	e0f2      	b.n	8003248 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003062:	2300      	movs	r3, #0
 8003064:	623b      	str	r3, [r7, #32]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	695b      	ldr	r3, [r3, #20]
 800306c:	623b      	str	r3, [r7, #32]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	699b      	ldr	r3, [r3, #24]
 8003074:	623b      	str	r3, [r7, #32]
 8003076:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	681a      	ldr	r2, [r3, #0]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003086:	601a      	str	r2, [r3, #0]
 8003088:	e0de      	b.n	8003248 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800308a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800308c:	2b08      	cmp	r3, #8
 800308e:	d02e      	beq.n	80030ee <I2C_Master_ADDR+0x1b2>
 8003090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003092:	2b20      	cmp	r3, #32
 8003094:	d02b      	beq.n	80030ee <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003096:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003098:	2b12      	cmp	r3, #18
 800309a:	d102      	bne.n	80030a2 <I2C_Master_ADDR+0x166>
 800309c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800309e:	2b01      	cmp	r3, #1
 80030a0:	d125      	bne.n	80030ee <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80030a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030a4:	2b04      	cmp	r3, #4
 80030a6:	d00e      	beq.n	80030c6 <I2C_Master_ADDR+0x18a>
 80030a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030aa:	2b02      	cmp	r3, #2
 80030ac:	d00b      	beq.n	80030c6 <I2C_Master_ADDR+0x18a>
 80030ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030b0:	2b10      	cmp	r3, #16
 80030b2:	d008      	beq.n	80030c6 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	681a      	ldr	r2, [r3, #0]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030c2:	601a      	str	r2, [r3, #0]
 80030c4:	e007      	b.n	80030d6 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	681a      	ldr	r2, [r3, #0]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80030d4:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030d6:	2300      	movs	r3, #0
 80030d8:	61fb      	str	r3, [r7, #28]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	695b      	ldr	r3, [r3, #20]
 80030e0:	61fb      	str	r3, [r7, #28]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	699b      	ldr	r3, [r3, #24]
 80030e8:	61fb      	str	r3, [r7, #28]
 80030ea:	69fb      	ldr	r3, [r7, #28]
 80030ec:	e0ac      	b.n	8003248 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	681a      	ldr	r2, [r3, #0]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030fc:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030fe:	2300      	movs	r3, #0
 8003100:	61bb      	str	r3, [r7, #24]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	695b      	ldr	r3, [r3, #20]
 8003108:	61bb      	str	r3, [r7, #24]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	699b      	ldr	r3, [r3, #24]
 8003110:	61bb      	str	r3, [r7, #24]
 8003112:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003122:	601a      	str	r2, [r3, #0]
 8003124:	e090      	b.n	8003248 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800312a:	b29b      	uxth	r3, r3
 800312c:	2b02      	cmp	r3, #2
 800312e:	d158      	bne.n	80031e2 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003132:	2b04      	cmp	r3, #4
 8003134:	d021      	beq.n	800317a <I2C_Master_ADDR+0x23e>
 8003136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003138:	2b02      	cmp	r3, #2
 800313a:	d01e      	beq.n	800317a <I2C_Master_ADDR+0x23e>
 800313c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800313e:	2b10      	cmp	r3, #16
 8003140:	d01b      	beq.n	800317a <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	681a      	ldr	r2, [r3, #0]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003150:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003152:	2300      	movs	r3, #0
 8003154:	617b      	str	r3, [r7, #20]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	695b      	ldr	r3, [r3, #20]
 800315c:	617b      	str	r3, [r7, #20]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	699b      	ldr	r3, [r3, #24]
 8003164:	617b      	str	r3, [r7, #20]
 8003166:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	681a      	ldr	r2, [r3, #0]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003176:	601a      	str	r2, [r3, #0]
 8003178:	e012      	b.n	80031a0 <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	681a      	ldr	r2, [r3, #0]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003188:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800318a:	2300      	movs	r3, #0
 800318c:	613b      	str	r3, [r7, #16]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	695b      	ldr	r3, [r3, #20]
 8003194:	613b      	str	r3, [r7, #16]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	699b      	ldr	r3, [r3, #24]
 800319c:	613b      	str	r3, [r7, #16]
 800319e:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031ae:	d14b      	bne.n	8003248 <I2C_Master_ADDR+0x30c>
 80031b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031b2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80031b6:	d00b      	beq.n	80031d0 <I2C_Master_ADDR+0x294>
 80031b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031ba:	2b01      	cmp	r3, #1
 80031bc:	d008      	beq.n	80031d0 <I2C_Master_ADDR+0x294>
 80031be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031c0:	2b08      	cmp	r3, #8
 80031c2:	d005      	beq.n	80031d0 <I2C_Master_ADDR+0x294>
 80031c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031c6:	2b10      	cmp	r3, #16
 80031c8:	d002      	beq.n	80031d0 <I2C_Master_ADDR+0x294>
 80031ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031cc:	2b20      	cmp	r3, #32
 80031ce:	d13b      	bne.n	8003248 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	685a      	ldr	r2, [r3, #4]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80031de:	605a      	str	r2, [r3, #4]
 80031e0:	e032      	b.n	8003248 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	681a      	ldr	r2, [r3, #0]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80031f0:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003200:	d117      	bne.n	8003232 <I2C_Master_ADDR+0x2f6>
 8003202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003204:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003208:	d00b      	beq.n	8003222 <I2C_Master_ADDR+0x2e6>
 800320a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800320c:	2b01      	cmp	r3, #1
 800320e:	d008      	beq.n	8003222 <I2C_Master_ADDR+0x2e6>
 8003210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003212:	2b08      	cmp	r3, #8
 8003214:	d005      	beq.n	8003222 <I2C_Master_ADDR+0x2e6>
 8003216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003218:	2b10      	cmp	r3, #16
 800321a:	d002      	beq.n	8003222 <I2C_Master_ADDR+0x2e6>
 800321c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800321e:	2b20      	cmp	r3, #32
 8003220:	d107      	bne.n	8003232 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	685a      	ldr	r2, [r3, #4]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003230:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003232:	2300      	movs	r3, #0
 8003234:	60fb      	str	r3, [r7, #12]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	695b      	ldr	r3, [r3, #20]
 800323c:	60fb      	str	r3, [r7, #12]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	699b      	ldr	r3, [r3, #24]
 8003244:	60fb      	str	r3, [r7, #12]
 8003246:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2200      	movs	r2, #0
 800324c:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800324e:	e00b      	b.n	8003268 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003250:	2300      	movs	r3, #0
 8003252:	60bb      	str	r3, [r7, #8]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	695b      	ldr	r3, [r3, #20]
 800325a:	60bb      	str	r3, [r7, #8]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	699b      	ldr	r3, [r3, #24]
 8003262:	60bb      	str	r3, [r7, #8]
 8003264:	68bb      	ldr	r3, [r7, #8]
}
 8003266:	e7ff      	b.n	8003268 <I2C_Master_ADDR+0x32c>
 8003268:	bf00      	nop
 800326a:	3744      	adds	r7, #68	; 0x44
 800326c:	46bd      	mov	sp, r7
 800326e:	bc80      	pop	{r7}
 8003270:	4770      	bx	lr

08003272 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003272:	b580      	push	{r7, lr}
 8003274:	b084      	sub	sp, #16
 8003276:	af00      	add	r7, sp, #0
 8003278:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003280:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003286:	b29b      	uxth	r3, r3
 8003288:	2b00      	cmp	r3, #0
 800328a:	d02b      	beq.n	80032e4 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003290:	781a      	ldrb	r2, [r3, #0]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800329c:	1c5a      	adds	r2, r3, #1
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032a6:	b29b      	uxth	r3, r3
 80032a8:	3b01      	subs	r3, #1
 80032aa:	b29a      	uxth	r2, r3
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032b4:	b29b      	uxth	r3, r3
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d114      	bne.n	80032e4 <I2C_SlaveTransmit_TXE+0x72>
 80032ba:	7bfb      	ldrb	r3, [r7, #15]
 80032bc:	2b29      	cmp	r3, #41	; 0x29
 80032be:	d111      	bne.n	80032e4 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	685a      	ldr	r2, [r3, #4]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032ce:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2221      	movs	r2, #33	; 0x21
 80032d4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2228      	movs	r2, #40	; 0x28
 80032da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	f7ff fa58 	bl	8002794 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80032e4:	bf00      	nop
 80032e6:	3710      	adds	r7, #16
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bd80      	pop	{r7, pc}

080032ec <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b083      	sub	sp, #12
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032f8:	b29b      	uxth	r3, r3
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d011      	beq.n	8003322 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003302:	781a      	ldrb	r2, [r3, #0]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800330e:	1c5a      	adds	r2, r3, #1
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003318:	b29b      	uxth	r3, r3
 800331a:	3b01      	subs	r3, #1
 800331c:	b29a      	uxth	r2, r3
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003322:	bf00      	nop
 8003324:	370c      	adds	r7, #12
 8003326:	46bd      	mov	sp, r7
 8003328:	bc80      	pop	{r7}
 800332a:	4770      	bx	lr

0800332c <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b084      	sub	sp, #16
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800333a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003340:	b29b      	uxth	r3, r3
 8003342:	2b00      	cmp	r3, #0
 8003344:	d02c      	beq.n	80033a0 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	691a      	ldr	r2, [r3, #16]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003350:	b2d2      	uxtb	r2, r2
 8003352:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003358:	1c5a      	adds	r2, r3, #1
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003362:	b29b      	uxth	r3, r3
 8003364:	3b01      	subs	r3, #1
 8003366:	b29a      	uxth	r2, r3
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003370:	b29b      	uxth	r3, r3
 8003372:	2b00      	cmp	r3, #0
 8003374:	d114      	bne.n	80033a0 <I2C_SlaveReceive_RXNE+0x74>
 8003376:	7bfb      	ldrb	r3, [r7, #15]
 8003378:	2b2a      	cmp	r3, #42	; 0x2a
 800337a:	d111      	bne.n	80033a0 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	685a      	ldr	r2, [r3, #4]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800338a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2222      	movs	r2, #34	; 0x22
 8003390:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2228      	movs	r2, #40	; 0x28
 8003396:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f7ff fa03 	bl	80027a6 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80033a0:	bf00      	nop
 80033a2:	3710      	adds	r7, #16
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}

080033a8 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b083      	sub	sp, #12
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033b4:	b29b      	uxth	r3, r3
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d012      	beq.n	80033e0 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	691a      	ldr	r2, [r3, #16]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c4:	b2d2      	uxtb	r2, r2
 80033c6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033cc:	1c5a      	adds	r2, r3, #1
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033d6:	b29b      	uxth	r3, r3
 80033d8:	3b01      	subs	r3, #1
 80033da:	b29a      	uxth	r2, r3
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80033e0:	bf00      	nop
 80033e2:	370c      	adds	r7, #12
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bc80      	pop	{r7}
 80033e8:	4770      	bx	lr

080033ea <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80033ea:	b580      	push	{r7, lr}
 80033ec:	b084      	sub	sp, #16
 80033ee:	af00      	add	r7, sp, #0
 80033f0:	6078      	str	r0, [r7, #4]
 80033f2:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80033f4:	2300      	movs	r3, #0
 80033f6:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033fe:	b2db      	uxtb	r3, r3
 8003400:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003404:	2b28      	cmp	r3, #40	; 0x28
 8003406:	d127      	bne.n	8003458 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	685a      	ldr	r2, [r3, #4]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003416:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	089b      	lsrs	r3, r3, #2
 800341c:	f003 0301 	and.w	r3, r3, #1
 8003420:	2b00      	cmp	r3, #0
 8003422:	d101      	bne.n	8003428 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8003424:	2301      	movs	r3, #1
 8003426:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	09db      	lsrs	r3, r3, #7
 800342c:	f003 0301 	and.w	r3, r3, #1
 8003430:	2b00      	cmp	r3, #0
 8003432:	d103      	bne.n	800343c <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	68db      	ldr	r3, [r3, #12]
 8003438:	81bb      	strh	r3, [r7, #12]
 800343a:	e002      	b.n	8003442 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	699b      	ldr	r3, [r3, #24]
 8003440:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2200      	movs	r2, #0
 8003446:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800344a:	89ba      	ldrh	r2, [r7, #12]
 800344c:	7bfb      	ldrb	r3, [r7, #15]
 800344e:	4619      	mov	r1, r3
 8003450:	6878      	ldr	r0, [r7, #4]
 8003452:	f7ff f9b1 	bl	80027b8 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003456:	e008      	b.n	800346a <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f06f 0202 	mvn.w	r2, #2
 8003460:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2200      	movs	r2, #0
 8003466:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800346a:	bf00      	nop
 800346c:	3710      	adds	r7, #16
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}
	...

08003474 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b084      	sub	sp, #16
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003482:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	685a      	ldr	r2, [r3, #4]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003492:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003494:	2300      	movs	r3, #0
 8003496:	60bb      	str	r3, [r7, #8]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	695b      	ldr	r3, [r3, #20]
 800349e:	60bb      	str	r3, [r7, #8]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	681a      	ldr	r2, [r3, #0]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f042 0201 	orr.w	r2, r2, #1
 80034ae:	601a      	str	r2, [r3, #0]
 80034b0:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	681a      	ldr	r2, [r3, #0]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034c0:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80034d0:	d172      	bne.n	80035b8 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80034d2:	7bfb      	ldrb	r3, [r7, #15]
 80034d4:	2b22      	cmp	r3, #34	; 0x22
 80034d6:	d002      	beq.n	80034de <I2C_Slave_STOPF+0x6a>
 80034d8:	7bfb      	ldrb	r3, [r7, #15]
 80034da:	2b2a      	cmp	r3, #42	; 0x2a
 80034dc:	d135      	bne.n	800354a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	b29a      	uxth	r2, r3
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034f0:	b29b      	uxth	r3, r3
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d005      	beq.n	8003502 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034fa:	f043 0204 	orr.w	r2, r3, #4
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	685a      	ldr	r2, [r3, #4]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003510:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003516:	4618      	mov	r0, r3
 8003518:	f7fe fe0c 	bl	8002134 <HAL_DMA_GetState>
 800351c:	4603      	mov	r3, r0
 800351e:	2b01      	cmp	r3, #1
 8003520:	d049      	beq.n	80035b6 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003526:	4a69      	ldr	r2, [pc, #420]	; (80036cc <I2C_Slave_STOPF+0x258>)
 8003528:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800352e:	4618      	mov	r0, r3
 8003530:	f7fe fc84 	bl	8001e3c <HAL_DMA_Abort_IT>
 8003534:	4603      	mov	r3, r0
 8003536:	2b00      	cmp	r3, #0
 8003538:	d03d      	beq.n	80035b6 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800353e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003540:	687a      	ldr	r2, [r7, #4]
 8003542:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003544:	4610      	mov	r0, r2
 8003546:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003548:	e035      	b.n	80035b6 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	b29a      	uxth	r2, r3
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800355c:	b29b      	uxth	r3, r3
 800355e:	2b00      	cmp	r3, #0
 8003560:	d005      	beq.n	800356e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003566:	f043 0204 	orr.w	r2, r3, #4
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	685a      	ldr	r2, [r3, #4]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800357c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003582:	4618      	mov	r0, r3
 8003584:	f7fe fdd6 	bl	8002134 <HAL_DMA_GetState>
 8003588:	4603      	mov	r3, r0
 800358a:	2b01      	cmp	r3, #1
 800358c:	d014      	beq.n	80035b8 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003592:	4a4e      	ldr	r2, [pc, #312]	; (80036cc <I2C_Slave_STOPF+0x258>)
 8003594:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800359a:	4618      	mov	r0, r3
 800359c:	f7fe fc4e 	bl	8001e3c <HAL_DMA_Abort_IT>
 80035a0:	4603      	mov	r3, r0
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d008      	beq.n	80035b8 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035ac:	687a      	ldr	r2, [r7, #4]
 80035ae:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80035b0:	4610      	mov	r0, r2
 80035b2:	4798      	blx	r3
 80035b4:	e000      	b.n	80035b8 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80035b6:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035bc:	b29b      	uxth	r3, r3
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d03e      	beq.n	8003640 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	695b      	ldr	r3, [r3, #20]
 80035c8:	f003 0304 	and.w	r3, r3, #4
 80035cc:	2b04      	cmp	r3, #4
 80035ce:	d112      	bne.n	80035f6 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	691a      	ldr	r2, [r3, #16]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035da:	b2d2      	uxtb	r2, r2
 80035dc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e2:	1c5a      	adds	r2, r3, #1
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035ec:	b29b      	uxth	r3, r3
 80035ee:	3b01      	subs	r3, #1
 80035f0:	b29a      	uxth	r2, r3
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	695b      	ldr	r3, [r3, #20]
 80035fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003600:	2b40      	cmp	r3, #64	; 0x40
 8003602:	d112      	bne.n	800362a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	691a      	ldr	r2, [r3, #16]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800360e:	b2d2      	uxtb	r2, r2
 8003610:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003616:	1c5a      	adds	r2, r3, #1
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003620:	b29b      	uxth	r3, r3
 8003622:	3b01      	subs	r3, #1
 8003624:	b29a      	uxth	r2, r3
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800362e:	b29b      	uxth	r3, r3
 8003630:	2b00      	cmp	r3, #0
 8003632:	d005      	beq.n	8003640 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003638:	f043 0204 	orr.w	r2, r3, #4
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003644:	2b00      	cmp	r3, #0
 8003646:	d003      	beq.n	8003650 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8003648:	6878      	ldr	r0, [r7, #4]
 800364a:	f000 f843 	bl	80036d4 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800364e:	e039      	b.n	80036c4 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003650:	7bfb      	ldrb	r3, [r7, #15]
 8003652:	2b2a      	cmp	r3, #42	; 0x2a
 8003654:	d109      	bne.n	800366a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2200      	movs	r2, #0
 800365a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2228      	movs	r2, #40	; 0x28
 8003660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003664:	6878      	ldr	r0, [r7, #4]
 8003666:	f7ff f89e 	bl	80027a6 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003670:	b2db      	uxtb	r3, r3
 8003672:	2b28      	cmp	r3, #40	; 0x28
 8003674:	d111      	bne.n	800369a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	4a15      	ldr	r2, [pc, #84]	; (80036d0 <I2C_Slave_STOPF+0x25c>)
 800367a:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2200      	movs	r2, #0
 8003680:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2220      	movs	r2, #32
 8003686:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2200      	movs	r2, #0
 800368e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f7ff f89d 	bl	80027d2 <HAL_I2C_ListenCpltCallback>
}
 8003698:	e014      	b.n	80036c4 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800369e:	2b22      	cmp	r3, #34	; 0x22
 80036a0:	d002      	beq.n	80036a8 <I2C_Slave_STOPF+0x234>
 80036a2:	7bfb      	ldrb	r3, [r7, #15]
 80036a4:	2b22      	cmp	r3, #34	; 0x22
 80036a6:	d10d      	bne.n	80036c4 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2200      	movs	r2, #0
 80036ac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2220      	movs	r2, #32
 80036b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2200      	movs	r2, #0
 80036ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	f7ff f871 	bl	80027a6 <HAL_I2C_SlaveRxCpltCallback>
}
 80036c4:	bf00      	nop
 80036c6:	3710      	adds	r7, #16
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bd80      	pop	{r7, pc}
 80036cc:	08003901 	.word	0x08003901
 80036d0:	ffff0000 	.word	0xffff0000

080036d4 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b084      	sub	sp, #16
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036e2:	73fb      	strb	r3, [r7, #15]

  if ((hi2c->Mode == HAL_I2C_MODE_MASTER) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80036ea:	b2db      	uxtb	r3, r3
 80036ec:	2b10      	cmp	r3, #16
 80036ee:	d10a      	bne.n	8003706 <I2C_ITError+0x32>
 80036f0:	7bfb      	ldrb	r3, [r7, #15]
 80036f2:	2b22      	cmp	r3, #34	; 0x22
 80036f4:	d107      	bne.n	8003706 <I2C_ITError+0x32>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003704:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003706:	7bfb      	ldrb	r3, [r7, #15]
 8003708:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800370c:	2b28      	cmp	r3, #40	; 0x28
 800370e:	d107      	bne.n	8003720 <I2C_ITError+0x4c>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2200      	movs	r2, #0
 8003714:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2228      	movs	r2, #40	; 0x28
 800371a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800371e:	e015      	b.n	800374c <I2C_ITError+0x78>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800372a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800372e:	d006      	beq.n	800373e <I2C_ITError+0x6a>
 8003730:	7bfb      	ldrb	r3, [r7, #15]
 8003732:	2b60      	cmp	r3, #96	; 0x60
 8003734:	d003      	beq.n	800373e <I2C_ITError+0x6a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2220      	movs	r2, #32
 800373a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2200      	movs	r2, #0
 8003742:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2200      	movs	r2, #0
 8003748:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003756:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800375a:	d161      	bne.n	8003820 <I2C_ITError+0x14c>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	685a      	ldr	r2, [r3, #4]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800376a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003770:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003774:	2b01      	cmp	r3, #1
 8003776:	d020      	beq.n	80037ba <I2C_ITError+0xe6>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800377c:	4a5e      	ldr	r2, [pc, #376]	; (80038f8 <I2C_ITError+0x224>)
 800377e:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003784:	4618      	mov	r0, r3
 8003786:	f7fe fb59 	bl	8001e3c <HAL_DMA_Abort_IT>
 800378a:	4603      	mov	r3, r0
 800378c:	2b00      	cmp	r3, #0
 800378e:	f000 8089 	beq.w	80038a4 <I2C_ITError+0x1d0>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	681a      	ldr	r2, [r3, #0]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f022 0201 	bic.w	r2, r2, #1
 80037a0:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2220      	movs	r2, #32
 80037a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037b0:	687a      	ldr	r2, [r7, #4]
 80037b2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80037b4:	4610      	mov	r0, r2
 80037b6:	4798      	blx	r3
 80037b8:	e074      	b.n	80038a4 <I2C_ITError+0x1d0>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037be:	4a4e      	ldr	r2, [pc, #312]	; (80038f8 <I2C_ITError+0x224>)
 80037c0:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037c6:	4618      	mov	r0, r3
 80037c8:	f7fe fb38 	bl	8001e3c <HAL_DMA_Abort_IT>
 80037cc:	4603      	mov	r3, r0
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d068      	beq.n	80038a4 <I2C_ITError+0x1d0>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	695b      	ldr	r3, [r3, #20]
 80037d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037dc:	2b40      	cmp	r3, #64	; 0x40
 80037de:	d10b      	bne.n	80037f8 <I2C_ITError+0x124>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	691a      	ldr	r2, [r3, #16]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ea:	b2d2      	uxtb	r2, r2
 80037ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f2:	1c5a      	adds	r2, r3, #1
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	681a      	ldr	r2, [r3, #0]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f022 0201 	bic.w	r2, r2, #1
 8003806:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2220      	movs	r2, #32
 800380c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003814:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003816:	687a      	ldr	r2, [r7, #4]
 8003818:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800381a:	4610      	mov	r0, r2
 800381c:	4798      	blx	r3
 800381e:	e041      	b.n	80038a4 <I2C_ITError+0x1d0>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003826:	b2db      	uxtb	r3, r3
 8003828:	2b60      	cmp	r3, #96	; 0x60
 800382a:	d125      	bne.n	8003878 <I2C_ITError+0x1a4>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2220      	movs	r2, #32
 8003830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2200      	movs	r2, #0
 8003838:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	695b      	ldr	r3, [r3, #20]
 8003840:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003844:	2b40      	cmp	r3, #64	; 0x40
 8003846:	d10b      	bne.n	8003860 <I2C_ITError+0x18c>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	691a      	ldr	r2, [r3, #16]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003852:	b2d2      	uxtb	r2, r2
 8003854:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800385a:	1c5a      	adds	r2, r3, #1
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	681a      	ldr	r2, [r3, #0]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f022 0201 	bic.w	r2, r2, #1
 800386e:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003870:	6878      	ldr	r0, [r7, #4]
 8003872:	f7fe ffd2 	bl	800281a <HAL_I2C_AbortCpltCallback>
 8003876:	e015      	b.n	80038a4 <I2C_ITError+0x1d0>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	695b      	ldr	r3, [r3, #20]
 800387e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003882:	2b40      	cmp	r3, #64	; 0x40
 8003884:	d10b      	bne.n	800389e <I2C_ITError+0x1ca>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	691a      	ldr	r2, [r3, #16]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003890:	b2d2      	uxtb	r2, r2
 8003892:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003898:	1c5a      	adds	r2, r3, #1
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f7fe ffb2 	bl	8002808 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  /* STOP Flag is not set after a NACK reception */
  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038aa:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b0:	f003 0304 	and.w	r3, r3, #4
 80038b4:	2b04      	cmp	r3, #4
 80038b6:	d11b      	bne.n	80038f0 <I2C_ITError+0x21c>
 80038b8:	7bfb      	ldrb	r3, [r7, #15]
 80038ba:	2b28      	cmp	r3, #40	; 0x28
 80038bc:	d118      	bne.n	80038f0 <I2C_ITError+0x21c>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	685a      	ldr	r2, [r3, #4]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80038cc:	605a      	str	r2, [r3, #4]

    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	4a0a      	ldr	r2, [pc, #40]	; (80038fc <I2C_ITError+0x228>)
 80038d2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2200      	movs	r2, #0
 80038d8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2220      	movs	r2, #32
 80038de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2200      	movs	r2, #0
 80038e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	f7fe ff71 	bl	80027d2 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80038f0:	bf00      	nop
 80038f2:	3710      	adds	r7, #16
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bd80      	pop	{r7, pc}
 80038f8:	08003901 	.word	0x08003901
 80038fc:	ffff0000 	.word	0xffff0000

08003900 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b084      	sub	sp, #16
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800390c:	60fb      	str	r3, [r7, #12]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003914:	72fb      	strb	r3, [r7, #11]

  /* Clear Complete callback */
  hi2c->hdmatx->XferCpltCallback = NULL;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800391a:	2200      	movs	r2, #0
 800391c:	629a      	str	r2, [r3, #40]	; 0x28
  hi2c->hdmarx->XferCpltCallback = NULL;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003922:	2200      	movs	r2, #0
 8003924:	629a      	str	r2, [r3, #40]	; 0x28

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003934:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	2200      	movs	r2, #0
 800393a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  hi2c->hdmatx->XferAbortCallback = NULL;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003940:	2200      	movs	r2, #0
 8003942:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->hdmarx->XferAbortCallback = NULL;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003948:	2200      	movs	r2, #0
 800394a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	681a      	ldr	r2, [r3, #0]
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f022 0201 	bic.w	r2, r2, #1
 800395a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003962:	b2db      	uxtb	r3, r3
 8003964:	2b60      	cmp	r3, #96	; 0x60
 8003966:	d10e      	bne.n	8003986 <I2C_DMAAbort+0x86>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	2220      	movs	r2, #32
 800396c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	2200      	movs	r2, #0
 8003974:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2200      	movs	r2, #0
 800397c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800397e:	68f8      	ldr	r0, [r7, #12]
 8003980:	f7fe ff4b 	bl	800281a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003984:	e027      	b.n	80039d6 <I2C_DMAAbort+0xd6>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003986:	7afb      	ldrb	r3, [r7, #11]
 8003988:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800398c:	2b28      	cmp	r3, #40	; 0x28
 800398e:	d117      	bne.n	80039c0 <I2C_DMAAbort+0xc0>
      __HAL_I2C_ENABLE(hi2c);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	681a      	ldr	r2, [r3, #0]
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f042 0201 	orr.w	r2, r2, #1
 800399e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	681a      	ldr	r2, [r3, #0]
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80039ae:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	2200      	movs	r2, #0
 80039b4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	2228      	movs	r2, #40	; 0x28
 80039ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80039be:	e007      	b.n	80039d0 <I2C_DMAAbort+0xd0>
      hi2c->State = HAL_I2C_STATE_READY;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	2220      	movs	r2, #32
 80039c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	2200      	movs	r2, #0
 80039cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80039d0:	68f8      	ldr	r0, [r7, #12]
 80039d2:	f7fe ff19 	bl	8002808 <HAL_I2C_ErrorCallback>
}
 80039d6:	bf00      	nop
 80039d8:	3710      	adds	r7, #16
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}

080039de <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80039de:	b480      	push	{r7}
 80039e0:	b083      	sub	sp, #12
 80039e2:	af00      	add	r7, sp, #0
 80039e4:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ea:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80039ee:	d103      	bne.n	80039f8 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2201      	movs	r2, #1
 80039f4:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80039f6:	e007      	b.n	8003a08 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039fc:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003a00:	d102      	bne.n	8003a08 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2208      	movs	r2, #8
 8003a06:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003a08:	bf00      	nop
 8003a0a:	370c      	adds	r7, #12
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bc80      	pop	{r7}
 8003a10:	4770      	bx	lr

08003a12 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8003a12:	b580      	push	{r7, lr}
 8003a14:	b084      	sub	sp, #16
 8003a16:	af00      	add	r7, sp, #0
 8003a18:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d101      	bne.n	8003a24 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8003a20:	2301      	movs	r3, #1
 8003a22:	e02b      	b.n	8003a7c <HAL_IWDG_Init+0x6a>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automaticaly */
  __HAL_IWDG_START(hiwdg);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8003a2c:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing 0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f245 5255 	movw	r2, #21845	; 0x5555
 8003a36:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	687a      	ldr	r2, [r7, #4]
 8003a3e:	6852      	ldr	r2, [r2, #4]
 8003a40:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	687a      	ldr	r2, [r7, #4]
 8003a48:	6892      	ldr	r2, [r2, #8]
 8003a4a:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8003a4c:	f7fe f8b2 	bl	8001bb4 <HAL_GetTick>
 8003a50:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while (hiwdg->Instance->SR != RESET)
 8003a52:	e008      	b.n	8003a66 <HAL_IWDG_Init+0x54>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8003a54:	f7fe f8ae 	bl	8001bb4 <HAL_GetTick>
 8003a58:	4602      	mov	r2, r0
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	1ad3      	subs	r3, r2, r3
 8003a5e:	2b30      	cmp	r3, #48	; 0x30
 8003a60:	d901      	bls.n	8003a66 <HAL_IWDG_Init+0x54>
    {
      return HAL_TIMEOUT;
 8003a62:	2303      	movs	r3, #3
 8003a64:	e00a      	b.n	8003a7c <HAL_IWDG_Init+0x6a>
  while (hiwdg->Instance->SR != RESET)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	68db      	ldr	r3, [r3, #12]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d1f1      	bne.n	8003a54 <HAL_IWDG_Init+0x42>
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8003a78:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003a7a:	2300      	movs	r3, #0
}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	3710      	adds	r7, #16
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd80      	pop	{r7, pc}

08003a84 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b083      	sub	sp, #12
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8003a94:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003a96:	2300      	movs	r3, #0
}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	370c      	adds	r7, #12
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bc80      	pop	{r7}
 8003aa0:	4770      	bx	lr
	...

08003aa4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b086      	sub	sp, #24
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d101      	bne.n	8003ab6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e26c      	b.n	8003f90 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f003 0301 	and.w	r3, r3, #1
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	f000 8087 	beq.w	8003bd2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003ac4:	4b92      	ldr	r3, [pc, #584]	; (8003d10 <HAL_RCC_OscConfig+0x26c>)
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	f003 030c 	and.w	r3, r3, #12
 8003acc:	2b04      	cmp	r3, #4
 8003ace:	d00c      	beq.n	8003aea <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003ad0:	4b8f      	ldr	r3, [pc, #572]	; (8003d10 <HAL_RCC_OscConfig+0x26c>)
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	f003 030c 	and.w	r3, r3, #12
 8003ad8:	2b08      	cmp	r3, #8
 8003ada:	d112      	bne.n	8003b02 <HAL_RCC_OscConfig+0x5e>
 8003adc:	4b8c      	ldr	r3, [pc, #560]	; (8003d10 <HAL_RCC_OscConfig+0x26c>)
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ae4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ae8:	d10b      	bne.n	8003b02 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003aea:	4b89      	ldr	r3, [pc, #548]	; (8003d10 <HAL_RCC_OscConfig+0x26c>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d06c      	beq.n	8003bd0 <HAL_RCC_OscConfig+0x12c>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d168      	bne.n	8003bd0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	e246      	b.n	8003f90 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b0a:	d106      	bne.n	8003b1a <HAL_RCC_OscConfig+0x76>
 8003b0c:	4b80      	ldr	r3, [pc, #512]	; (8003d10 <HAL_RCC_OscConfig+0x26c>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a7f      	ldr	r2, [pc, #508]	; (8003d10 <HAL_RCC_OscConfig+0x26c>)
 8003b12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b16:	6013      	str	r3, [r2, #0]
 8003b18:	e02e      	b.n	8003b78 <HAL_RCC_OscConfig+0xd4>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d10c      	bne.n	8003b3c <HAL_RCC_OscConfig+0x98>
 8003b22:	4b7b      	ldr	r3, [pc, #492]	; (8003d10 <HAL_RCC_OscConfig+0x26c>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a7a      	ldr	r2, [pc, #488]	; (8003d10 <HAL_RCC_OscConfig+0x26c>)
 8003b28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b2c:	6013      	str	r3, [r2, #0]
 8003b2e:	4b78      	ldr	r3, [pc, #480]	; (8003d10 <HAL_RCC_OscConfig+0x26c>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a77      	ldr	r2, [pc, #476]	; (8003d10 <HAL_RCC_OscConfig+0x26c>)
 8003b34:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b38:	6013      	str	r3, [r2, #0]
 8003b3a:	e01d      	b.n	8003b78 <HAL_RCC_OscConfig+0xd4>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b44:	d10c      	bne.n	8003b60 <HAL_RCC_OscConfig+0xbc>
 8003b46:	4b72      	ldr	r3, [pc, #456]	; (8003d10 <HAL_RCC_OscConfig+0x26c>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a71      	ldr	r2, [pc, #452]	; (8003d10 <HAL_RCC_OscConfig+0x26c>)
 8003b4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b50:	6013      	str	r3, [r2, #0]
 8003b52:	4b6f      	ldr	r3, [pc, #444]	; (8003d10 <HAL_RCC_OscConfig+0x26c>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a6e      	ldr	r2, [pc, #440]	; (8003d10 <HAL_RCC_OscConfig+0x26c>)
 8003b58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b5c:	6013      	str	r3, [r2, #0]
 8003b5e:	e00b      	b.n	8003b78 <HAL_RCC_OscConfig+0xd4>
 8003b60:	4b6b      	ldr	r3, [pc, #428]	; (8003d10 <HAL_RCC_OscConfig+0x26c>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a6a      	ldr	r2, [pc, #424]	; (8003d10 <HAL_RCC_OscConfig+0x26c>)
 8003b66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b6a:	6013      	str	r3, [r2, #0]
 8003b6c:	4b68      	ldr	r3, [pc, #416]	; (8003d10 <HAL_RCC_OscConfig+0x26c>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a67      	ldr	r2, [pc, #412]	; (8003d10 <HAL_RCC_OscConfig+0x26c>)
 8003b72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b76:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d013      	beq.n	8003ba8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b80:	f7fe f818 	bl	8001bb4 <HAL_GetTick>
 8003b84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b86:	e008      	b.n	8003b9a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b88:	f7fe f814 	bl	8001bb4 <HAL_GetTick>
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	1ad3      	subs	r3, r2, r3
 8003b92:	2b64      	cmp	r3, #100	; 0x64
 8003b94:	d901      	bls.n	8003b9a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003b96:	2303      	movs	r3, #3
 8003b98:	e1fa      	b.n	8003f90 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b9a:	4b5d      	ldr	r3, [pc, #372]	; (8003d10 <HAL_RCC_OscConfig+0x26c>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d0f0      	beq.n	8003b88 <HAL_RCC_OscConfig+0xe4>
 8003ba6:	e014      	b.n	8003bd2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ba8:	f7fe f804 	bl	8001bb4 <HAL_GetTick>
 8003bac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bae:	e008      	b.n	8003bc2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bb0:	f7fe f800 	bl	8001bb4 <HAL_GetTick>
 8003bb4:	4602      	mov	r2, r0
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	1ad3      	subs	r3, r2, r3
 8003bba:	2b64      	cmp	r3, #100	; 0x64
 8003bbc:	d901      	bls.n	8003bc2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003bbe:	2303      	movs	r3, #3
 8003bc0:	e1e6      	b.n	8003f90 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bc2:	4b53      	ldr	r3, [pc, #332]	; (8003d10 <HAL_RCC_OscConfig+0x26c>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d1f0      	bne.n	8003bb0 <HAL_RCC_OscConfig+0x10c>
 8003bce:	e000      	b.n	8003bd2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f003 0302 	and.w	r3, r3, #2
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d063      	beq.n	8003ca6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003bde:	4b4c      	ldr	r3, [pc, #304]	; (8003d10 <HAL_RCC_OscConfig+0x26c>)
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	f003 030c 	and.w	r3, r3, #12
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d00b      	beq.n	8003c02 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003bea:	4b49      	ldr	r3, [pc, #292]	; (8003d10 <HAL_RCC_OscConfig+0x26c>)
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	f003 030c 	and.w	r3, r3, #12
 8003bf2:	2b08      	cmp	r3, #8
 8003bf4:	d11c      	bne.n	8003c30 <HAL_RCC_OscConfig+0x18c>
 8003bf6:	4b46      	ldr	r3, [pc, #280]	; (8003d10 <HAL_RCC_OscConfig+0x26c>)
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d116      	bne.n	8003c30 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c02:	4b43      	ldr	r3, [pc, #268]	; (8003d10 <HAL_RCC_OscConfig+0x26c>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f003 0302 	and.w	r3, r3, #2
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d005      	beq.n	8003c1a <HAL_RCC_OscConfig+0x176>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	691b      	ldr	r3, [r3, #16]
 8003c12:	2b01      	cmp	r3, #1
 8003c14:	d001      	beq.n	8003c1a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	e1ba      	b.n	8003f90 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c1a:	4b3d      	ldr	r3, [pc, #244]	; (8003d10 <HAL_RCC_OscConfig+0x26c>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	695b      	ldr	r3, [r3, #20]
 8003c26:	00db      	lsls	r3, r3, #3
 8003c28:	4939      	ldr	r1, [pc, #228]	; (8003d10 <HAL_RCC_OscConfig+0x26c>)
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c2e:	e03a      	b.n	8003ca6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	691b      	ldr	r3, [r3, #16]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d020      	beq.n	8003c7a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c38:	4b36      	ldr	r3, [pc, #216]	; (8003d14 <HAL_RCC_OscConfig+0x270>)
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c3e:	f7fd ffb9 	bl	8001bb4 <HAL_GetTick>
 8003c42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c44:	e008      	b.n	8003c58 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c46:	f7fd ffb5 	bl	8001bb4 <HAL_GetTick>
 8003c4a:	4602      	mov	r2, r0
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	1ad3      	subs	r3, r2, r3
 8003c50:	2b02      	cmp	r3, #2
 8003c52:	d901      	bls.n	8003c58 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003c54:	2303      	movs	r3, #3
 8003c56:	e19b      	b.n	8003f90 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c58:	4b2d      	ldr	r3, [pc, #180]	; (8003d10 <HAL_RCC_OscConfig+0x26c>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f003 0302 	and.w	r3, r3, #2
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d0f0      	beq.n	8003c46 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c64:	4b2a      	ldr	r3, [pc, #168]	; (8003d10 <HAL_RCC_OscConfig+0x26c>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	695b      	ldr	r3, [r3, #20]
 8003c70:	00db      	lsls	r3, r3, #3
 8003c72:	4927      	ldr	r1, [pc, #156]	; (8003d10 <HAL_RCC_OscConfig+0x26c>)
 8003c74:	4313      	orrs	r3, r2
 8003c76:	600b      	str	r3, [r1, #0]
 8003c78:	e015      	b.n	8003ca6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c7a:	4b26      	ldr	r3, [pc, #152]	; (8003d14 <HAL_RCC_OscConfig+0x270>)
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c80:	f7fd ff98 	bl	8001bb4 <HAL_GetTick>
 8003c84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c86:	e008      	b.n	8003c9a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c88:	f7fd ff94 	bl	8001bb4 <HAL_GetTick>
 8003c8c:	4602      	mov	r2, r0
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	1ad3      	subs	r3, r2, r3
 8003c92:	2b02      	cmp	r3, #2
 8003c94:	d901      	bls.n	8003c9a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003c96:	2303      	movs	r3, #3
 8003c98:	e17a      	b.n	8003f90 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c9a:	4b1d      	ldr	r3, [pc, #116]	; (8003d10 <HAL_RCC_OscConfig+0x26c>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f003 0302 	and.w	r3, r3, #2
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d1f0      	bne.n	8003c88 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f003 0308 	and.w	r3, r3, #8
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d03a      	beq.n	8003d28 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	699b      	ldr	r3, [r3, #24]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d019      	beq.n	8003cee <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003cba:	4b17      	ldr	r3, [pc, #92]	; (8003d18 <HAL_RCC_OscConfig+0x274>)
 8003cbc:	2201      	movs	r2, #1
 8003cbe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cc0:	f7fd ff78 	bl	8001bb4 <HAL_GetTick>
 8003cc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cc6:	e008      	b.n	8003cda <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cc8:	f7fd ff74 	bl	8001bb4 <HAL_GetTick>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	1ad3      	subs	r3, r2, r3
 8003cd2:	2b02      	cmp	r3, #2
 8003cd4:	d901      	bls.n	8003cda <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003cd6:	2303      	movs	r3, #3
 8003cd8:	e15a      	b.n	8003f90 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cda:	4b0d      	ldr	r3, [pc, #52]	; (8003d10 <HAL_RCC_OscConfig+0x26c>)
 8003cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cde:	f003 0302 	and.w	r3, r3, #2
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d0f0      	beq.n	8003cc8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003ce6:	2001      	movs	r0, #1
 8003ce8:	f000 fb0a 	bl	8004300 <RCC_Delay>
 8003cec:	e01c      	b.n	8003d28 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003cee:	4b0a      	ldr	r3, [pc, #40]	; (8003d18 <HAL_RCC_OscConfig+0x274>)
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cf4:	f7fd ff5e 	bl	8001bb4 <HAL_GetTick>
 8003cf8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cfa:	e00f      	b.n	8003d1c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cfc:	f7fd ff5a 	bl	8001bb4 <HAL_GetTick>
 8003d00:	4602      	mov	r2, r0
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	1ad3      	subs	r3, r2, r3
 8003d06:	2b02      	cmp	r3, #2
 8003d08:	d908      	bls.n	8003d1c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003d0a:	2303      	movs	r3, #3
 8003d0c:	e140      	b.n	8003f90 <HAL_RCC_OscConfig+0x4ec>
 8003d0e:	bf00      	nop
 8003d10:	40021000 	.word	0x40021000
 8003d14:	42420000 	.word	0x42420000
 8003d18:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d1c:	4b9e      	ldr	r3, [pc, #632]	; (8003f98 <HAL_RCC_OscConfig+0x4f4>)
 8003d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d20:	f003 0302 	and.w	r3, r3, #2
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d1e9      	bne.n	8003cfc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f003 0304 	and.w	r3, r3, #4
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	f000 80a6 	beq.w	8003e82 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d36:	2300      	movs	r3, #0
 8003d38:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d3a:	4b97      	ldr	r3, [pc, #604]	; (8003f98 <HAL_RCC_OscConfig+0x4f4>)
 8003d3c:	69db      	ldr	r3, [r3, #28]
 8003d3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d10d      	bne.n	8003d62 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d46:	4b94      	ldr	r3, [pc, #592]	; (8003f98 <HAL_RCC_OscConfig+0x4f4>)
 8003d48:	69db      	ldr	r3, [r3, #28]
 8003d4a:	4a93      	ldr	r2, [pc, #588]	; (8003f98 <HAL_RCC_OscConfig+0x4f4>)
 8003d4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d50:	61d3      	str	r3, [r2, #28]
 8003d52:	4b91      	ldr	r3, [pc, #580]	; (8003f98 <HAL_RCC_OscConfig+0x4f4>)
 8003d54:	69db      	ldr	r3, [r3, #28]
 8003d56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d5a:	60bb      	str	r3, [r7, #8]
 8003d5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d62:	4b8e      	ldr	r3, [pc, #568]	; (8003f9c <HAL_RCC_OscConfig+0x4f8>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d118      	bne.n	8003da0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d6e:	4b8b      	ldr	r3, [pc, #556]	; (8003f9c <HAL_RCC_OscConfig+0x4f8>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a8a      	ldr	r2, [pc, #552]	; (8003f9c <HAL_RCC_OscConfig+0x4f8>)
 8003d74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d7a:	f7fd ff1b 	bl	8001bb4 <HAL_GetTick>
 8003d7e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d80:	e008      	b.n	8003d94 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d82:	f7fd ff17 	bl	8001bb4 <HAL_GetTick>
 8003d86:	4602      	mov	r2, r0
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	1ad3      	subs	r3, r2, r3
 8003d8c:	2b64      	cmp	r3, #100	; 0x64
 8003d8e:	d901      	bls.n	8003d94 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003d90:	2303      	movs	r3, #3
 8003d92:	e0fd      	b.n	8003f90 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d94:	4b81      	ldr	r3, [pc, #516]	; (8003f9c <HAL_RCC_OscConfig+0x4f8>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d0f0      	beq.n	8003d82 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	68db      	ldr	r3, [r3, #12]
 8003da4:	2b01      	cmp	r3, #1
 8003da6:	d106      	bne.n	8003db6 <HAL_RCC_OscConfig+0x312>
 8003da8:	4b7b      	ldr	r3, [pc, #492]	; (8003f98 <HAL_RCC_OscConfig+0x4f4>)
 8003daa:	6a1b      	ldr	r3, [r3, #32]
 8003dac:	4a7a      	ldr	r2, [pc, #488]	; (8003f98 <HAL_RCC_OscConfig+0x4f4>)
 8003dae:	f043 0301 	orr.w	r3, r3, #1
 8003db2:	6213      	str	r3, [r2, #32]
 8003db4:	e02d      	b.n	8003e12 <HAL_RCC_OscConfig+0x36e>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	68db      	ldr	r3, [r3, #12]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d10c      	bne.n	8003dd8 <HAL_RCC_OscConfig+0x334>
 8003dbe:	4b76      	ldr	r3, [pc, #472]	; (8003f98 <HAL_RCC_OscConfig+0x4f4>)
 8003dc0:	6a1b      	ldr	r3, [r3, #32]
 8003dc2:	4a75      	ldr	r2, [pc, #468]	; (8003f98 <HAL_RCC_OscConfig+0x4f4>)
 8003dc4:	f023 0301 	bic.w	r3, r3, #1
 8003dc8:	6213      	str	r3, [r2, #32]
 8003dca:	4b73      	ldr	r3, [pc, #460]	; (8003f98 <HAL_RCC_OscConfig+0x4f4>)
 8003dcc:	6a1b      	ldr	r3, [r3, #32]
 8003dce:	4a72      	ldr	r2, [pc, #456]	; (8003f98 <HAL_RCC_OscConfig+0x4f4>)
 8003dd0:	f023 0304 	bic.w	r3, r3, #4
 8003dd4:	6213      	str	r3, [r2, #32]
 8003dd6:	e01c      	b.n	8003e12 <HAL_RCC_OscConfig+0x36e>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	68db      	ldr	r3, [r3, #12]
 8003ddc:	2b05      	cmp	r3, #5
 8003dde:	d10c      	bne.n	8003dfa <HAL_RCC_OscConfig+0x356>
 8003de0:	4b6d      	ldr	r3, [pc, #436]	; (8003f98 <HAL_RCC_OscConfig+0x4f4>)
 8003de2:	6a1b      	ldr	r3, [r3, #32]
 8003de4:	4a6c      	ldr	r2, [pc, #432]	; (8003f98 <HAL_RCC_OscConfig+0x4f4>)
 8003de6:	f043 0304 	orr.w	r3, r3, #4
 8003dea:	6213      	str	r3, [r2, #32]
 8003dec:	4b6a      	ldr	r3, [pc, #424]	; (8003f98 <HAL_RCC_OscConfig+0x4f4>)
 8003dee:	6a1b      	ldr	r3, [r3, #32]
 8003df0:	4a69      	ldr	r2, [pc, #420]	; (8003f98 <HAL_RCC_OscConfig+0x4f4>)
 8003df2:	f043 0301 	orr.w	r3, r3, #1
 8003df6:	6213      	str	r3, [r2, #32]
 8003df8:	e00b      	b.n	8003e12 <HAL_RCC_OscConfig+0x36e>
 8003dfa:	4b67      	ldr	r3, [pc, #412]	; (8003f98 <HAL_RCC_OscConfig+0x4f4>)
 8003dfc:	6a1b      	ldr	r3, [r3, #32]
 8003dfe:	4a66      	ldr	r2, [pc, #408]	; (8003f98 <HAL_RCC_OscConfig+0x4f4>)
 8003e00:	f023 0301 	bic.w	r3, r3, #1
 8003e04:	6213      	str	r3, [r2, #32]
 8003e06:	4b64      	ldr	r3, [pc, #400]	; (8003f98 <HAL_RCC_OscConfig+0x4f4>)
 8003e08:	6a1b      	ldr	r3, [r3, #32]
 8003e0a:	4a63      	ldr	r2, [pc, #396]	; (8003f98 <HAL_RCC_OscConfig+0x4f4>)
 8003e0c:	f023 0304 	bic.w	r3, r3, #4
 8003e10:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	68db      	ldr	r3, [r3, #12]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d015      	beq.n	8003e46 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e1a:	f7fd fecb 	bl	8001bb4 <HAL_GetTick>
 8003e1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e20:	e00a      	b.n	8003e38 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e22:	f7fd fec7 	bl	8001bb4 <HAL_GetTick>
 8003e26:	4602      	mov	r2, r0
 8003e28:	693b      	ldr	r3, [r7, #16]
 8003e2a:	1ad3      	subs	r3, r2, r3
 8003e2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d901      	bls.n	8003e38 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003e34:	2303      	movs	r3, #3
 8003e36:	e0ab      	b.n	8003f90 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e38:	4b57      	ldr	r3, [pc, #348]	; (8003f98 <HAL_RCC_OscConfig+0x4f4>)
 8003e3a:	6a1b      	ldr	r3, [r3, #32]
 8003e3c:	f003 0302 	and.w	r3, r3, #2
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d0ee      	beq.n	8003e22 <HAL_RCC_OscConfig+0x37e>
 8003e44:	e014      	b.n	8003e70 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e46:	f7fd feb5 	bl	8001bb4 <HAL_GetTick>
 8003e4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e4c:	e00a      	b.n	8003e64 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e4e:	f7fd feb1 	bl	8001bb4 <HAL_GetTick>
 8003e52:	4602      	mov	r2, r0
 8003e54:	693b      	ldr	r3, [r7, #16]
 8003e56:	1ad3      	subs	r3, r2, r3
 8003e58:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d901      	bls.n	8003e64 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003e60:	2303      	movs	r3, #3
 8003e62:	e095      	b.n	8003f90 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e64:	4b4c      	ldr	r3, [pc, #304]	; (8003f98 <HAL_RCC_OscConfig+0x4f4>)
 8003e66:	6a1b      	ldr	r3, [r3, #32]
 8003e68:	f003 0302 	and.w	r3, r3, #2
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d1ee      	bne.n	8003e4e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003e70:	7dfb      	ldrb	r3, [r7, #23]
 8003e72:	2b01      	cmp	r3, #1
 8003e74:	d105      	bne.n	8003e82 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e76:	4b48      	ldr	r3, [pc, #288]	; (8003f98 <HAL_RCC_OscConfig+0x4f4>)
 8003e78:	69db      	ldr	r3, [r3, #28]
 8003e7a:	4a47      	ldr	r2, [pc, #284]	; (8003f98 <HAL_RCC_OscConfig+0x4f4>)
 8003e7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e80:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	69db      	ldr	r3, [r3, #28]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	f000 8081 	beq.w	8003f8e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e8c:	4b42      	ldr	r3, [pc, #264]	; (8003f98 <HAL_RCC_OscConfig+0x4f4>)
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	f003 030c 	and.w	r3, r3, #12
 8003e94:	2b08      	cmp	r3, #8
 8003e96:	d061      	beq.n	8003f5c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	69db      	ldr	r3, [r3, #28]
 8003e9c:	2b02      	cmp	r3, #2
 8003e9e:	d146      	bne.n	8003f2e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ea0:	4b3f      	ldr	r3, [pc, #252]	; (8003fa0 <HAL_RCC_OscConfig+0x4fc>)
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ea6:	f7fd fe85 	bl	8001bb4 <HAL_GetTick>
 8003eaa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003eac:	e008      	b.n	8003ec0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003eae:	f7fd fe81 	bl	8001bb4 <HAL_GetTick>
 8003eb2:	4602      	mov	r2, r0
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	1ad3      	subs	r3, r2, r3
 8003eb8:	2b02      	cmp	r3, #2
 8003eba:	d901      	bls.n	8003ec0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003ebc:	2303      	movs	r3, #3
 8003ebe:	e067      	b.n	8003f90 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ec0:	4b35      	ldr	r3, [pc, #212]	; (8003f98 <HAL_RCC_OscConfig+0x4f4>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d1f0      	bne.n	8003eae <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6a1b      	ldr	r3, [r3, #32]
 8003ed0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ed4:	d108      	bne.n	8003ee8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003ed6:	4b30      	ldr	r3, [pc, #192]	; (8003f98 <HAL_RCC_OscConfig+0x4f4>)
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	689b      	ldr	r3, [r3, #8]
 8003ee2:	492d      	ldr	r1, [pc, #180]	; (8003f98 <HAL_RCC_OscConfig+0x4f4>)
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ee8:	4b2b      	ldr	r3, [pc, #172]	; (8003f98 <HAL_RCC_OscConfig+0x4f4>)
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6a19      	ldr	r1, [r3, #32]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef8:	430b      	orrs	r3, r1
 8003efa:	4927      	ldr	r1, [pc, #156]	; (8003f98 <HAL_RCC_OscConfig+0x4f4>)
 8003efc:	4313      	orrs	r3, r2
 8003efe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f00:	4b27      	ldr	r3, [pc, #156]	; (8003fa0 <HAL_RCC_OscConfig+0x4fc>)
 8003f02:	2201      	movs	r2, #1
 8003f04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f06:	f7fd fe55 	bl	8001bb4 <HAL_GetTick>
 8003f0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003f0c:	e008      	b.n	8003f20 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f0e:	f7fd fe51 	bl	8001bb4 <HAL_GetTick>
 8003f12:	4602      	mov	r2, r0
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	1ad3      	subs	r3, r2, r3
 8003f18:	2b02      	cmp	r3, #2
 8003f1a:	d901      	bls.n	8003f20 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003f1c:	2303      	movs	r3, #3
 8003f1e:	e037      	b.n	8003f90 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003f20:	4b1d      	ldr	r3, [pc, #116]	; (8003f98 <HAL_RCC_OscConfig+0x4f4>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d0f0      	beq.n	8003f0e <HAL_RCC_OscConfig+0x46a>
 8003f2c:	e02f      	b.n	8003f8e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f2e:	4b1c      	ldr	r3, [pc, #112]	; (8003fa0 <HAL_RCC_OscConfig+0x4fc>)
 8003f30:	2200      	movs	r2, #0
 8003f32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f34:	f7fd fe3e 	bl	8001bb4 <HAL_GetTick>
 8003f38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f3a:	e008      	b.n	8003f4e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f3c:	f7fd fe3a 	bl	8001bb4 <HAL_GetTick>
 8003f40:	4602      	mov	r2, r0
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	1ad3      	subs	r3, r2, r3
 8003f46:	2b02      	cmp	r3, #2
 8003f48:	d901      	bls.n	8003f4e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003f4a:	2303      	movs	r3, #3
 8003f4c:	e020      	b.n	8003f90 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f4e:	4b12      	ldr	r3, [pc, #72]	; (8003f98 <HAL_RCC_OscConfig+0x4f4>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d1f0      	bne.n	8003f3c <HAL_RCC_OscConfig+0x498>
 8003f5a:	e018      	b.n	8003f8e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	69db      	ldr	r3, [r3, #28]
 8003f60:	2b01      	cmp	r3, #1
 8003f62:	d101      	bne.n	8003f68 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003f64:	2301      	movs	r3, #1
 8003f66:	e013      	b.n	8003f90 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003f68:	4b0b      	ldr	r3, [pc, #44]	; (8003f98 <HAL_RCC_OscConfig+0x4f4>)
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6a1b      	ldr	r3, [r3, #32]
 8003f78:	429a      	cmp	r2, r3
 8003f7a:	d106      	bne.n	8003f8a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f86:	429a      	cmp	r2, r3
 8003f88:	d001      	beq.n	8003f8e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	e000      	b.n	8003f90 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003f8e:	2300      	movs	r3, #0
}
 8003f90:	4618      	mov	r0, r3
 8003f92:	3718      	adds	r7, #24
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bd80      	pop	{r7, pc}
 8003f98:	40021000 	.word	0x40021000
 8003f9c:	40007000 	.word	0x40007000
 8003fa0:	42420060 	.word	0x42420060

08003fa4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b084      	sub	sp, #16
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
 8003fac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d101      	bne.n	8003fb8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	e0d0      	b.n	800415a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003fb8:	4b6a      	ldr	r3, [pc, #424]	; (8004164 <HAL_RCC_ClockConfig+0x1c0>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f003 0307 	and.w	r3, r3, #7
 8003fc0:	683a      	ldr	r2, [r7, #0]
 8003fc2:	429a      	cmp	r2, r3
 8003fc4:	d910      	bls.n	8003fe8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fc6:	4b67      	ldr	r3, [pc, #412]	; (8004164 <HAL_RCC_ClockConfig+0x1c0>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f023 0207 	bic.w	r2, r3, #7
 8003fce:	4965      	ldr	r1, [pc, #404]	; (8004164 <HAL_RCC_ClockConfig+0x1c0>)
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fd6:	4b63      	ldr	r3, [pc, #396]	; (8004164 <HAL_RCC_ClockConfig+0x1c0>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f003 0307 	and.w	r3, r3, #7
 8003fde:	683a      	ldr	r2, [r7, #0]
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	d001      	beq.n	8003fe8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	e0b8      	b.n	800415a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f003 0302 	and.w	r3, r3, #2
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d020      	beq.n	8004036 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f003 0304 	and.w	r3, r3, #4
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d005      	beq.n	800400c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004000:	4b59      	ldr	r3, [pc, #356]	; (8004168 <HAL_RCC_ClockConfig+0x1c4>)
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	4a58      	ldr	r2, [pc, #352]	; (8004168 <HAL_RCC_ClockConfig+0x1c4>)
 8004006:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800400a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f003 0308 	and.w	r3, r3, #8
 8004014:	2b00      	cmp	r3, #0
 8004016:	d005      	beq.n	8004024 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004018:	4b53      	ldr	r3, [pc, #332]	; (8004168 <HAL_RCC_ClockConfig+0x1c4>)
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	4a52      	ldr	r2, [pc, #328]	; (8004168 <HAL_RCC_ClockConfig+0x1c4>)
 800401e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004022:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004024:	4b50      	ldr	r3, [pc, #320]	; (8004168 <HAL_RCC_ClockConfig+0x1c4>)
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	689b      	ldr	r3, [r3, #8]
 8004030:	494d      	ldr	r1, [pc, #308]	; (8004168 <HAL_RCC_ClockConfig+0x1c4>)
 8004032:	4313      	orrs	r3, r2
 8004034:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f003 0301 	and.w	r3, r3, #1
 800403e:	2b00      	cmp	r3, #0
 8004040:	d040      	beq.n	80040c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	2b01      	cmp	r3, #1
 8004048:	d107      	bne.n	800405a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800404a:	4b47      	ldr	r3, [pc, #284]	; (8004168 <HAL_RCC_ClockConfig+0x1c4>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004052:	2b00      	cmp	r3, #0
 8004054:	d115      	bne.n	8004082 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	e07f      	b.n	800415a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	2b02      	cmp	r3, #2
 8004060:	d107      	bne.n	8004072 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004062:	4b41      	ldr	r3, [pc, #260]	; (8004168 <HAL_RCC_ClockConfig+0x1c4>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800406a:	2b00      	cmp	r3, #0
 800406c:	d109      	bne.n	8004082 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800406e:	2301      	movs	r3, #1
 8004070:	e073      	b.n	800415a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004072:	4b3d      	ldr	r3, [pc, #244]	; (8004168 <HAL_RCC_ClockConfig+0x1c4>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f003 0302 	and.w	r3, r3, #2
 800407a:	2b00      	cmp	r3, #0
 800407c:	d101      	bne.n	8004082 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800407e:	2301      	movs	r3, #1
 8004080:	e06b      	b.n	800415a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004082:	4b39      	ldr	r3, [pc, #228]	; (8004168 <HAL_RCC_ClockConfig+0x1c4>)
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	f023 0203 	bic.w	r2, r3, #3
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	4936      	ldr	r1, [pc, #216]	; (8004168 <HAL_RCC_ClockConfig+0x1c4>)
 8004090:	4313      	orrs	r3, r2
 8004092:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004094:	f7fd fd8e 	bl	8001bb4 <HAL_GetTick>
 8004098:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800409a:	e00a      	b.n	80040b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800409c:	f7fd fd8a 	bl	8001bb4 <HAL_GetTick>
 80040a0:	4602      	mov	r2, r0
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	1ad3      	subs	r3, r2, r3
 80040a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d901      	bls.n	80040b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80040ae:	2303      	movs	r3, #3
 80040b0:	e053      	b.n	800415a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040b2:	4b2d      	ldr	r3, [pc, #180]	; (8004168 <HAL_RCC_ClockConfig+0x1c4>)
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	f003 020c 	and.w	r2, r3, #12
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	009b      	lsls	r3, r3, #2
 80040c0:	429a      	cmp	r2, r3
 80040c2:	d1eb      	bne.n	800409c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80040c4:	4b27      	ldr	r3, [pc, #156]	; (8004164 <HAL_RCC_ClockConfig+0x1c0>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f003 0307 	and.w	r3, r3, #7
 80040cc:	683a      	ldr	r2, [r7, #0]
 80040ce:	429a      	cmp	r2, r3
 80040d0:	d210      	bcs.n	80040f4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040d2:	4b24      	ldr	r3, [pc, #144]	; (8004164 <HAL_RCC_ClockConfig+0x1c0>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f023 0207 	bic.w	r2, r3, #7
 80040da:	4922      	ldr	r1, [pc, #136]	; (8004164 <HAL_RCC_ClockConfig+0x1c0>)
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	4313      	orrs	r3, r2
 80040e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040e2:	4b20      	ldr	r3, [pc, #128]	; (8004164 <HAL_RCC_ClockConfig+0x1c0>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f003 0307 	and.w	r3, r3, #7
 80040ea:	683a      	ldr	r2, [r7, #0]
 80040ec:	429a      	cmp	r2, r3
 80040ee:	d001      	beq.n	80040f4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80040f0:	2301      	movs	r3, #1
 80040f2:	e032      	b.n	800415a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f003 0304 	and.w	r3, r3, #4
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d008      	beq.n	8004112 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004100:	4b19      	ldr	r3, [pc, #100]	; (8004168 <HAL_RCC_ClockConfig+0x1c4>)
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	68db      	ldr	r3, [r3, #12]
 800410c:	4916      	ldr	r1, [pc, #88]	; (8004168 <HAL_RCC_ClockConfig+0x1c4>)
 800410e:	4313      	orrs	r3, r2
 8004110:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f003 0308 	and.w	r3, r3, #8
 800411a:	2b00      	cmp	r3, #0
 800411c:	d009      	beq.n	8004132 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800411e:	4b12      	ldr	r3, [pc, #72]	; (8004168 <HAL_RCC_ClockConfig+0x1c4>)
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	691b      	ldr	r3, [r3, #16]
 800412a:	00db      	lsls	r3, r3, #3
 800412c:	490e      	ldr	r1, [pc, #56]	; (8004168 <HAL_RCC_ClockConfig+0x1c4>)
 800412e:	4313      	orrs	r3, r2
 8004130:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004132:	f000 f821 	bl	8004178 <HAL_RCC_GetSysClockFreq>
 8004136:	4601      	mov	r1, r0
 8004138:	4b0b      	ldr	r3, [pc, #44]	; (8004168 <HAL_RCC_ClockConfig+0x1c4>)
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	091b      	lsrs	r3, r3, #4
 800413e:	f003 030f 	and.w	r3, r3, #15
 8004142:	4a0a      	ldr	r2, [pc, #40]	; (800416c <HAL_RCC_ClockConfig+0x1c8>)
 8004144:	5cd3      	ldrb	r3, [r2, r3]
 8004146:	fa21 f303 	lsr.w	r3, r1, r3
 800414a:	4a09      	ldr	r2, [pc, #36]	; (8004170 <HAL_RCC_ClockConfig+0x1cc>)
 800414c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800414e:	4b09      	ldr	r3, [pc, #36]	; (8004174 <HAL_RCC_ClockConfig+0x1d0>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4618      	mov	r0, r3
 8004154:	f7fd faa2 	bl	800169c <HAL_InitTick>

  return HAL_OK;
 8004158:	2300      	movs	r3, #0
}
 800415a:	4618      	mov	r0, r3
 800415c:	3710      	adds	r7, #16
 800415e:	46bd      	mov	sp, r7
 8004160:	bd80      	pop	{r7, pc}
 8004162:	bf00      	nop
 8004164:	40022000 	.word	0x40022000
 8004168:	40021000 	.word	0x40021000
 800416c:	0800631c 	.word	0x0800631c
 8004170:	20000004 	.word	0x20000004
 8004174:	20000008 	.word	0x20000008

08004178 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004178:	b490      	push	{r4, r7}
 800417a:	b08a      	sub	sp, #40	; 0x28
 800417c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800417e:	4b2a      	ldr	r3, [pc, #168]	; (8004228 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004180:	1d3c      	adds	r4, r7, #4
 8004182:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004184:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004188:	4b28      	ldr	r3, [pc, #160]	; (800422c <HAL_RCC_GetSysClockFreq+0xb4>)
 800418a:	881b      	ldrh	r3, [r3, #0]
 800418c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800418e:	2300      	movs	r3, #0
 8004190:	61fb      	str	r3, [r7, #28]
 8004192:	2300      	movs	r3, #0
 8004194:	61bb      	str	r3, [r7, #24]
 8004196:	2300      	movs	r3, #0
 8004198:	627b      	str	r3, [r7, #36]	; 0x24
 800419a:	2300      	movs	r3, #0
 800419c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800419e:	2300      	movs	r3, #0
 80041a0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80041a2:	4b23      	ldr	r3, [pc, #140]	; (8004230 <HAL_RCC_GetSysClockFreq+0xb8>)
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80041a8:	69fb      	ldr	r3, [r7, #28]
 80041aa:	f003 030c 	and.w	r3, r3, #12
 80041ae:	2b04      	cmp	r3, #4
 80041b0:	d002      	beq.n	80041b8 <HAL_RCC_GetSysClockFreq+0x40>
 80041b2:	2b08      	cmp	r3, #8
 80041b4:	d003      	beq.n	80041be <HAL_RCC_GetSysClockFreq+0x46>
 80041b6:	e02d      	b.n	8004214 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80041b8:	4b1e      	ldr	r3, [pc, #120]	; (8004234 <HAL_RCC_GetSysClockFreq+0xbc>)
 80041ba:	623b      	str	r3, [r7, #32]
      break;
 80041bc:	e02d      	b.n	800421a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80041be:	69fb      	ldr	r3, [r7, #28]
 80041c0:	0c9b      	lsrs	r3, r3, #18
 80041c2:	f003 030f 	and.w	r3, r3, #15
 80041c6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80041ca:	4413      	add	r3, r2
 80041cc:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80041d0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80041d2:	69fb      	ldr	r3, [r7, #28]
 80041d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d013      	beq.n	8004204 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80041dc:	4b14      	ldr	r3, [pc, #80]	; (8004230 <HAL_RCC_GetSysClockFreq+0xb8>)
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	0c5b      	lsrs	r3, r3, #17
 80041e2:	f003 0301 	and.w	r3, r3, #1
 80041e6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80041ea:	4413      	add	r3, r2
 80041ec:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80041f0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	4a0f      	ldr	r2, [pc, #60]	; (8004234 <HAL_RCC_GetSysClockFreq+0xbc>)
 80041f6:	fb02 f203 	mul.w	r2, r2, r3
 80041fa:	69bb      	ldr	r3, [r7, #24]
 80041fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004200:	627b      	str	r3, [r7, #36]	; 0x24
 8004202:	e004      	b.n	800420e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	4a0c      	ldr	r2, [pc, #48]	; (8004238 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004208:	fb02 f303 	mul.w	r3, r2, r3
 800420c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800420e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004210:	623b      	str	r3, [r7, #32]
      break;
 8004212:	e002      	b.n	800421a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004214:	4b07      	ldr	r3, [pc, #28]	; (8004234 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004216:	623b      	str	r3, [r7, #32]
      break;
 8004218:	bf00      	nop
    }
  }
  return sysclockfreq;
 800421a:	6a3b      	ldr	r3, [r7, #32]
}
 800421c:	4618      	mov	r0, r3
 800421e:	3728      	adds	r7, #40	; 0x28
 8004220:	46bd      	mov	sp, r7
 8004222:	bc90      	pop	{r4, r7}
 8004224:	4770      	bx	lr
 8004226:	bf00      	nop
 8004228:	08006308 	.word	0x08006308
 800422c:	08006318 	.word	0x08006318
 8004230:	40021000 	.word	0x40021000
 8004234:	007a1200 	.word	0x007a1200
 8004238:	003d0900 	.word	0x003d0900

0800423c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800423c:	b480      	push	{r7}
 800423e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004240:	4b02      	ldr	r3, [pc, #8]	; (800424c <HAL_RCC_GetHCLKFreq+0x10>)
 8004242:	681b      	ldr	r3, [r3, #0]
}
 8004244:	4618      	mov	r0, r3
 8004246:	46bd      	mov	sp, r7
 8004248:	bc80      	pop	{r7}
 800424a:	4770      	bx	lr
 800424c:	20000004 	.word	0x20000004

08004250 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004254:	f7ff fff2 	bl	800423c <HAL_RCC_GetHCLKFreq>
 8004258:	4601      	mov	r1, r0
 800425a:	4b05      	ldr	r3, [pc, #20]	; (8004270 <HAL_RCC_GetPCLK1Freq+0x20>)
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	0a1b      	lsrs	r3, r3, #8
 8004260:	f003 0307 	and.w	r3, r3, #7
 8004264:	4a03      	ldr	r2, [pc, #12]	; (8004274 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004266:	5cd3      	ldrb	r3, [r2, r3]
 8004268:	fa21 f303 	lsr.w	r3, r1, r3
}
 800426c:	4618      	mov	r0, r3
 800426e:	bd80      	pop	{r7, pc}
 8004270:	40021000 	.word	0x40021000
 8004274:	0800632c 	.word	0x0800632c

08004278 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800427c:	f7ff ffde 	bl	800423c <HAL_RCC_GetHCLKFreq>
 8004280:	4601      	mov	r1, r0
 8004282:	4b05      	ldr	r3, [pc, #20]	; (8004298 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	0adb      	lsrs	r3, r3, #11
 8004288:	f003 0307 	and.w	r3, r3, #7
 800428c:	4a03      	ldr	r2, [pc, #12]	; (800429c <HAL_RCC_GetPCLK2Freq+0x24>)
 800428e:	5cd3      	ldrb	r3, [r2, r3]
 8004290:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004294:	4618      	mov	r0, r3
 8004296:	bd80      	pop	{r7, pc}
 8004298:	40021000 	.word	0x40021000
 800429c:	0800632c 	.word	0x0800632c

080042a0 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b083      	sub	sp, #12
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
 80042a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	220f      	movs	r2, #15
 80042ae:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80042b0:	4b11      	ldr	r3, [pc, #68]	; (80042f8 <HAL_RCC_GetClockConfig+0x58>)
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	f003 0203 	and.w	r2, r3, #3
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80042bc:	4b0e      	ldr	r3, [pc, #56]	; (80042f8 <HAL_RCC_GetClockConfig+0x58>)
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80042c8:	4b0b      	ldr	r3, [pc, #44]	; (80042f8 <HAL_RCC_GetClockConfig+0x58>)
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80042d4:	4b08      	ldr	r3, [pc, #32]	; (80042f8 <HAL_RCC_GetClockConfig+0x58>)
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	08db      	lsrs	r3, r3, #3
 80042da:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80042e2:	4b06      	ldr	r3, [pc, #24]	; (80042fc <HAL_RCC_GetClockConfig+0x5c>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f003 0207 	and.w	r2, r3, #7
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80042ee:	bf00      	nop
 80042f0:	370c      	adds	r7, #12
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bc80      	pop	{r7}
 80042f6:	4770      	bx	lr
 80042f8:	40021000 	.word	0x40021000
 80042fc:	40022000 	.word	0x40022000

08004300 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004300:	b480      	push	{r7}
 8004302:	b085      	sub	sp, #20
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004308:	4b0a      	ldr	r3, [pc, #40]	; (8004334 <RCC_Delay+0x34>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a0a      	ldr	r2, [pc, #40]	; (8004338 <RCC_Delay+0x38>)
 800430e:	fba2 2303 	umull	r2, r3, r2, r3
 8004312:	0a5b      	lsrs	r3, r3, #9
 8004314:	687a      	ldr	r2, [r7, #4]
 8004316:	fb02 f303 	mul.w	r3, r2, r3
 800431a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800431c:	bf00      	nop
  }
  while (Delay --);
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	1e5a      	subs	r2, r3, #1
 8004322:	60fa      	str	r2, [r7, #12]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d1f9      	bne.n	800431c <RCC_Delay+0x1c>
}
 8004328:	bf00      	nop
 800432a:	3714      	adds	r7, #20
 800432c:	46bd      	mov	sp, r7
 800432e:	bc80      	pop	{r7}
 8004330:	4770      	bx	lr
 8004332:	bf00      	nop
 8004334:	20000004 	.word	0x20000004
 8004338:	10624dd3 	.word	0x10624dd3

0800433c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b082      	sub	sp, #8
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d101      	bne.n	800434e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800434a:	2301      	movs	r3, #1
 800434c:	e01d      	b.n	800438a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004354:	b2db      	uxtb	r3, r3
 8004356:	2b00      	cmp	r3, #0
 8004358:	d106      	bne.n	8004368 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2200      	movs	r2, #0
 800435e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004362:	6878      	ldr	r0, [r7, #4]
 8004364:	f000 f815 	bl	8004392 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2202      	movs	r2, #2
 800436c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681a      	ldr	r2, [r3, #0]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	3304      	adds	r3, #4
 8004378:	4619      	mov	r1, r3
 800437a:	4610      	mov	r0, r2
 800437c:	f000 f962 	bl	8004644 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2201      	movs	r2, #1
 8004384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004388:	2300      	movs	r3, #0
}
 800438a:	4618      	mov	r0, r3
 800438c:	3708      	adds	r7, #8
 800438e:	46bd      	mov	sp, r7
 8004390:	bd80      	pop	{r7, pc}

08004392 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004392:	b480      	push	{r7}
 8004394:	b083      	sub	sp, #12
 8004396:	af00      	add	r7, sp, #0
 8004398:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800439a:	bf00      	nop
 800439c:	370c      	adds	r7, #12
 800439e:	46bd      	mov	sp, r7
 80043a0:	bc80      	pop	{r7}
 80043a2:	4770      	bx	lr

080043a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80043a4:	b480      	push	{r7}
 80043a6:	b085      	sub	sp, #20
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	68da      	ldr	r2, [r3, #12]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f042 0201 	orr.w	r2, r2, #1
 80043ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	689b      	ldr	r3, [r3, #8]
 80043c2:	f003 0307 	and.w	r3, r3, #7
 80043c6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	2b06      	cmp	r3, #6
 80043cc:	d007      	beq.n	80043de <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	681a      	ldr	r2, [r3, #0]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f042 0201 	orr.w	r2, r2, #1
 80043dc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80043de:	2300      	movs	r3, #0
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	3714      	adds	r7, #20
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bc80      	pop	{r7}
 80043e8:	4770      	bx	lr

080043ea <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80043ea:	b580      	push	{r7, lr}
 80043ec:	b082      	sub	sp, #8
 80043ee:	af00      	add	r7, sp, #0
 80043f0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	691b      	ldr	r3, [r3, #16]
 80043f8:	f003 0302 	and.w	r3, r3, #2
 80043fc:	2b02      	cmp	r3, #2
 80043fe:	d122      	bne.n	8004446 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	68db      	ldr	r3, [r3, #12]
 8004406:	f003 0302 	and.w	r3, r3, #2
 800440a:	2b02      	cmp	r3, #2
 800440c:	d11b      	bne.n	8004446 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f06f 0202 	mvn.w	r2, #2
 8004416:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2201      	movs	r2, #1
 800441c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	699b      	ldr	r3, [r3, #24]
 8004424:	f003 0303 	and.w	r3, r3, #3
 8004428:	2b00      	cmp	r3, #0
 800442a:	d003      	beq.n	8004434 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800442c:	6878      	ldr	r0, [r7, #4]
 800442e:	f000 f8ed 	bl	800460c <HAL_TIM_IC_CaptureCallback>
 8004432:	e005      	b.n	8004440 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004434:	6878      	ldr	r0, [r7, #4]
 8004436:	f000 f8e0 	bl	80045fa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800443a:	6878      	ldr	r0, [r7, #4]
 800443c:	f000 f8ef 	bl	800461e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2200      	movs	r2, #0
 8004444:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	691b      	ldr	r3, [r3, #16]
 800444c:	f003 0304 	and.w	r3, r3, #4
 8004450:	2b04      	cmp	r3, #4
 8004452:	d122      	bne.n	800449a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	68db      	ldr	r3, [r3, #12]
 800445a:	f003 0304 	and.w	r3, r3, #4
 800445e:	2b04      	cmp	r3, #4
 8004460:	d11b      	bne.n	800449a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f06f 0204 	mvn.w	r2, #4
 800446a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2202      	movs	r2, #2
 8004470:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	699b      	ldr	r3, [r3, #24]
 8004478:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800447c:	2b00      	cmp	r3, #0
 800447e:	d003      	beq.n	8004488 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004480:	6878      	ldr	r0, [r7, #4]
 8004482:	f000 f8c3 	bl	800460c <HAL_TIM_IC_CaptureCallback>
 8004486:	e005      	b.n	8004494 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004488:	6878      	ldr	r0, [r7, #4]
 800448a:	f000 f8b6 	bl	80045fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800448e:	6878      	ldr	r0, [r7, #4]
 8004490:	f000 f8c5 	bl	800461e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2200      	movs	r2, #0
 8004498:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	691b      	ldr	r3, [r3, #16]
 80044a0:	f003 0308 	and.w	r3, r3, #8
 80044a4:	2b08      	cmp	r3, #8
 80044a6:	d122      	bne.n	80044ee <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	68db      	ldr	r3, [r3, #12]
 80044ae:	f003 0308 	and.w	r3, r3, #8
 80044b2:	2b08      	cmp	r3, #8
 80044b4:	d11b      	bne.n	80044ee <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f06f 0208 	mvn.w	r2, #8
 80044be:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2204      	movs	r2, #4
 80044c4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	69db      	ldr	r3, [r3, #28]
 80044cc:	f003 0303 	and.w	r3, r3, #3
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d003      	beq.n	80044dc <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044d4:	6878      	ldr	r0, [r7, #4]
 80044d6:	f000 f899 	bl	800460c <HAL_TIM_IC_CaptureCallback>
 80044da:	e005      	b.n	80044e8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044dc:	6878      	ldr	r0, [r7, #4]
 80044de:	f000 f88c 	bl	80045fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044e2:	6878      	ldr	r0, [r7, #4]
 80044e4:	f000 f89b 	bl	800461e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2200      	movs	r2, #0
 80044ec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	691b      	ldr	r3, [r3, #16]
 80044f4:	f003 0310 	and.w	r3, r3, #16
 80044f8:	2b10      	cmp	r3, #16
 80044fa:	d122      	bne.n	8004542 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	68db      	ldr	r3, [r3, #12]
 8004502:	f003 0310 	and.w	r3, r3, #16
 8004506:	2b10      	cmp	r3, #16
 8004508:	d11b      	bne.n	8004542 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f06f 0210 	mvn.w	r2, #16
 8004512:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2208      	movs	r2, #8
 8004518:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	69db      	ldr	r3, [r3, #28]
 8004520:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004524:	2b00      	cmp	r3, #0
 8004526:	d003      	beq.n	8004530 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004528:	6878      	ldr	r0, [r7, #4]
 800452a:	f000 f86f 	bl	800460c <HAL_TIM_IC_CaptureCallback>
 800452e:	e005      	b.n	800453c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004530:	6878      	ldr	r0, [r7, #4]
 8004532:	f000 f862 	bl	80045fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004536:	6878      	ldr	r0, [r7, #4]
 8004538:	f000 f871 	bl	800461e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2200      	movs	r2, #0
 8004540:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	691b      	ldr	r3, [r3, #16]
 8004548:	f003 0301 	and.w	r3, r3, #1
 800454c:	2b01      	cmp	r3, #1
 800454e:	d10e      	bne.n	800456e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	68db      	ldr	r3, [r3, #12]
 8004556:	f003 0301 	and.w	r3, r3, #1
 800455a:	2b01      	cmp	r3, #1
 800455c:	d107      	bne.n	800456e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f06f 0201 	mvn.w	r2, #1
 8004566:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004568:	6878      	ldr	r0, [r7, #4]
 800456a:	f7fc fc0d 	bl	8000d88 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	691b      	ldr	r3, [r3, #16]
 8004574:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004578:	2b80      	cmp	r3, #128	; 0x80
 800457a:	d10e      	bne.n	800459a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	68db      	ldr	r3, [r3, #12]
 8004582:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004586:	2b80      	cmp	r3, #128	; 0x80
 8004588:	d107      	bne.n	800459a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004592:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004594:	6878      	ldr	r0, [r7, #4]
 8004596:	f000 f8c0 	bl	800471a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	691b      	ldr	r3, [r3, #16]
 80045a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045a4:	2b40      	cmp	r3, #64	; 0x40
 80045a6:	d10e      	bne.n	80045c6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	68db      	ldr	r3, [r3, #12]
 80045ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045b2:	2b40      	cmp	r3, #64	; 0x40
 80045b4:	d107      	bne.n	80045c6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80045be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80045c0:	6878      	ldr	r0, [r7, #4]
 80045c2:	f000 f835 	bl	8004630 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	691b      	ldr	r3, [r3, #16]
 80045cc:	f003 0320 	and.w	r3, r3, #32
 80045d0:	2b20      	cmp	r3, #32
 80045d2:	d10e      	bne.n	80045f2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	68db      	ldr	r3, [r3, #12]
 80045da:	f003 0320 	and.w	r3, r3, #32
 80045de:	2b20      	cmp	r3, #32
 80045e0:	d107      	bne.n	80045f2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f06f 0220 	mvn.w	r2, #32
 80045ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80045ec:	6878      	ldr	r0, [r7, #4]
 80045ee:	f000 f88b 	bl	8004708 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80045f2:	bf00      	nop
 80045f4:	3708      	adds	r7, #8
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bd80      	pop	{r7, pc}

080045fa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80045fa:	b480      	push	{r7}
 80045fc:	b083      	sub	sp, #12
 80045fe:	af00      	add	r7, sp, #0
 8004600:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004602:	bf00      	nop
 8004604:	370c      	adds	r7, #12
 8004606:	46bd      	mov	sp, r7
 8004608:	bc80      	pop	{r7}
 800460a:	4770      	bx	lr

0800460c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800460c:	b480      	push	{r7}
 800460e:	b083      	sub	sp, #12
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004614:	bf00      	nop
 8004616:	370c      	adds	r7, #12
 8004618:	46bd      	mov	sp, r7
 800461a:	bc80      	pop	{r7}
 800461c:	4770      	bx	lr

0800461e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800461e:	b480      	push	{r7}
 8004620:	b083      	sub	sp, #12
 8004622:	af00      	add	r7, sp, #0
 8004624:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004626:	bf00      	nop
 8004628:	370c      	adds	r7, #12
 800462a:	46bd      	mov	sp, r7
 800462c:	bc80      	pop	{r7}
 800462e:	4770      	bx	lr

08004630 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004630:	b480      	push	{r7}
 8004632:	b083      	sub	sp, #12
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004638:	bf00      	nop
 800463a:	370c      	adds	r7, #12
 800463c:	46bd      	mov	sp, r7
 800463e:	bc80      	pop	{r7}
 8004640:	4770      	bx	lr
	...

08004644 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004644:	b480      	push	{r7}
 8004646:	b085      	sub	sp, #20
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
 800464c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	4a29      	ldr	r2, [pc, #164]	; (80046fc <TIM_Base_SetConfig+0xb8>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d00b      	beq.n	8004674 <TIM_Base_SetConfig+0x30>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004662:	d007      	beq.n	8004674 <TIM_Base_SetConfig+0x30>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	4a26      	ldr	r2, [pc, #152]	; (8004700 <TIM_Base_SetConfig+0xbc>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d003      	beq.n	8004674 <TIM_Base_SetConfig+0x30>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	4a25      	ldr	r2, [pc, #148]	; (8004704 <TIM_Base_SetConfig+0xc0>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d108      	bne.n	8004686 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800467a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	68fa      	ldr	r2, [r7, #12]
 8004682:	4313      	orrs	r3, r2
 8004684:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	4a1c      	ldr	r2, [pc, #112]	; (80046fc <TIM_Base_SetConfig+0xb8>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d00b      	beq.n	80046a6 <TIM_Base_SetConfig+0x62>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004694:	d007      	beq.n	80046a6 <TIM_Base_SetConfig+0x62>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	4a19      	ldr	r2, [pc, #100]	; (8004700 <TIM_Base_SetConfig+0xbc>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d003      	beq.n	80046a6 <TIM_Base_SetConfig+0x62>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	4a18      	ldr	r2, [pc, #96]	; (8004704 <TIM_Base_SetConfig+0xc0>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d108      	bne.n	80046b8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	68db      	ldr	r3, [r3, #12]
 80046b2:	68fa      	ldr	r2, [r7, #12]
 80046b4:	4313      	orrs	r3, r2
 80046b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	695b      	ldr	r3, [r3, #20]
 80046c2:	4313      	orrs	r3, r2
 80046c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	68fa      	ldr	r2, [r7, #12]
 80046ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	689a      	ldr	r2, [r3, #8]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	681a      	ldr	r2, [r3, #0]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	4a07      	ldr	r2, [pc, #28]	; (80046fc <TIM_Base_SetConfig+0xb8>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d103      	bne.n	80046ec <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	691a      	ldr	r2, [r3, #16]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2201      	movs	r2, #1
 80046f0:	615a      	str	r2, [r3, #20]
}
 80046f2:	bf00      	nop
 80046f4:	3714      	adds	r7, #20
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bc80      	pop	{r7}
 80046fa:	4770      	bx	lr
 80046fc:	40012c00 	.word	0x40012c00
 8004700:	40000400 	.word	0x40000400
 8004704:	40000800 	.word	0x40000800

08004708 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004708:	b480      	push	{r7}
 800470a:	b083      	sub	sp, #12
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004710:	bf00      	nop
 8004712:	370c      	adds	r7, #12
 8004714:	46bd      	mov	sp, r7
 8004716:	bc80      	pop	{r7}
 8004718:	4770      	bx	lr

0800471a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800471a:	b480      	push	{r7}
 800471c:	b083      	sub	sp, #12
 800471e:	af00      	add	r7, sp, #0
 8004720:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004722:	bf00      	nop
 8004724:	370c      	adds	r7, #12
 8004726:	46bd      	mov	sp, r7
 8004728:	bc80      	pop	{r7}
 800472a:	4770      	bx	lr

0800472c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b082      	sub	sp, #8
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d101      	bne.n	800473e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800473a:	2301      	movs	r3, #1
 800473c:	e03f      	b.n	80047be <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004744:	b2db      	uxtb	r3, r3
 8004746:	2b00      	cmp	r3, #0
 8004748:	d106      	bne.n	8004758 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2200      	movs	r2, #0
 800474e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004752:	6878      	ldr	r0, [r7, #4]
 8004754:	f7fd f902 	bl	800195c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2224      	movs	r2, #36	; 0x24
 800475c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	68da      	ldr	r2, [r3, #12]
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800476e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004770:	6878      	ldr	r0, [r7, #4]
 8004772:	f000 fbe7 	bl	8004f44 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	691a      	ldr	r2, [r3, #16]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004784:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	695a      	ldr	r2, [r3, #20]
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004794:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	68da      	ldr	r2, [r3, #12]
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80047a4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2200      	movs	r2, #0
 80047aa:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2220      	movs	r2, #32
 80047b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2220      	movs	r2, #32
 80047b8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80047bc:	2300      	movs	r3, #0
}
 80047be:	4618      	mov	r0, r3
 80047c0:	3708      	adds	r7, #8
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bd80      	pop	{r7, pc}

080047c6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047c6:	b580      	push	{r7, lr}
 80047c8:	b088      	sub	sp, #32
 80047ca:	af02      	add	r7, sp, #8
 80047cc:	60f8      	str	r0, [r7, #12]
 80047ce:	60b9      	str	r1, [r7, #8]
 80047d0:	603b      	str	r3, [r7, #0]
 80047d2:	4613      	mov	r3, r2
 80047d4:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80047d6:	2300      	movs	r3, #0
 80047d8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80047e0:	b2db      	uxtb	r3, r3
 80047e2:	2b20      	cmp	r3, #32
 80047e4:	f040 8083 	bne.w	80048ee <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d002      	beq.n	80047f4 <HAL_UART_Transmit+0x2e>
 80047ee:	88fb      	ldrh	r3, [r7, #6]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d101      	bne.n	80047f8 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80047f4:	2301      	movs	r3, #1
 80047f6:	e07b      	b.n	80048f0 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80047fe:	2b01      	cmp	r3, #1
 8004800:	d101      	bne.n	8004806 <HAL_UART_Transmit+0x40>
 8004802:	2302      	movs	r3, #2
 8004804:	e074      	b.n	80048f0 <HAL_UART_Transmit+0x12a>
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	2201      	movs	r2, #1
 800480a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	2200      	movs	r2, #0
 8004812:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	2221      	movs	r2, #33	; 0x21
 8004818:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800481c:	f7fd f9ca 	bl	8001bb4 <HAL_GetTick>
 8004820:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	88fa      	ldrh	r2, [r7, #6]
 8004826:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	88fa      	ldrh	r2, [r7, #6]
 800482c:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800482e:	e042      	b.n	80048b6 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004834:	b29b      	uxth	r3, r3
 8004836:	3b01      	subs	r3, #1
 8004838:	b29a      	uxth	r2, r3
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	689b      	ldr	r3, [r3, #8]
 8004842:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004846:	d122      	bne.n	800488e <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	9300      	str	r3, [sp, #0]
 800484c:	697b      	ldr	r3, [r7, #20]
 800484e:	2200      	movs	r2, #0
 8004850:	2180      	movs	r1, #128	; 0x80
 8004852:	68f8      	ldr	r0, [r7, #12]
 8004854:	f000 fa0d 	bl	8004c72 <UART_WaitOnFlagUntilTimeout>
 8004858:	4603      	mov	r3, r0
 800485a:	2b00      	cmp	r3, #0
 800485c:	d001      	beq.n	8004862 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 800485e:	2303      	movs	r3, #3
 8004860:	e046      	b.n	80048f0 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8004866:	693b      	ldr	r3, [r7, #16]
 8004868:	881b      	ldrh	r3, [r3, #0]
 800486a:	461a      	mov	r2, r3
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004874:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	691b      	ldr	r3, [r3, #16]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d103      	bne.n	8004886 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	3302      	adds	r3, #2
 8004882:	60bb      	str	r3, [r7, #8]
 8004884:	e017      	b.n	80048b6 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8004886:	68bb      	ldr	r3, [r7, #8]
 8004888:	3301      	adds	r3, #1
 800488a:	60bb      	str	r3, [r7, #8]
 800488c:	e013      	b.n	80048b6 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	9300      	str	r3, [sp, #0]
 8004892:	697b      	ldr	r3, [r7, #20]
 8004894:	2200      	movs	r2, #0
 8004896:	2180      	movs	r1, #128	; 0x80
 8004898:	68f8      	ldr	r0, [r7, #12]
 800489a:	f000 f9ea 	bl	8004c72 <UART_WaitOnFlagUntilTimeout>
 800489e:	4603      	mov	r3, r0
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d001      	beq.n	80048a8 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 80048a4:	2303      	movs	r3, #3
 80048a6:	e023      	b.n	80048f0 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	1c5a      	adds	r2, r3, #1
 80048ac:	60ba      	str	r2, [r7, #8]
 80048ae:	781a      	ldrb	r2, [r3, #0]
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80048ba:	b29b      	uxth	r3, r3
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d1b7      	bne.n	8004830 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	9300      	str	r3, [sp, #0]
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	2200      	movs	r2, #0
 80048c8:	2140      	movs	r1, #64	; 0x40
 80048ca:	68f8      	ldr	r0, [r7, #12]
 80048cc:	f000 f9d1 	bl	8004c72 <UART_WaitOnFlagUntilTimeout>
 80048d0:	4603      	mov	r3, r0
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d001      	beq.n	80048da <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80048d6:	2303      	movs	r3, #3
 80048d8:	e00a      	b.n	80048f0 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	2220      	movs	r2, #32
 80048de:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	2200      	movs	r2, #0
 80048e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 80048ea:	2300      	movs	r3, #0
 80048ec:	e000      	b.n	80048f0 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80048ee:	2302      	movs	r3, #2
  }
}
 80048f0:	4618      	mov	r0, r3
 80048f2:	3718      	adds	r7, #24
 80048f4:	46bd      	mov	sp, r7
 80048f6:	bd80      	pop	{r7, pc}

080048f8 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b088      	sub	sp, #32
 80048fc:	af02      	add	r7, sp, #8
 80048fe:	60f8      	str	r0, [r7, #12]
 8004900:	60b9      	str	r1, [r7, #8]
 8004902:	603b      	str	r3, [r7, #0]
 8004904:	4613      	mov	r3, r2
 8004906:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8004908:	2300      	movs	r3, #0
 800490a:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004912:	b2db      	uxtb	r3, r3
 8004914:	2b20      	cmp	r3, #32
 8004916:	f040 8090 	bne.w	8004a3a <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d002      	beq.n	8004926 <HAL_UART_Receive+0x2e>
 8004920:	88fb      	ldrh	r3, [r7, #6]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d101      	bne.n	800492a <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8004926:	2301      	movs	r3, #1
 8004928:	e088      	b.n	8004a3c <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004930:	2b01      	cmp	r3, #1
 8004932:	d101      	bne.n	8004938 <HAL_UART_Receive+0x40>
 8004934:	2302      	movs	r3, #2
 8004936:	e081      	b.n	8004a3c <HAL_UART_Receive+0x144>
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	2201      	movs	r2, #1
 800493c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	2200      	movs	r2, #0
 8004944:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	2222      	movs	r2, #34	; 0x22
 800494a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800494e:	f7fd f931 	bl	8001bb4 <HAL_GetTick>
 8004952:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	88fa      	ldrh	r2, [r7, #6]
 8004958:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	88fa      	ldrh	r2, [r7, #6]
 800495e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8004960:	e05c      	b.n	8004a1c <HAL_UART_Receive+0x124>
    {
      huart->RxXferCount--;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004966:	b29b      	uxth	r3, r3
 8004968:	3b01      	subs	r3, #1
 800496a:	b29a      	uxth	r2, r3
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	689b      	ldr	r3, [r3, #8]
 8004974:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004978:	d12b      	bne.n	80049d2 <HAL_UART_Receive+0xda>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	9300      	str	r3, [sp, #0]
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	2200      	movs	r2, #0
 8004982:	2120      	movs	r1, #32
 8004984:	68f8      	ldr	r0, [r7, #12]
 8004986:	f000 f974 	bl	8004c72 <UART_WaitOnFlagUntilTimeout>
 800498a:	4603      	mov	r3, r0
 800498c:	2b00      	cmp	r3, #0
 800498e:	d001      	beq.n	8004994 <HAL_UART_Receive+0x9c>
        {
          return HAL_TIMEOUT;
 8004990:	2303      	movs	r3, #3
 8004992:	e053      	b.n	8004a3c <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	691b      	ldr	r3, [r3, #16]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d10c      	bne.n	80049ba <HAL_UART_Receive+0xc2>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	b29b      	uxth	r3, r3
 80049a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049ac:	b29a      	uxth	r2, r3
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	3302      	adds	r3, #2
 80049b6:	60bb      	str	r3, [r7, #8]
 80049b8:	e030      	b.n	8004a1c <HAL_UART_Receive+0x124>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	b29b      	uxth	r3, r3
 80049c2:	b2db      	uxtb	r3, r3
 80049c4:	b29a      	uxth	r2, r3
 80049c6:	693b      	ldr	r3, [r7, #16]
 80049c8:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 80049ca:	68bb      	ldr	r3, [r7, #8]
 80049cc:	3301      	adds	r3, #1
 80049ce:	60bb      	str	r3, [r7, #8]
 80049d0:	e024      	b.n	8004a1c <HAL_UART_Receive+0x124>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	9300      	str	r3, [sp, #0]
 80049d6:	697b      	ldr	r3, [r7, #20]
 80049d8:	2200      	movs	r2, #0
 80049da:	2120      	movs	r1, #32
 80049dc:	68f8      	ldr	r0, [r7, #12]
 80049de:	f000 f948 	bl	8004c72 <UART_WaitOnFlagUntilTimeout>
 80049e2:	4603      	mov	r3, r0
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d001      	beq.n	80049ec <HAL_UART_Receive+0xf4>
        {
          return HAL_TIMEOUT;
 80049e8:	2303      	movs	r3, #3
 80049ea:	e027      	b.n	8004a3c <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	691b      	ldr	r3, [r3, #16]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d108      	bne.n	8004a06 <HAL_UART_Receive+0x10e>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	6859      	ldr	r1, [r3, #4]
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	1c5a      	adds	r2, r3, #1
 80049fe:	60ba      	str	r2, [r7, #8]
 8004a00:	b2ca      	uxtb	r2, r1
 8004a02:	701a      	strb	r2, [r3, #0]
 8004a04:	e00a      	b.n	8004a1c <HAL_UART_Receive+0x124>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	b2da      	uxtb	r2, r3
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	1c59      	adds	r1, r3, #1
 8004a12:	60b9      	str	r1, [r7, #8]
 8004a14:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004a18:	b2d2      	uxtb	r2, r2
 8004a1a:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004a20:	b29b      	uxth	r3, r3
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d19d      	bne.n	8004962 <HAL_UART_Receive+0x6a>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	2220      	movs	r2, #32
 8004a2a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	2200      	movs	r2, #0
 8004a32:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8004a36:	2300      	movs	r3, #0
 8004a38:	e000      	b.n	8004a3c <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 8004a3a:	2302      	movs	r3, #2
  }
}
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	3718      	adds	r7, #24
 8004a40:	46bd      	mov	sp, r7
 8004a42:	bd80      	pop	{r7, pc}

08004a44 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b088      	sub	sp, #32
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	68db      	ldr	r3, [r3, #12]
 8004a5a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	695b      	ldr	r3, [r3, #20]
 8004a62:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8004a64:	2300      	movs	r3, #0
 8004a66:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8004a68:	2300      	movs	r3, #0
 8004a6a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004a6c:	69fb      	ldr	r3, [r7, #28]
 8004a6e:	f003 030f 	and.w	r3, r3, #15
 8004a72:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8004a74:	693b      	ldr	r3, [r7, #16]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d10d      	bne.n	8004a96 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004a7a:	69fb      	ldr	r3, [r7, #28]
 8004a7c:	f003 0320 	and.w	r3, r3, #32
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d008      	beq.n	8004a96 <HAL_UART_IRQHandler+0x52>
 8004a84:	69bb      	ldr	r3, [r7, #24]
 8004a86:	f003 0320 	and.w	r3, r3, #32
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d003      	beq.n	8004a96 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004a8e:	6878      	ldr	r0, [r7, #4]
 8004a90:	f000 f9d7 	bl	8004e42 <UART_Receive_IT>
      return;
 8004a94:	e0cc      	b.n	8004c30 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004a96:	693b      	ldr	r3, [r7, #16]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	f000 80ab 	beq.w	8004bf4 <HAL_UART_IRQHandler+0x1b0>
 8004a9e:	697b      	ldr	r3, [r7, #20]
 8004aa0:	f003 0301 	and.w	r3, r3, #1
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d105      	bne.n	8004ab4 <HAL_UART_IRQHandler+0x70>
 8004aa8:	69bb      	ldr	r3, [r7, #24]
 8004aaa:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	f000 80a0 	beq.w	8004bf4 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004ab4:	69fb      	ldr	r3, [r7, #28]
 8004ab6:	f003 0301 	and.w	r3, r3, #1
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d00a      	beq.n	8004ad4 <HAL_UART_IRQHandler+0x90>
 8004abe:	69bb      	ldr	r3, [r7, #24]
 8004ac0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d005      	beq.n	8004ad4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004acc:	f043 0201 	orr.w	r2, r3, #1
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004ad4:	69fb      	ldr	r3, [r7, #28]
 8004ad6:	f003 0304 	and.w	r3, r3, #4
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d00a      	beq.n	8004af4 <HAL_UART_IRQHandler+0xb0>
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	f003 0301 	and.w	r3, r3, #1
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d005      	beq.n	8004af4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aec:	f043 0202 	orr.w	r2, r3, #2
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004af4:	69fb      	ldr	r3, [r7, #28]
 8004af6:	f003 0302 	and.w	r3, r3, #2
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d00a      	beq.n	8004b14 <HAL_UART_IRQHandler+0xd0>
 8004afe:	697b      	ldr	r3, [r7, #20]
 8004b00:	f003 0301 	and.w	r3, r3, #1
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d005      	beq.n	8004b14 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b0c:	f043 0204 	orr.w	r2, r3, #4
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004b14:	69fb      	ldr	r3, [r7, #28]
 8004b16:	f003 0308 	and.w	r3, r3, #8
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d00a      	beq.n	8004b34 <HAL_UART_IRQHandler+0xf0>
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	f003 0301 	and.w	r3, r3, #1
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d005      	beq.n	8004b34 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b2c:	f043 0208 	orr.w	r2, r3, #8
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d078      	beq.n	8004c2e <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004b3c:	69fb      	ldr	r3, [r7, #28]
 8004b3e:	f003 0320 	and.w	r3, r3, #32
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d007      	beq.n	8004b56 <HAL_UART_IRQHandler+0x112>
 8004b46:	69bb      	ldr	r3, [r7, #24]
 8004b48:	f003 0320 	and.w	r3, r3, #32
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d002      	beq.n	8004b56 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8004b50:	6878      	ldr	r0, [r7, #4]
 8004b52:	f000 f976 	bl	8004e42 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	695b      	ldr	r3, [r3, #20]
 8004b5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	bf14      	ite	ne
 8004b64:	2301      	movne	r3, #1
 8004b66:	2300      	moveq	r3, #0
 8004b68:	b2db      	uxtb	r3, r3
 8004b6a:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b70:	f003 0308 	and.w	r3, r3, #8
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d102      	bne.n	8004b7e <HAL_UART_IRQHandler+0x13a>
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d031      	beq.n	8004be2 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	f000 f8c1 	bl	8004d06 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	695b      	ldr	r3, [r3, #20]
 8004b8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d023      	beq.n	8004bda <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	695a      	ldr	r2, [r3, #20]
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ba0:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d013      	beq.n	8004bd2 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bae:	4a22      	ldr	r2, [pc, #136]	; (8004c38 <HAL_UART_IRQHandler+0x1f4>)
 8004bb0:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	f7fd f940 	bl	8001e3c <HAL_DMA_Abort_IT>
 8004bbc:	4603      	mov	r3, r0
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d016      	beq.n	8004bf0 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bc8:	687a      	ldr	r2, [r7, #4]
 8004bca:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004bcc:	4610      	mov	r0, r2
 8004bce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bd0:	e00e      	b.n	8004bf0 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004bd2:	6878      	ldr	r0, [r7, #4]
 8004bd4:	f000 f844 	bl	8004c60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bd8:	e00a      	b.n	8004bf0 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004bda:	6878      	ldr	r0, [r7, #4]
 8004bdc:	f000 f840 	bl	8004c60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004be0:	e006      	b.n	8004bf0 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004be2:	6878      	ldr	r0, [r7, #4]
 8004be4:	f000 f83c 	bl	8004c60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2200      	movs	r2, #0
 8004bec:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8004bee:	e01e      	b.n	8004c2e <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bf0:	bf00      	nop
    return;
 8004bf2:	e01c      	b.n	8004c2e <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004bf4:	69fb      	ldr	r3, [r7, #28]
 8004bf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d008      	beq.n	8004c10 <HAL_UART_IRQHandler+0x1cc>
 8004bfe:	69bb      	ldr	r3, [r7, #24]
 8004c00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d003      	beq.n	8004c10 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8004c08:	6878      	ldr	r0, [r7, #4]
 8004c0a:	f000 f8ad 	bl	8004d68 <UART_Transmit_IT>
    return;
 8004c0e:	e00f      	b.n	8004c30 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004c10:	69fb      	ldr	r3, [r7, #28]
 8004c12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d00a      	beq.n	8004c30 <HAL_UART_IRQHandler+0x1ec>
 8004c1a:	69bb      	ldr	r3, [r7, #24]
 8004c1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d005      	beq.n	8004c30 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8004c24:	6878      	ldr	r0, [r7, #4]
 8004c26:	f000 f8f4 	bl	8004e12 <UART_EndTransmit_IT>
    return;
 8004c2a:	bf00      	nop
 8004c2c:	e000      	b.n	8004c30 <HAL_UART_IRQHandler+0x1ec>
    return;
 8004c2e:	bf00      	nop
  }
}
 8004c30:	3720      	adds	r7, #32
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bd80      	pop	{r7, pc}
 8004c36:	bf00      	nop
 8004c38:	08004d41 	.word	0x08004d41

08004c3c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	b083      	sub	sp, #12
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004c44:	bf00      	nop
 8004c46:	370c      	adds	r7, #12
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	bc80      	pop	{r7}
 8004c4c:	4770      	bx	lr

08004c4e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004c4e:	b480      	push	{r7}
 8004c50:	b083      	sub	sp, #12
 8004c52:	af00      	add	r7, sp, #0
 8004c54:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004c56:	bf00      	nop
 8004c58:	370c      	adds	r7, #12
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bc80      	pop	{r7}
 8004c5e:	4770      	bx	lr

08004c60 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004c60:	b480      	push	{r7}
 8004c62:	b083      	sub	sp, #12
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004c68:	bf00      	nop
 8004c6a:	370c      	adds	r7, #12
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	bc80      	pop	{r7}
 8004c70:	4770      	bx	lr

08004c72 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004c72:	b580      	push	{r7, lr}
 8004c74:	b084      	sub	sp, #16
 8004c76:	af00      	add	r7, sp, #0
 8004c78:	60f8      	str	r0, [r7, #12]
 8004c7a:	60b9      	str	r1, [r7, #8]
 8004c7c:	603b      	str	r3, [r7, #0]
 8004c7e:	4613      	mov	r3, r2
 8004c80:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c82:	e02c      	b.n	8004cde <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c84:	69bb      	ldr	r3, [r7, #24]
 8004c86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c8a:	d028      	beq.n	8004cde <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004c8c:	69bb      	ldr	r3, [r7, #24]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d007      	beq.n	8004ca2 <UART_WaitOnFlagUntilTimeout+0x30>
 8004c92:	f7fc ff8f 	bl	8001bb4 <HAL_GetTick>
 8004c96:	4602      	mov	r2, r0
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	1ad3      	subs	r3, r2, r3
 8004c9c:	69ba      	ldr	r2, [r7, #24]
 8004c9e:	429a      	cmp	r2, r3
 8004ca0:	d21d      	bcs.n	8004cde <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	68da      	ldr	r2, [r3, #12]
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004cb0:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	695a      	ldr	r2, [r3, #20]
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f022 0201 	bic.w	r2, r2, #1
 8004cc0:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	2220      	movs	r2, #32
 8004cc6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	2220      	movs	r2, #32
 8004cce:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8004cda:	2303      	movs	r3, #3
 8004cdc:	e00f      	b.n	8004cfe <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	681a      	ldr	r2, [r3, #0]
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	4013      	ands	r3, r2
 8004ce8:	68ba      	ldr	r2, [r7, #8]
 8004cea:	429a      	cmp	r2, r3
 8004cec:	bf0c      	ite	eq
 8004cee:	2301      	moveq	r3, #1
 8004cf0:	2300      	movne	r3, #0
 8004cf2:	b2db      	uxtb	r3, r3
 8004cf4:	461a      	mov	r2, r3
 8004cf6:	79fb      	ldrb	r3, [r7, #7]
 8004cf8:	429a      	cmp	r2, r3
 8004cfa:	d0c3      	beq.n	8004c84 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004cfc:	2300      	movs	r3, #0
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	3710      	adds	r7, #16
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}

08004d06 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004d06:	b480      	push	{r7}
 8004d08:	b083      	sub	sp, #12
 8004d0a:	af00      	add	r7, sp, #0
 8004d0c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	68da      	ldr	r2, [r3, #12]
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004d1c:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	695a      	ldr	r2, [r3, #20]
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f022 0201 	bic.w	r2, r2, #1
 8004d2c:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2220      	movs	r2, #32
 8004d32:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8004d36:	bf00      	nop
 8004d38:	370c      	adds	r7, #12
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bc80      	pop	{r7}
 8004d3e:	4770      	bx	lr

08004d40 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b084      	sub	sp, #16
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d4c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	2200      	movs	r2, #0
 8004d52:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	2200      	movs	r2, #0
 8004d58:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004d5a:	68f8      	ldr	r0, [r7, #12]
 8004d5c:	f7ff ff80 	bl	8004c60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004d60:	bf00      	nop
 8004d62:	3710      	adds	r7, #16
 8004d64:	46bd      	mov	sp, r7
 8004d66:	bd80      	pop	{r7, pc}

08004d68 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b085      	sub	sp, #20
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004d76:	b2db      	uxtb	r3, r3
 8004d78:	2b21      	cmp	r3, #33	; 0x21
 8004d7a:	d144      	bne.n	8004e06 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	689b      	ldr	r3, [r3, #8]
 8004d80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d84:	d11a      	bne.n	8004dbc <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6a1b      	ldr	r3, [r3, #32]
 8004d8a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	881b      	ldrh	r3, [r3, #0]
 8004d90:	461a      	mov	r2, r3
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d9a:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	691b      	ldr	r3, [r3, #16]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d105      	bne.n	8004db0 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6a1b      	ldr	r3, [r3, #32]
 8004da8:	1c9a      	adds	r2, r3, #2
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	621a      	str	r2, [r3, #32]
 8004dae:	e00e      	b.n	8004dce <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6a1b      	ldr	r3, [r3, #32]
 8004db4:	1c5a      	adds	r2, r3, #1
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	621a      	str	r2, [r3, #32]
 8004dba:	e008      	b.n	8004dce <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6a1b      	ldr	r3, [r3, #32]
 8004dc0:	1c59      	adds	r1, r3, #1
 8004dc2:	687a      	ldr	r2, [r7, #4]
 8004dc4:	6211      	str	r1, [r2, #32]
 8004dc6:	781a      	ldrb	r2, [r3, #0]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004dd2:	b29b      	uxth	r3, r3
 8004dd4:	3b01      	subs	r3, #1
 8004dd6:	b29b      	uxth	r3, r3
 8004dd8:	687a      	ldr	r2, [r7, #4]
 8004dda:	4619      	mov	r1, r3
 8004ddc:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d10f      	bne.n	8004e02 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	68da      	ldr	r2, [r3, #12]
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004df0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	68da      	ldr	r2, [r3, #12]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e00:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004e02:	2300      	movs	r3, #0
 8004e04:	e000      	b.n	8004e08 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8004e06:	2302      	movs	r3, #2
  }
}
 8004e08:	4618      	mov	r0, r3
 8004e0a:	3714      	adds	r7, #20
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	bc80      	pop	{r7}
 8004e10:	4770      	bx	lr

08004e12 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004e12:	b580      	push	{r7, lr}
 8004e14:	b082      	sub	sp, #8
 8004e16:	af00      	add	r7, sp, #0
 8004e18:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	68da      	ldr	r2, [r3, #12]
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e28:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2220      	movs	r2, #32
 8004e2e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004e32:	6878      	ldr	r0, [r7, #4]
 8004e34:	f7ff ff02 	bl	8004c3c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004e38:	2300      	movs	r3, #0
}
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	3708      	adds	r7, #8
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	bd80      	pop	{r7, pc}

08004e42 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004e42:	b580      	push	{r7, lr}
 8004e44:	b084      	sub	sp, #16
 8004e46:	af00      	add	r7, sp, #0
 8004e48:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004e50:	b2db      	uxtb	r3, r3
 8004e52:	2b22      	cmp	r3, #34	; 0x22
 8004e54:	d171      	bne.n	8004f3a <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	689b      	ldr	r3, [r3, #8]
 8004e5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e5e:	d123      	bne.n	8004ea8 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e64:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	691b      	ldr	r3, [r3, #16]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d10e      	bne.n	8004e8c <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	b29b      	uxth	r3, r3
 8004e76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e7a:	b29a      	uxth	r2, r3
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e84:	1c9a      	adds	r2, r3, #2
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	629a      	str	r2, [r3, #40]	; 0x28
 8004e8a:	e029      	b.n	8004ee0 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	b29b      	uxth	r3, r3
 8004e94:	b2db      	uxtb	r3, r3
 8004e96:	b29a      	uxth	r2, r3
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ea0:	1c5a      	adds	r2, r3, #1
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	629a      	str	r2, [r3, #40]	; 0x28
 8004ea6:	e01b      	b.n	8004ee0 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	691b      	ldr	r3, [r3, #16]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d10a      	bne.n	8004ec6 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	6858      	ldr	r0, [r3, #4]
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eba:	1c59      	adds	r1, r3, #1
 8004ebc:	687a      	ldr	r2, [r7, #4]
 8004ebe:	6291      	str	r1, [r2, #40]	; 0x28
 8004ec0:	b2c2      	uxtb	r2, r0
 8004ec2:	701a      	strb	r2, [r3, #0]
 8004ec4:	e00c      	b.n	8004ee0 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	b2da      	uxtb	r2, r3
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ed2:	1c58      	adds	r0, r3, #1
 8004ed4:	6879      	ldr	r1, [r7, #4]
 8004ed6:	6288      	str	r0, [r1, #40]	; 0x28
 8004ed8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004edc:	b2d2      	uxtb	r2, r2
 8004ede:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004ee4:	b29b      	uxth	r3, r3
 8004ee6:	3b01      	subs	r3, #1
 8004ee8:	b29b      	uxth	r3, r3
 8004eea:	687a      	ldr	r2, [r7, #4]
 8004eec:	4619      	mov	r1, r3
 8004eee:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d120      	bne.n	8004f36 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	68da      	ldr	r2, [r3, #12]
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f022 0220 	bic.w	r2, r2, #32
 8004f02:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	68da      	ldr	r2, [r3, #12]
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004f12:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	695a      	ldr	r2, [r3, #20]
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f022 0201 	bic.w	r2, r2, #1
 8004f22:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2220      	movs	r2, #32
 8004f28:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8004f2c:	6878      	ldr	r0, [r7, #4]
 8004f2e:	f7ff fe8e 	bl	8004c4e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8004f32:	2300      	movs	r3, #0
 8004f34:	e002      	b.n	8004f3c <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8004f36:	2300      	movs	r3, #0
 8004f38:	e000      	b.n	8004f3c <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8004f3a:	2302      	movs	r3, #2
  }
}
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	3710      	adds	r7, #16
 8004f40:	46bd      	mov	sp, r7
 8004f42:	bd80      	pop	{r7, pc}

08004f44 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b084      	sub	sp, #16
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	691b      	ldr	r3, [r3, #16]
 8004f52:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	68da      	ldr	r2, [r3, #12]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	430a      	orrs	r2, r1
 8004f60:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	689a      	ldr	r2, [r3, #8]
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	691b      	ldr	r3, [r3, #16]
 8004f6a:	431a      	orrs	r2, r3
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	695b      	ldr	r3, [r3, #20]
 8004f70:	4313      	orrs	r3, r2
 8004f72:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	68db      	ldr	r3, [r3, #12]
 8004f7a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004f7e:	f023 030c 	bic.w	r3, r3, #12
 8004f82:	687a      	ldr	r2, [r7, #4]
 8004f84:	6812      	ldr	r2, [r2, #0]
 8004f86:	68f9      	ldr	r1, [r7, #12]
 8004f88:	430b      	orrs	r3, r1
 8004f8a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	695b      	ldr	r3, [r3, #20]
 8004f92:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	699a      	ldr	r2, [r3, #24]
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	430a      	orrs	r2, r1
 8004fa0:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	4a52      	ldr	r2, [pc, #328]	; (80050f0 <UART_SetConfig+0x1ac>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d14e      	bne.n	800504a <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004fac:	f7ff f964 	bl	8004278 <HAL_RCC_GetPCLK2Freq>
 8004fb0:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004fb2:	68ba      	ldr	r2, [r7, #8]
 8004fb4:	4613      	mov	r3, r2
 8004fb6:	009b      	lsls	r3, r3, #2
 8004fb8:	4413      	add	r3, r2
 8004fba:	009a      	lsls	r2, r3, #2
 8004fbc:	441a      	add	r2, r3
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	009b      	lsls	r3, r3, #2
 8004fc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fc8:	4a4a      	ldr	r2, [pc, #296]	; (80050f4 <UART_SetConfig+0x1b0>)
 8004fca:	fba2 2303 	umull	r2, r3, r2, r3
 8004fce:	095b      	lsrs	r3, r3, #5
 8004fd0:	0119      	lsls	r1, r3, #4
 8004fd2:	68ba      	ldr	r2, [r7, #8]
 8004fd4:	4613      	mov	r3, r2
 8004fd6:	009b      	lsls	r3, r3, #2
 8004fd8:	4413      	add	r3, r2
 8004fda:	009a      	lsls	r2, r3, #2
 8004fdc:	441a      	add	r2, r3
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	685b      	ldr	r3, [r3, #4]
 8004fe2:	009b      	lsls	r3, r3, #2
 8004fe4:	fbb2 f2f3 	udiv	r2, r2, r3
 8004fe8:	4b42      	ldr	r3, [pc, #264]	; (80050f4 <UART_SetConfig+0x1b0>)
 8004fea:	fba3 0302 	umull	r0, r3, r3, r2
 8004fee:	095b      	lsrs	r3, r3, #5
 8004ff0:	2064      	movs	r0, #100	; 0x64
 8004ff2:	fb00 f303 	mul.w	r3, r0, r3
 8004ff6:	1ad3      	subs	r3, r2, r3
 8004ff8:	011b      	lsls	r3, r3, #4
 8004ffa:	3332      	adds	r3, #50	; 0x32
 8004ffc:	4a3d      	ldr	r2, [pc, #244]	; (80050f4 <UART_SetConfig+0x1b0>)
 8004ffe:	fba2 2303 	umull	r2, r3, r2, r3
 8005002:	095b      	lsrs	r3, r3, #5
 8005004:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005008:	4419      	add	r1, r3
 800500a:	68ba      	ldr	r2, [r7, #8]
 800500c:	4613      	mov	r3, r2
 800500e:	009b      	lsls	r3, r3, #2
 8005010:	4413      	add	r3, r2
 8005012:	009a      	lsls	r2, r3, #2
 8005014:	441a      	add	r2, r3
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	009b      	lsls	r3, r3, #2
 800501c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005020:	4b34      	ldr	r3, [pc, #208]	; (80050f4 <UART_SetConfig+0x1b0>)
 8005022:	fba3 0302 	umull	r0, r3, r3, r2
 8005026:	095b      	lsrs	r3, r3, #5
 8005028:	2064      	movs	r0, #100	; 0x64
 800502a:	fb00 f303 	mul.w	r3, r0, r3
 800502e:	1ad3      	subs	r3, r2, r3
 8005030:	011b      	lsls	r3, r3, #4
 8005032:	3332      	adds	r3, #50	; 0x32
 8005034:	4a2f      	ldr	r2, [pc, #188]	; (80050f4 <UART_SetConfig+0x1b0>)
 8005036:	fba2 2303 	umull	r2, r3, r2, r3
 800503a:	095b      	lsrs	r3, r3, #5
 800503c:	f003 020f 	and.w	r2, r3, #15
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	440a      	add	r2, r1
 8005046:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8005048:	e04d      	b.n	80050e6 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 800504a:	f7ff f901 	bl	8004250 <HAL_RCC_GetPCLK1Freq>
 800504e:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005050:	68ba      	ldr	r2, [r7, #8]
 8005052:	4613      	mov	r3, r2
 8005054:	009b      	lsls	r3, r3, #2
 8005056:	4413      	add	r3, r2
 8005058:	009a      	lsls	r2, r3, #2
 800505a:	441a      	add	r2, r3
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	009b      	lsls	r3, r3, #2
 8005062:	fbb2 f3f3 	udiv	r3, r2, r3
 8005066:	4a23      	ldr	r2, [pc, #140]	; (80050f4 <UART_SetConfig+0x1b0>)
 8005068:	fba2 2303 	umull	r2, r3, r2, r3
 800506c:	095b      	lsrs	r3, r3, #5
 800506e:	0119      	lsls	r1, r3, #4
 8005070:	68ba      	ldr	r2, [r7, #8]
 8005072:	4613      	mov	r3, r2
 8005074:	009b      	lsls	r3, r3, #2
 8005076:	4413      	add	r3, r2
 8005078:	009a      	lsls	r2, r3, #2
 800507a:	441a      	add	r2, r3
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	685b      	ldr	r3, [r3, #4]
 8005080:	009b      	lsls	r3, r3, #2
 8005082:	fbb2 f2f3 	udiv	r2, r2, r3
 8005086:	4b1b      	ldr	r3, [pc, #108]	; (80050f4 <UART_SetConfig+0x1b0>)
 8005088:	fba3 0302 	umull	r0, r3, r3, r2
 800508c:	095b      	lsrs	r3, r3, #5
 800508e:	2064      	movs	r0, #100	; 0x64
 8005090:	fb00 f303 	mul.w	r3, r0, r3
 8005094:	1ad3      	subs	r3, r2, r3
 8005096:	011b      	lsls	r3, r3, #4
 8005098:	3332      	adds	r3, #50	; 0x32
 800509a:	4a16      	ldr	r2, [pc, #88]	; (80050f4 <UART_SetConfig+0x1b0>)
 800509c:	fba2 2303 	umull	r2, r3, r2, r3
 80050a0:	095b      	lsrs	r3, r3, #5
 80050a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80050a6:	4419      	add	r1, r3
 80050a8:	68ba      	ldr	r2, [r7, #8]
 80050aa:	4613      	mov	r3, r2
 80050ac:	009b      	lsls	r3, r3, #2
 80050ae:	4413      	add	r3, r2
 80050b0:	009a      	lsls	r2, r3, #2
 80050b2:	441a      	add	r2, r3
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	685b      	ldr	r3, [r3, #4]
 80050b8:	009b      	lsls	r3, r3, #2
 80050ba:	fbb2 f2f3 	udiv	r2, r2, r3
 80050be:	4b0d      	ldr	r3, [pc, #52]	; (80050f4 <UART_SetConfig+0x1b0>)
 80050c0:	fba3 0302 	umull	r0, r3, r3, r2
 80050c4:	095b      	lsrs	r3, r3, #5
 80050c6:	2064      	movs	r0, #100	; 0x64
 80050c8:	fb00 f303 	mul.w	r3, r0, r3
 80050cc:	1ad3      	subs	r3, r2, r3
 80050ce:	011b      	lsls	r3, r3, #4
 80050d0:	3332      	adds	r3, #50	; 0x32
 80050d2:	4a08      	ldr	r2, [pc, #32]	; (80050f4 <UART_SetConfig+0x1b0>)
 80050d4:	fba2 2303 	umull	r2, r3, r2, r3
 80050d8:	095b      	lsrs	r3, r3, #5
 80050da:	f003 020f 	and.w	r2, r3, #15
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	440a      	add	r2, r1
 80050e4:	609a      	str	r2, [r3, #8]
}
 80050e6:	bf00      	nop
 80050e8:	3710      	adds	r7, #16
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bd80      	pop	{r7, pc}
 80050ee:	bf00      	nop
 80050f0:	40013800 	.word	0x40013800
 80050f4:	51eb851f 	.word	0x51eb851f

080050f8 <__errno>:
 80050f8:	4b01      	ldr	r3, [pc, #4]	; (8005100 <__errno+0x8>)
 80050fa:	6818      	ldr	r0, [r3, #0]
 80050fc:	4770      	bx	lr
 80050fe:	bf00      	nop
 8005100:	20000010 	.word	0x20000010

08005104 <__libc_init_array>:
 8005104:	b570      	push	{r4, r5, r6, lr}
 8005106:	2500      	movs	r5, #0
 8005108:	4e0c      	ldr	r6, [pc, #48]	; (800513c <__libc_init_array+0x38>)
 800510a:	4c0d      	ldr	r4, [pc, #52]	; (8005140 <__libc_init_array+0x3c>)
 800510c:	1ba4      	subs	r4, r4, r6
 800510e:	10a4      	asrs	r4, r4, #2
 8005110:	42a5      	cmp	r5, r4
 8005112:	d109      	bne.n	8005128 <__libc_init_array+0x24>
 8005114:	f001 f82a 	bl	800616c <_init>
 8005118:	2500      	movs	r5, #0
 800511a:	4e0a      	ldr	r6, [pc, #40]	; (8005144 <__libc_init_array+0x40>)
 800511c:	4c0a      	ldr	r4, [pc, #40]	; (8005148 <__libc_init_array+0x44>)
 800511e:	1ba4      	subs	r4, r4, r6
 8005120:	10a4      	asrs	r4, r4, #2
 8005122:	42a5      	cmp	r5, r4
 8005124:	d105      	bne.n	8005132 <__libc_init_array+0x2e>
 8005126:	bd70      	pop	{r4, r5, r6, pc}
 8005128:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800512c:	4798      	blx	r3
 800512e:	3501      	adds	r5, #1
 8005130:	e7ee      	b.n	8005110 <__libc_init_array+0xc>
 8005132:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005136:	4798      	blx	r3
 8005138:	3501      	adds	r5, #1
 800513a:	e7f2      	b.n	8005122 <__libc_init_array+0x1e>
 800513c:	080063cc 	.word	0x080063cc
 8005140:	080063cc 	.word	0x080063cc
 8005144:	080063cc 	.word	0x080063cc
 8005148:	080063d0 	.word	0x080063d0

0800514c <memset>:
 800514c:	4603      	mov	r3, r0
 800514e:	4402      	add	r2, r0
 8005150:	4293      	cmp	r3, r2
 8005152:	d100      	bne.n	8005156 <memset+0xa>
 8005154:	4770      	bx	lr
 8005156:	f803 1b01 	strb.w	r1, [r3], #1
 800515a:	e7f9      	b.n	8005150 <memset+0x4>

0800515c <iprintf>:
 800515c:	b40f      	push	{r0, r1, r2, r3}
 800515e:	4b0a      	ldr	r3, [pc, #40]	; (8005188 <iprintf+0x2c>)
 8005160:	b513      	push	{r0, r1, r4, lr}
 8005162:	681c      	ldr	r4, [r3, #0]
 8005164:	b124      	cbz	r4, 8005170 <iprintf+0x14>
 8005166:	69a3      	ldr	r3, [r4, #24]
 8005168:	b913      	cbnz	r3, 8005170 <iprintf+0x14>
 800516a:	4620      	mov	r0, r4
 800516c:	f000 fad0 	bl	8005710 <__sinit>
 8005170:	ab05      	add	r3, sp, #20
 8005172:	9a04      	ldr	r2, [sp, #16]
 8005174:	68a1      	ldr	r1, [r4, #8]
 8005176:	4620      	mov	r0, r4
 8005178:	9301      	str	r3, [sp, #4]
 800517a:	f000 fc8d 	bl	8005a98 <_vfiprintf_r>
 800517e:	b002      	add	sp, #8
 8005180:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005184:	b004      	add	sp, #16
 8005186:	4770      	bx	lr
 8005188:	20000010 	.word	0x20000010

0800518c <_puts_r>:
 800518c:	b570      	push	{r4, r5, r6, lr}
 800518e:	460e      	mov	r6, r1
 8005190:	4605      	mov	r5, r0
 8005192:	b118      	cbz	r0, 800519c <_puts_r+0x10>
 8005194:	6983      	ldr	r3, [r0, #24]
 8005196:	b90b      	cbnz	r3, 800519c <_puts_r+0x10>
 8005198:	f000 faba 	bl	8005710 <__sinit>
 800519c:	69ab      	ldr	r3, [r5, #24]
 800519e:	68ac      	ldr	r4, [r5, #8]
 80051a0:	b913      	cbnz	r3, 80051a8 <_puts_r+0x1c>
 80051a2:	4628      	mov	r0, r5
 80051a4:	f000 fab4 	bl	8005710 <__sinit>
 80051a8:	4b23      	ldr	r3, [pc, #140]	; (8005238 <_puts_r+0xac>)
 80051aa:	429c      	cmp	r4, r3
 80051ac:	d117      	bne.n	80051de <_puts_r+0x52>
 80051ae:	686c      	ldr	r4, [r5, #4]
 80051b0:	89a3      	ldrh	r3, [r4, #12]
 80051b2:	071b      	lsls	r3, r3, #28
 80051b4:	d51d      	bpl.n	80051f2 <_puts_r+0x66>
 80051b6:	6923      	ldr	r3, [r4, #16]
 80051b8:	b1db      	cbz	r3, 80051f2 <_puts_r+0x66>
 80051ba:	3e01      	subs	r6, #1
 80051bc:	68a3      	ldr	r3, [r4, #8]
 80051be:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80051c2:	3b01      	subs	r3, #1
 80051c4:	60a3      	str	r3, [r4, #8]
 80051c6:	b9e9      	cbnz	r1, 8005204 <_puts_r+0x78>
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	da2e      	bge.n	800522a <_puts_r+0x9e>
 80051cc:	4622      	mov	r2, r4
 80051ce:	210a      	movs	r1, #10
 80051d0:	4628      	mov	r0, r5
 80051d2:	f000 f8ed 	bl	80053b0 <__swbuf_r>
 80051d6:	3001      	adds	r0, #1
 80051d8:	d011      	beq.n	80051fe <_puts_r+0x72>
 80051da:	200a      	movs	r0, #10
 80051dc:	e011      	b.n	8005202 <_puts_r+0x76>
 80051de:	4b17      	ldr	r3, [pc, #92]	; (800523c <_puts_r+0xb0>)
 80051e0:	429c      	cmp	r4, r3
 80051e2:	d101      	bne.n	80051e8 <_puts_r+0x5c>
 80051e4:	68ac      	ldr	r4, [r5, #8]
 80051e6:	e7e3      	b.n	80051b0 <_puts_r+0x24>
 80051e8:	4b15      	ldr	r3, [pc, #84]	; (8005240 <_puts_r+0xb4>)
 80051ea:	429c      	cmp	r4, r3
 80051ec:	bf08      	it	eq
 80051ee:	68ec      	ldreq	r4, [r5, #12]
 80051f0:	e7de      	b.n	80051b0 <_puts_r+0x24>
 80051f2:	4621      	mov	r1, r4
 80051f4:	4628      	mov	r0, r5
 80051f6:	f000 f92d 	bl	8005454 <__swsetup_r>
 80051fa:	2800      	cmp	r0, #0
 80051fc:	d0dd      	beq.n	80051ba <_puts_r+0x2e>
 80051fe:	f04f 30ff 	mov.w	r0, #4294967295
 8005202:	bd70      	pop	{r4, r5, r6, pc}
 8005204:	2b00      	cmp	r3, #0
 8005206:	da04      	bge.n	8005212 <_puts_r+0x86>
 8005208:	69a2      	ldr	r2, [r4, #24]
 800520a:	429a      	cmp	r2, r3
 800520c:	dc06      	bgt.n	800521c <_puts_r+0x90>
 800520e:	290a      	cmp	r1, #10
 8005210:	d004      	beq.n	800521c <_puts_r+0x90>
 8005212:	6823      	ldr	r3, [r4, #0]
 8005214:	1c5a      	adds	r2, r3, #1
 8005216:	6022      	str	r2, [r4, #0]
 8005218:	7019      	strb	r1, [r3, #0]
 800521a:	e7cf      	b.n	80051bc <_puts_r+0x30>
 800521c:	4622      	mov	r2, r4
 800521e:	4628      	mov	r0, r5
 8005220:	f000 f8c6 	bl	80053b0 <__swbuf_r>
 8005224:	3001      	adds	r0, #1
 8005226:	d1c9      	bne.n	80051bc <_puts_r+0x30>
 8005228:	e7e9      	b.n	80051fe <_puts_r+0x72>
 800522a:	200a      	movs	r0, #10
 800522c:	6823      	ldr	r3, [r4, #0]
 800522e:	1c5a      	adds	r2, r3, #1
 8005230:	6022      	str	r2, [r4, #0]
 8005232:	7018      	strb	r0, [r3, #0]
 8005234:	e7e5      	b.n	8005202 <_puts_r+0x76>
 8005236:	bf00      	nop
 8005238:	08006358 	.word	0x08006358
 800523c:	08006378 	.word	0x08006378
 8005240:	08006338 	.word	0x08006338

08005244 <puts>:
 8005244:	4b02      	ldr	r3, [pc, #8]	; (8005250 <puts+0xc>)
 8005246:	4601      	mov	r1, r0
 8005248:	6818      	ldr	r0, [r3, #0]
 800524a:	f7ff bf9f 	b.w	800518c <_puts_r>
 800524e:	bf00      	nop
 8005250:	20000010 	.word	0x20000010

08005254 <setvbuf>:
 8005254:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005258:	461d      	mov	r5, r3
 800525a:	4b51      	ldr	r3, [pc, #324]	; (80053a0 <setvbuf+0x14c>)
 800525c:	4604      	mov	r4, r0
 800525e:	681e      	ldr	r6, [r3, #0]
 8005260:	460f      	mov	r7, r1
 8005262:	4690      	mov	r8, r2
 8005264:	b126      	cbz	r6, 8005270 <setvbuf+0x1c>
 8005266:	69b3      	ldr	r3, [r6, #24]
 8005268:	b913      	cbnz	r3, 8005270 <setvbuf+0x1c>
 800526a:	4630      	mov	r0, r6
 800526c:	f000 fa50 	bl	8005710 <__sinit>
 8005270:	4b4c      	ldr	r3, [pc, #304]	; (80053a4 <setvbuf+0x150>)
 8005272:	429c      	cmp	r4, r3
 8005274:	d152      	bne.n	800531c <setvbuf+0xc8>
 8005276:	6874      	ldr	r4, [r6, #4]
 8005278:	f1b8 0f02 	cmp.w	r8, #2
 800527c:	d006      	beq.n	800528c <setvbuf+0x38>
 800527e:	f1b8 0f01 	cmp.w	r8, #1
 8005282:	f200 8089 	bhi.w	8005398 <setvbuf+0x144>
 8005286:	2d00      	cmp	r5, #0
 8005288:	f2c0 8086 	blt.w	8005398 <setvbuf+0x144>
 800528c:	4621      	mov	r1, r4
 800528e:	4630      	mov	r0, r6
 8005290:	f000 f9d4 	bl	800563c <_fflush_r>
 8005294:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005296:	b141      	cbz	r1, 80052aa <setvbuf+0x56>
 8005298:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800529c:	4299      	cmp	r1, r3
 800529e:	d002      	beq.n	80052a6 <setvbuf+0x52>
 80052a0:	4630      	mov	r0, r6
 80052a2:	f000 fb2b 	bl	80058fc <_free_r>
 80052a6:	2300      	movs	r3, #0
 80052a8:	6363      	str	r3, [r4, #52]	; 0x34
 80052aa:	2300      	movs	r3, #0
 80052ac:	61a3      	str	r3, [r4, #24]
 80052ae:	6063      	str	r3, [r4, #4]
 80052b0:	89a3      	ldrh	r3, [r4, #12]
 80052b2:	061b      	lsls	r3, r3, #24
 80052b4:	d503      	bpl.n	80052be <setvbuf+0x6a>
 80052b6:	6921      	ldr	r1, [r4, #16]
 80052b8:	4630      	mov	r0, r6
 80052ba:	f000 fb1f 	bl	80058fc <_free_r>
 80052be:	89a3      	ldrh	r3, [r4, #12]
 80052c0:	f1b8 0f02 	cmp.w	r8, #2
 80052c4:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 80052c8:	f023 0303 	bic.w	r3, r3, #3
 80052cc:	81a3      	strh	r3, [r4, #12]
 80052ce:	d05d      	beq.n	800538c <setvbuf+0x138>
 80052d0:	ab01      	add	r3, sp, #4
 80052d2:	466a      	mov	r2, sp
 80052d4:	4621      	mov	r1, r4
 80052d6:	4630      	mov	r0, r6
 80052d8:	f000 faa4 	bl	8005824 <__swhatbuf_r>
 80052dc:	89a3      	ldrh	r3, [r4, #12]
 80052de:	4318      	orrs	r0, r3
 80052e0:	81a0      	strh	r0, [r4, #12]
 80052e2:	bb2d      	cbnz	r5, 8005330 <setvbuf+0xdc>
 80052e4:	9d00      	ldr	r5, [sp, #0]
 80052e6:	4628      	mov	r0, r5
 80052e8:	f000 fb00 	bl	80058ec <malloc>
 80052ec:	4607      	mov	r7, r0
 80052ee:	2800      	cmp	r0, #0
 80052f0:	d14e      	bne.n	8005390 <setvbuf+0x13c>
 80052f2:	f8dd 9000 	ldr.w	r9, [sp]
 80052f6:	45a9      	cmp	r9, r5
 80052f8:	d13c      	bne.n	8005374 <setvbuf+0x120>
 80052fa:	f04f 30ff 	mov.w	r0, #4294967295
 80052fe:	89a3      	ldrh	r3, [r4, #12]
 8005300:	f043 0302 	orr.w	r3, r3, #2
 8005304:	81a3      	strh	r3, [r4, #12]
 8005306:	2300      	movs	r3, #0
 8005308:	60a3      	str	r3, [r4, #8]
 800530a:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800530e:	6023      	str	r3, [r4, #0]
 8005310:	6123      	str	r3, [r4, #16]
 8005312:	2301      	movs	r3, #1
 8005314:	6163      	str	r3, [r4, #20]
 8005316:	b003      	add	sp, #12
 8005318:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800531c:	4b22      	ldr	r3, [pc, #136]	; (80053a8 <setvbuf+0x154>)
 800531e:	429c      	cmp	r4, r3
 8005320:	d101      	bne.n	8005326 <setvbuf+0xd2>
 8005322:	68b4      	ldr	r4, [r6, #8]
 8005324:	e7a8      	b.n	8005278 <setvbuf+0x24>
 8005326:	4b21      	ldr	r3, [pc, #132]	; (80053ac <setvbuf+0x158>)
 8005328:	429c      	cmp	r4, r3
 800532a:	bf08      	it	eq
 800532c:	68f4      	ldreq	r4, [r6, #12]
 800532e:	e7a3      	b.n	8005278 <setvbuf+0x24>
 8005330:	2f00      	cmp	r7, #0
 8005332:	d0d8      	beq.n	80052e6 <setvbuf+0x92>
 8005334:	69b3      	ldr	r3, [r6, #24]
 8005336:	b913      	cbnz	r3, 800533e <setvbuf+0xea>
 8005338:	4630      	mov	r0, r6
 800533a:	f000 f9e9 	bl	8005710 <__sinit>
 800533e:	f1b8 0f01 	cmp.w	r8, #1
 8005342:	bf08      	it	eq
 8005344:	89a3      	ldrheq	r3, [r4, #12]
 8005346:	6027      	str	r7, [r4, #0]
 8005348:	bf04      	itt	eq
 800534a:	f043 0301 	orreq.w	r3, r3, #1
 800534e:	81a3      	strheq	r3, [r4, #12]
 8005350:	89a3      	ldrh	r3, [r4, #12]
 8005352:	e9c4 7504 	strd	r7, r5, [r4, #16]
 8005356:	f013 0008 	ands.w	r0, r3, #8
 800535a:	d01b      	beq.n	8005394 <setvbuf+0x140>
 800535c:	f013 0001 	ands.w	r0, r3, #1
 8005360:	f04f 0300 	mov.w	r3, #0
 8005364:	bf1f      	itttt	ne
 8005366:	426d      	negne	r5, r5
 8005368:	60a3      	strne	r3, [r4, #8]
 800536a:	61a5      	strne	r5, [r4, #24]
 800536c:	4618      	movne	r0, r3
 800536e:	bf08      	it	eq
 8005370:	60a5      	streq	r5, [r4, #8]
 8005372:	e7d0      	b.n	8005316 <setvbuf+0xc2>
 8005374:	4648      	mov	r0, r9
 8005376:	f000 fab9 	bl	80058ec <malloc>
 800537a:	4607      	mov	r7, r0
 800537c:	2800      	cmp	r0, #0
 800537e:	d0bc      	beq.n	80052fa <setvbuf+0xa6>
 8005380:	89a3      	ldrh	r3, [r4, #12]
 8005382:	464d      	mov	r5, r9
 8005384:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005388:	81a3      	strh	r3, [r4, #12]
 800538a:	e7d3      	b.n	8005334 <setvbuf+0xe0>
 800538c:	2000      	movs	r0, #0
 800538e:	e7b6      	b.n	80052fe <setvbuf+0xaa>
 8005390:	46a9      	mov	r9, r5
 8005392:	e7f5      	b.n	8005380 <setvbuf+0x12c>
 8005394:	60a0      	str	r0, [r4, #8]
 8005396:	e7be      	b.n	8005316 <setvbuf+0xc2>
 8005398:	f04f 30ff 	mov.w	r0, #4294967295
 800539c:	e7bb      	b.n	8005316 <setvbuf+0xc2>
 800539e:	bf00      	nop
 80053a0:	20000010 	.word	0x20000010
 80053a4:	08006358 	.word	0x08006358
 80053a8:	08006378 	.word	0x08006378
 80053ac:	08006338 	.word	0x08006338

080053b0 <__swbuf_r>:
 80053b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053b2:	460e      	mov	r6, r1
 80053b4:	4614      	mov	r4, r2
 80053b6:	4605      	mov	r5, r0
 80053b8:	b118      	cbz	r0, 80053c2 <__swbuf_r+0x12>
 80053ba:	6983      	ldr	r3, [r0, #24]
 80053bc:	b90b      	cbnz	r3, 80053c2 <__swbuf_r+0x12>
 80053be:	f000 f9a7 	bl	8005710 <__sinit>
 80053c2:	4b21      	ldr	r3, [pc, #132]	; (8005448 <__swbuf_r+0x98>)
 80053c4:	429c      	cmp	r4, r3
 80053c6:	d12a      	bne.n	800541e <__swbuf_r+0x6e>
 80053c8:	686c      	ldr	r4, [r5, #4]
 80053ca:	69a3      	ldr	r3, [r4, #24]
 80053cc:	60a3      	str	r3, [r4, #8]
 80053ce:	89a3      	ldrh	r3, [r4, #12]
 80053d0:	071a      	lsls	r2, r3, #28
 80053d2:	d52e      	bpl.n	8005432 <__swbuf_r+0x82>
 80053d4:	6923      	ldr	r3, [r4, #16]
 80053d6:	b363      	cbz	r3, 8005432 <__swbuf_r+0x82>
 80053d8:	6923      	ldr	r3, [r4, #16]
 80053da:	6820      	ldr	r0, [r4, #0]
 80053dc:	b2f6      	uxtb	r6, r6
 80053de:	1ac0      	subs	r0, r0, r3
 80053e0:	6963      	ldr	r3, [r4, #20]
 80053e2:	4637      	mov	r7, r6
 80053e4:	4283      	cmp	r3, r0
 80053e6:	dc04      	bgt.n	80053f2 <__swbuf_r+0x42>
 80053e8:	4621      	mov	r1, r4
 80053ea:	4628      	mov	r0, r5
 80053ec:	f000 f926 	bl	800563c <_fflush_r>
 80053f0:	bb28      	cbnz	r0, 800543e <__swbuf_r+0x8e>
 80053f2:	68a3      	ldr	r3, [r4, #8]
 80053f4:	3001      	adds	r0, #1
 80053f6:	3b01      	subs	r3, #1
 80053f8:	60a3      	str	r3, [r4, #8]
 80053fa:	6823      	ldr	r3, [r4, #0]
 80053fc:	1c5a      	adds	r2, r3, #1
 80053fe:	6022      	str	r2, [r4, #0]
 8005400:	701e      	strb	r6, [r3, #0]
 8005402:	6963      	ldr	r3, [r4, #20]
 8005404:	4283      	cmp	r3, r0
 8005406:	d004      	beq.n	8005412 <__swbuf_r+0x62>
 8005408:	89a3      	ldrh	r3, [r4, #12]
 800540a:	07db      	lsls	r3, r3, #31
 800540c:	d519      	bpl.n	8005442 <__swbuf_r+0x92>
 800540e:	2e0a      	cmp	r6, #10
 8005410:	d117      	bne.n	8005442 <__swbuf_r+0x92>
 8005412:	4621      	mov	r1, r4
 8005414:	4628      	mov	r0, r5
 8005416:	f000 f911 	bl	800563c <_fflush_r>
 800541a:	b190      	cbz	r0, 8005442 <__swbuf_r+0x92>
 800541c:	e00f      	b.n	800543e <__swbuf_r+0x8e>
 800541e:	4b0b      	ldr	r3, [pc, #44]	; (800544c <__swbuf_r+0x9c>)
 8005420:	429c      	cmp	r4, r3
 8005422:	d101      	bne.n	8005428 <__swbuf_r+0x78>
 8005424:	68ac      	ldr	r4, [r5, #8]
 8005426:	e7d0      	b.n	80053ca <__swbuf_r+0x1a>
 8005428:	4b09      	ldr	r3, [pc, #36]	; (8005450 <__swbuf_r+0xa0>)
 800542a:	429c      	cmp	r4, r3
 800542c:	bf08      	it	eq
 800542e:	68ec      	ldreq	r4, [r5, #12]
 8005430:	e7cb      	b.n	80053ca <__swbuf_r+0x1a>
 8005432:	4621      	mov	r1, r4
 8005434:	4628      	mov	r0, r5
 8005436:	f000 f80d 	bl	8005454 <__swsetup_r>
 800543a:	2800      	cmp	r0, #0
 800543c:	d0cc      	beq.n	80053d8 <__swbuf_r+0x28>
 800543e:	f04f 37ff 	mov.w	r7, #4294967295
 8005442:	4638      	mov	r0, r7
 8005444:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005446:	bf00      	nop
 8005448:	08006358 	.word	0x08006358
 800544c:	08006378 	.word	0x08006378
 8005450:	08006338 	.word	0x08006338

08005454 <__swsetup_r>:
 8005454:	4b32      	ldr	r3, [pc, #200]	; (8005520 <__swsetup_r+0xcc>)
 8005456:	b570      	push	{r4, r5, r6, lr}
 8005458:	681d      	ldr	r5, [r3, #0]
 800545a:	4606      	mov	r6, r0
 800545c:	460c      	mov	r4, r1
 800545e:	b125      	cbz	r5, 800546a <__swsetup_r+0x16>
 8005460:	69ab      	ldr	r3, [r5, #24]
 8005462:	b913      	cbnz	r3, 800546a <__swsetup_r+0x16>
 8005464:	4628      	mov	r0, r5
 8005466:	f000 f953 	bl	8005710 <__sinit>
 800546a:	4b2e      	ldr	r3, [pc, #184]	; (8005524 <__swsetup_r+0xd0>)
 800546c:	429c      	cmp	r4, r3
 800546e:	d10f      	bne.n	8005490 <__swsetup_r+0x3c>
 8005470:	686c      	ldr	r4, [r5, #4]
 8005472:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005476:	b29a      	uxth	r2, r3
 8005478:	0715      	lsls	r5, r2, #28
 800547a:	d42c      	bmi.n	80054d6 <__swsetup_r+0x82>
 800547c:	06d0      	lsls	r0, r2, #27
 800547e:	d411      	bmi.n	80054a4 <__swsetup_r+0x50>
 8005480:	2209      	movs	r2, #9
 8005482:	6032      	str	r2, [r6, #0]
 8005484:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005488:	81a3      	strh	r3, [r4, #12]
 800548a:	f04f 30ff 	mov.w	r0, #4294967295
 800548e:	e03e      	b.n	800550e <__swsetup_r+0xba>
 8005490:	4b25      	ldr	r3, [pc, #148]	; (8005528 <__swsetup_r+0xd4>)
 8005492:	429c      	cmp	r4, r3
 8005494:	d101      	bne.n	800549a <__swsetup_r+0x46>
 8005496:	68ac      	ldr	r4, [r5, #8]
 8005498:	e7eb      	b.n	8005472 <__swsetup_r+0x1e>
 800549a:	4b24      	ldr	r3, [pc, #144]	; (800552c <__swsetup_r+0xd8>)
 800549c:	429c      	cmp	r4, r3
 800549e:	bf08      	it	eq
 80054a0:	68ec      	ldreq	r4, [r5, #12]
 80054a2:	e7e6      	b.n	8005472 <__swsetup_r+0x1e>
 80054a4:	0751      	lsls	r1, r2, #29
 80054a6:	d512      	bpl.n	80054ce <__swsetup_r+0x7a>
 80054a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80054aa:	b141      	cbz	r1, 80054be <__swsetup_r+0x6a>
 80054ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80054b0:	4299      	cmp	r1, r3
 80054b2:	d002      	beq.n	80054ba <__swsetup_r+0x66>
 80054b4:	4630      	mov	r0, r6
 80054b6:	f000 fa21 	bl	80058fc <_free_r>
 80054ba:	2300      	movs	r3, #0
 80054bc:	6363      	str	r3, [r4, #52]	; 0x34
 80054be:	89a3      	ldrh	r3, [r4, #12]
 80054c0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80054c4:	81a3      	strh	r3, [r4, #12]
 80054c6:	2300      	movs	r3, #0
 80054c8:	6063      	str	r3, [r4, #4]
 80054ca:	6923      	ldr	r3, [r4, #16]
 80054cc:	6023      	str	r3, [r4, #0]
 80054ce:	89a3      	ldrh	r3, [r4, #12]
 80054d0:	f043 0308 	orr.w	r3, r3, #8
 80054d4:	81a3      	strh	r3, [r4, #12]
 80054d6:	6923      	ldr	r3, [r4, #16]
 80054d8:	b94b      	cbnz	r3, 80054ee <__swsetup_r+0x9a>
 80054da:	89a3      	ldrh	r3, [r4, #12]
 80054dc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80054e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054e4:	d003      	beq.n	80054ee <__swsetup_r+0x9a>
 80054e6:	4621      	mov	r1, r4
 80054e8:	4630      	mov	r0, r6
 80054ea:	f000 f9bf 	bl	800586c <__smakebuf_r>
 80054ee:	89a2      	ldrh	r2, [r4, #12]
 80054f0:	f012 0301 	ands.w	r3, r2, #1
 80054f4:	d00c      	beq.n	8005510 <__swsetup_r+0xbc>
 80054f6:	2300      	movs	r3, #0
 80054f8:	60a3      	str	r3, [r4, #8]
 80054fa:	6963      	ldr	r3, [r4, #20]
 80054fc:	425b      	negs	r3, r3
 80054fe:	61a3      	str	r3, [r4, #24]
 8005500:	6923      	ldr	r3, [r4, #16]
 8005502:	b953      	cbnz	r3, 800551a <__swsetup_r+0xc6>
 8005504:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005508:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800550c:	d1ba      	bne.n	8005484 <__swsetup_r+0x30>
 800550e:	bd70      	pop	{r4, r5, r6, pc}
 8005510:	0792      	lsls	r2, r2, #30
 8005512:	bf58      	it	pl
 8005514:	6963      	ldrpl	r3, [r4, #20]
 8005516:	60a3      	str	r3, [r4, #8]
 8005518:	e7f2      	b.n	8005500 <__swsetup_r+0xac>
 800551a:	2000      	movs	r0, #0
 800551c:	e7f7      	b.n	800550e <__swsetup_r+0xba>
 800551e:	bf00      	nop
 8005520:	20000010 	.word	0x20000010
 8005524:	08006358 	.word	0x08006358
 8005528:	08006378 	.word	0x08006378
 800552c:	08006338 	.word	0x08006338

08005530 <__sflush_r>:
 8005530:	898a      	ldrh	r2, [r1, #12]
 8005532:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005536:	4605      	mov	r5, r0
 8005538:	0710      	lsls	r0, r2, #28
 800553a:	460c      	mov	r4, r1
 800553c:	d458      	bmi.n	80055f0 <__sflush_r+0xc0>
 800553e:	684b      	ldr	r3, [r1, #4]
 8005540:	2b00      	cmp	r3, #0
 8005542:	dc05      	bgt.n	8005550 <__sflush_r+0x20>
 8005544:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005546:	2b00      	cmp	r3, #0
 8005548:	dc02      	bgt.n	8005550 <__sflush_r+0x20>
 800554a:	2000      	movs	r0, #0
 800554c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005550:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005552:	2e00      	cmp	r6, #0
 8005554:	d0f9      	beq.n	800554a <__sflush_r+0x1a>
 8005556:	2300      	movs	r3, #0
 8005558:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800555c:	682f      	ldr	r7, [r5, #0]
 800555e:	6a21      	ldr	r1, [r4, #32]
 8005560:	602b      	str	r3, [r5, #0]
 8005562:	d032      	beq.n	80055ca <__sflush_r+0x9a>
 8005564:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005566:	89a3      	ldrh	r3, [r4, #12]
 8005568:	075a      	lsls	r2, r3, #29
 800556a:	d505      	bpl.n	8005578 <__sflush_r+0x48>
 800556c:	6863      	ldr	r3, [r4, #4]
 800556e:	1ac0      	subs	r0, r0, r3
 8005570:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005572:	b10b      	cbz	r3, 8005578 <__sflush_r+0x48>
 8005574:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005576:	1ac0      	subs	r0, r0, r3
 8005578:	2300      	movs	r3, #0
 800557a:	4602      	mov	r2, r0
 800557c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800557e:	6a21      	ldr	r1, [r4, #32]
 8005580:	4628      	mov	r0, r5
 8005582:	47b0      	blx	r6
 8005584:	1c43      	adds	r3, r0, #1
 8005586:	89a3      	ldrh	r3, [r4, #12]
 8005588:	d106      	bne.n	8005598 <__sflush_r+0x68>
 800558a:	6829      	ldr	r1, [r5, #0]
 800558c:	291d      	cmp	r1, #29
 800558e:	d848      	bhi.n	8005622 <__sflush_r+0xf2>
 8005590:	4a29      	ldr	r2, [pc, #164]	; (8005638 <__sflush_r+0x108>)
 8005592:	40ca      	lsrs	r2, r1
 8005594:	07d6      	lsls	r6, r2, #31
 8005596:	d544      	bpl.n	8005622 <__sflush_r+0xf2>
 8005598:	2200      	movs	r2, #0
 800559a:	6062      	str	r2, [r4, #4]
 800559c:	6922      	ldr	r2, [r4, #16]
 800559e:	04d9      	lsls	r1, r3, #19
 80055a0:	6022      	str	r2, [r4, #0]
 80055a2:	d504      	bpl.n	80055ae <__sflush_r+0x7e>
 80055a4:	1c42      	adds	r2, r0, #1
 80055a6:	d101      	bne.n	80055ac <__sflush_r+0x7c>
 80055a8:	682b      	ldr	r3, [r5, #0]
 80055aa:	b903      	cbnz	r3, 80055ae <__sflush_r+0x7e>
 80055ac:	6560      	str	r0, [r4, #84]	; 0x54
 80055ae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80055b0:	602f      	str	r7, [r5, #0]
 80055b2:	2900      	cmp	r1, #0
 80055b4:	d0c9      	beq.n	800554a <__sflush_r+0x1a>
 80055b6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80055ba:	4299      	cmp	r1, r3
 80055bc:	d002      	beq.n	80055c4 <__sflush_r+0x94>
 80055be:	4628      	mov	r0, r5
 80055c0:	f000 f99c 	bl	80058fc <_free_r>
 80055c4:	2000      	movs	r0, #0
 80055c6:	6360      	str	r0, [r4, #52]	; 0x34
 80055c8:	e7c0      	b.n	800554c <__sflush_r+0x1c>
 80055ca:	2301      	movs	r3, #1
 80055cc:	4628      	mov	r0, r5
 80055ce:	47b0      	blx	r6
 80055d0:	1c41      	adds	r1, r0, #1
 80055d2:	d1c8      	bne.n	8005566 <__sflush_r+0x36>
 80055d4:	682b      	ldr	r3, [r5, #0]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d0c5      	beq.n	8005566 <__sflush_r+0x36>
 80055da:	2b1d      	cmp	r3, #29
 80055dc:	d001      	beq.n	80055e2 <__sflush_r+0xb2>
 80055de:	2b16      	cmp	r3, #22
 80055e0:	d101      	bne.n	80055e6 <__sflush_r+0xb6>
 80055e2:	602f      	str	r7, [r5, #0]
 80055e4:	e7b1      	b.n	800554a <__sflush_r+0x1a>
 80055e6:	89a3      	ldrh	r3, [r4, #12]
 80055e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80055ec:	81a3      	strh	r3, [r4, #12]
 80055ee:	e7ad      	b.n	800554c <__sflush_r+0x1c>
 80055f0:	690f      	ldr	r7, [r1, #16]
 80055f2:	2f00      	cmp	r7, #0
 80055f4:	d0a9      	beq.n	800554a <__sflush_r+0x1a>
 80055f6:	0793      	lsls	r3, r2, #30
 80055f8:	bf18      	it	ne
 80055fa:	2300      	movne	r3, #0
 80055fc:	680e      	ldr	r6, [r1, #0]
 80055fe:	bf08      	it	eq
 8005600:	694b      	ldreq	r3, [r1, #20]
 8005602:	eba6 0807 	sub.w	r8, r6, r7
 8005606:	600f      	str	r7, [r1, #0]
 8005608:	608b      	str	r3, [r1, #8]
 800560a:	f1b8 0f00 	cmp.w	r8, #0
 800560e:	dd9c      	ble.n	800554a <__sflush_r+0x1a>
 8005610:	4643      	mov	r3, r8
 8005612:	463a      	mov	r2, r7
 8005614:	6a21      	ldr	r1, [r4, #32]
 8005616:	4628      	mov	r0, r5
 8005618:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800561a:	47b0      	blx	r6
 800561c:	2800      	cmp	r0, #0
 800561e:	dc06      	bgt.n	800562e <__sflush_r+0xfe>
 8005620:	89a3      	ldrh	r3, [r4, #12]
 8005622:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005626:	81a3      	strh	r3, [r4, #12]
 8005628:	f04f 30ff 	mov.w	r0, #4294967295
 800562c:	e78e      	b.n	800554c <__sflush_r+0x1c>
 800562e:	4407      	add	r7, r0
 8005630:	eba8 0800 	sub.w	r8, r8, r0
 8005634:	e7e9      	b.n	800560a <__sflush_r+0xda>
 8005636:	bf00      	nop
 8005638:	20400001 	.word	0x20400001

0800563c <_fflush_r>:
 800563c:	b538      	push	{r3, r4, r5, lr}
 800563e:	690b      	ldr	r3, [r1, #16]
 8005640:	4605      	mov	r5, r0
 8005642:	460c      	mov	r4, r1
 8005644:	b1db      	cbz	r3, 800567e <_fflush_r+0x42>
 8005646:	b118      	cbz	r0, 8005650 <_fflush_r+0x14>
 8005648:	6983      	ldr	r3, [r0, #24]
 800564a:	b90b      	cbnz	r3, 8005650 <_fflush_r+0x14>
 800564c:	f000 f860 	bl	8005710 <__sinit>
 8005650:	4b0c      	ldr	r3, [pc, #48]	; (8005684 <_fflush_r+0x48>)
 8005652:	429c      	cmp	r4, r3
 8005654:	d109      	bne.n	800566a <_fflush_r+0x2e>
 8005656:	686c      	ldr	r4, [r5, #4]
 8005658:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800565c:	b17b      	cbz	r3, 800567e <_fflush_r+0x42>
 800565e:	4621      	mov	r1, r4
 8005660:	4628      	mov	r0, r5
 8005662:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005666:	f7ff bf63 	b.w	8005530 <__sflush_r>
 800566a:	4b07      	ldr	r3, [pc, #28]	; (8005688 <_fflush_r+0x4c>)
 800566c:	429c      	cmp	r4, r3
 800566e:	d101      	bne.n	8005674 <_fflush_r+0x38>
 8005670:	68ac      	ldr	r4, [r5, #8]
 8005672:	e7f1      	b.n	8005658 <_fflush_r+0x1c>
 8005674:	4b05      	ldr	r3, [pc, #20]	; (800568c <_fflush_r+0x50>)
 8005676:	429c      	cmp	r4, r3
 8005678:	bf08      	it	eq
 800567a:	68ec      	ldreq	r4, [r5, #12]
 800567c:	e7ec      	b.n	8005658 <_fflush_r+0x1c>
 800567e:	2000      	movs	r0, #0
 8005680:	bd38      	pop	{r3, r4, r5, pc}
 8005682:	bf00      	nop
 8005684:	08006358 	.word	0x08006358
 8005688:	08006378 	.word	0x08006378
 800568c:	08006338 	.word	0x08006338

08005690 <std>:
 8005690:	2300      	movs	r3, #0
 8005692:	b510      	push	{r4, lr}
 8005694:	4604      	mov	r4, r0
 8005696:	e9c0 3300 	strd	r3, r3, [r0]
 800569a:	6083      	str	r3, [r0, #8]
 800569c:	8181      	strh	r1, [r0, #12]
 800569e:	6643      	str	r3, [r0, #100]	; 0x64
 80056a0:	81c2      	strh	r2, [r0, #14]
 80056a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80056a6:	6183      	str	r3, [r0, #24]
 80056a8:	4619      	mov	r1, r3
 80056aa:	2208      	movs	r2, #8
 80056ac:	305c      	adds	r0, #92	; 0x5c
 80056ae:	f7ff fd4d 	bl	800514c <memset>
 80056b2:	4b05      	ldr	r3, [pc, #20]	; (80056c8 <std+0x38>)
 80056b4:	6224      	str	r4, [r4, #32]
 80056b6:	6263      	str	r3, [r4, #36]	; 0x24
 80056b8:	4b04      	ldr	r3, [pc, #16]	; (80056cc <std+0x3c>)
 80056ba:	62a3      	str	r3, [r4, #40]	; 0x28
 80056bc:	4b04      	ldr	r3, [pc, #16]	; (80056d0 <std+0x40>)
 80056be:	62e3      	str	r3, [r4, #44]	; 0x2c
 80056c0:	4b04      	ldr	r3, [pc, #16]	; (80056d4 <std+0x44>)
 80056c2:	6323      	str	r3, [r4, #48]	; 0x30
 80056c4:	bd10      	pop	{r4, pc}
 80056c6:	bf00      	nop
 80056c8:	08005ff5 	.word	0x08005ff5
 80056cc:	08006017 	.word	0x08006017
 80056d0:	0800604f 	.word	0x0800604f
 80056d4:	08006073 	.word	0x08006073

080056d8 <_cleanup_r>:
 80056d8:	4901      	ldr	r1, [pc, #4]	; (80056e0 <_cleanup_r+0x8>)
 80056da:	f000 b885 	b.w	80057e8 <_fwalk_reent>
 80056de:	bf00      	nop
 80056e0:	0800563d 	.word	0x0800563d

080056e4 <__sfmoreglue>:
 80056e4:	b570      	push	{r4, r5, r6, lr}
 80056e6:	2568      	movs	r5, #104	; 0x68
 80056e8:	1e4a      	subs	r2, r1, #1
 80056ea:	4355      	muls	r5, r2
 80056ec:	460e      	mov	r6, r1
 80056ee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80056f2:	f000 f94f 	bl	8005994 <_malloc_r>
 80056f6:	4604      	mov	r4, r0
 80056f8:	b140      	cbz	r0, 800570c <__sfmoreglue+0x28>
 80056fa:	2100      	movs	r1, #0
 80056fc:	e9c0 1600 	strd	r1, r6, [r0]
 8005700:	300c      	adds	r0, #12
 8005702:	60a0      	str	r0, [r4, #8]
 8005704:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005708:	f7ff fd20 	bl	800514c <memset>
 800570c:	4620      	mov	r0, r4
 800570e:	bd70      	pop	{r4, r5, r6, pc}

08005710 <__sinit>:
 8005710:	6983      	ldr	r3, [r0, #24]
 8005712:	b510      	push	{r4, lr}
 8005714:	4604      	mov	r4, r0
 8005716:	bb33      	cbnz	r3, 8005766 <__sinit+0x56>
 8005718:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800571c:	6503      	str	r3, [r0, #80]	; 0x50
 800571e:	4b12      	ldr	r3, [pc, #72]	; (8005768 <__sinit+0x58>)
 8005720:	4a12      	ldr	r2, [pc, #72]	; (800576c <__sinit+0x5c>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	6282      	str	r2, [r0, #40]	; 0x28
 8005726:	4298      	cmp	r0, r3
 8005728:	bf04      	itt	eq
 800572a:	2301      	moveq	r3, #1
 800572c:	6183      	streq	r3, [r0, #24]
 800572e:	f000 f81f 	bl	8005770 <__sfp>
 8005732:	6060      	str	r0, [r4, #4]
 8005734:	4620      	mov	r0, r4
 8005736:	f000 f81b 	bl	8005770 <__sfp>
 800573a:	60a0      	str	r0, [r4, #8]
 800573c:	4620      	mov	r0, r4
 800573e:	f000 f817 	bl	8005770 <__sfp>
 8005742:	2200      	movs	r2, #0
 8005744:	60e0      	str	r0, [r4, #12]
 8005746:	2104      	movs	r1, #4
 8005748:	6860      	ldr	r0, [r4, #4]
 800574a:	f7ff ffa1 	bl	8005690 <std>
 800574e:	2201      	movs	r2, #1
 8005750:	2109      	movs	r1, #9
 8005752:	68a0      	ldr	r0, [r4, #8]
 8005754:	f7ff ff9c 	bl	8005690 <std>
 8005758:	2202      	movs	r2, #2
 800575a:	2112      	movs	r1, #18
 800575c:	68e0      	ldr	r0, [r4, #12]
 800575e:	f7ff ff97 	bl	8005690 <std>
 8005762:	2301      	movs	r3, #1
 8005764:	61a3      	str	r3, [r4, #24]
 8005766:	bd10      	pop	{r4, pc}
 8005768:	08006334 	.word	0x08006334
 800576c:	080056d9 	.word	0x080056d9

08005770 <__sfp>:
 8005770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005772:	4b1b      	ldr	r3, [pc, #108]	; (80057e0 <__sfp+0x70>)
 8005774:	4607      	mov	r7, r0
 8005776:	681e      	ldr	r6, [r3, #0]
 8005778:	69b3      	ldr	r3, [r6, #24]
 800577a:	b913      	cbnz	r3, 8005782 <__sfp+0x12>
 800577c:	4630      	mov	r0, r6
 800577e:	f7ff ffc7 	bl	8005710 <__sinit>
 8005782:	3648      	adds	r6, #72	; 0x48
 8005784:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005788:	3b01      	subs	r3, #1
 800578a:	d503      	bpl.n	8005794 <__sfp+0x24>
 800578c:	6833      	ldr	r3, [r6, #0]
 800578e:	b133      	cbz	r3, 800579e <__sfp+0x2e>
 8005790:	6836      	ldr	r6, [r6, #0]
 8005792:	e7f7      	b.n	8005784 <__sfp+0x14>
 8005794:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005798:	b16d      	cbz	r5, 80057b6 <__sfp+0x46>
 800579a:	3468      	adds	r4, #104	; 0x68
 800579c:	e7f4      	b.n	8005788 <__sfp+0x18>
 800579e:	2104      	movs	r1, #4
 80057a0:	4638      	mov	r0, r7
 80057a2:	f7ff ff9f 	bl	80056e4 <__sfmoreglue>
 80057a6:	6030      	str	r0, [r6, #0]
 80057a8:	2800      	cmp	r0, #0
 80057aa:	d1f1      	bne.n	8005790 <__sfp+0x20>
 80057ac:	230c      	movs	r3, #12
 80057ae:	4604      	mov	r4, r0
 80057b0:	603b      	str	r3, [r7, #0]
 80057b2:	4620      	mov	r0, r4
 80057b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80057b6:	4b0b      	ldr	r3, [pc, #44]	; (80057e4 <__sfp+0x74>)
 80057b8:	6665      	str	r5, [r4, #100]	; 0x64
 80057ba:	e9c4 5500 	strd	r5, r5, [r4]
 80057be:	60a5      	str	r5, [r4, #8]
 80057c0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80057c4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80057c8:	2208      	movs	r2, #8
 80057ca:	4629      	mov	r1, r5
 80057cc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80057d0:	f7ff fcbc 	bl	800514c <memset>
 80057d4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80057d8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80057dc:	e7e9      	b.n	80057b2 <__sfp+0x42>
 80057de:	bf00      	nop
 80057e0:	08006334 	.word	0x08006334
 80057e4:	ffff0001 	.word	0xffff0001

080057e8 <_fwalk_reent>:
 80057e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80057ec:	4680      	mov	r8, r0
 80057ee:	4689      	mov	r9, r1
 80057f0:	2600      	movs	r6, #0
 80057f2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80057f6:	b914      	cbnz	r4, 80057fe <_fwalk_reent+0x16>
 80057f8:	4630      	mov	r0, r6
 80057fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80057fe:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8005802:	3f01      	subs	r7, #1
 8005804:	d501      	bpl.n	800580a <_fwalk_reent+0x22>
 8005806:	6824      	ldr	r4, [r4, #0]
 8005808:	e7f5      	b.n	80057f6 <_fwalk_reent+0xe>
 800580a:	89ab      	ldrh	r3, [r5, #12]
 800580c:	2b01      	cmp	r3, #1
 800580e:	d907      	bls.n	8005820 <_fwalk_reent+0x38>
 8005810:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005814:	3301      	adds	r3, #1
 8005816:	d003      	beq.n	8005820 <_fwalk_reent+0x38>
 8005818:	4629      	mov	r1, r5
 800581a:	4640      	mov	r0, r8
 800581c:	47c8      	blx	r9
 800581e:	4306      	orrs	r6, r0
 8005820:	3568      	adds	r5, #104	; 0x68
 8005822:	e7ee      	b.n	8005802 <_fwalk_reent+0x1a>

08005824 <__swhatbuf_r>:
 8005824:	b570      	push	{r4, r5, r6, lr}
 8005826:	460e      	mov	r6, r1
 8005828:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800582c:	b096      	sub	sp, #88	; 0x58
 800582e:	2900      	cmp	r1, #0
 8005830:	4614      	mov	r4, r2
 8005832:	461d      	mov	r5, r3
 8005834:	da07      	bge.n	8005846 <__swhatbuf_r+0x22>
 8005836:	2300      	movs	r3, #0
 8005838:	602b      	str	r3, [r5, #0]
 800583a:	89b3      	ldrh	r3, [r6, #12]
 800583c:	061a      	lsls	r2, r3, #24
 800583e:	d410      	bmi.n	8005862 <__swhatbuf_r+0x3e>
 8005840:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005844:	e00e      	b.n	8005864 <__swhatbuf_r+0x40>
 8005846:	466a      	mov	r2, sp
 8005848:	f000 fc3a 	bl	80060c0 <_fstat_r>
 800584c:	2800      	cmp	r0, #0
 800584e:	dbf2      	blt.n	8005836 <__swhatbuf_r+0x12>
 8005850:	9a01      	ldr	r2, [sp, #4]
 8005852:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005856:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800585a:	425a      	negs	r2, r3
 800585c:	415a      	adcs	r2, r3
 800585e:	602a      	str	r2, [r5, #0]
 8005860:	e7ee      	b.n	8005840 <__swhatbuf_r+0x1c>
 8005862:	2340      	movs	r3, #64	; 0x40
 8005864:	2000      	movs	r0, #0
 8005866:	6023      	str	r3, [r4, #0]
 8005868:	b016      	add	sp, #88	; 0x58
 800586a:	bd70      	pop	{r4, r5, r6, pc}

0800586c <__smakebuf_r>:
 800586c:	898b      	ldrh	r3, [r1, #12]
 800586e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005870:	079d      	lsls	r5, r3, #30
 8005872:	4606      	mov	r6, r0
 8005874:	460c      	mov	r4, r1
 8005876:	d507      	bpl.n	8005888 <__smakebuf_r+0x1c>
 8005878:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800587c:	6023      	str	r3, [r4, #0]
 800587e:	6123      	str	r3, [r4, #16]
 8005880:	2301      	movs	r3, #1
 8005882:	6163      	str	r3, [r4, #20]
 8005884:	b002      	add	sp, #8
 8005886:	bd70      	pop	{r4, r5, r6, pc}
 8005888:	ab01      	add	r3, sp, #4
 800588a:	466a      	mov	r2, sp
 800588c:	f7ff ffca 	bl	8005824 <__swhatbuf_r>
 8005890:	9900      	ldr	r1, [sp, #0]
 8005892:	4605      	mov	r5, r0
 8005894:	4630      	mov	r0, r6
 8005896:	f000 f87d 	bl	8005994 <_malloc_r>
 800589a:	b948      	cbnz	r0, 80058b0 <__smakebuf_r+0x44>
 800589c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80058a0:	059a      	lsls	r2, r3, #22
 80058a2:	d4ef      	bmi.n	8005884 <__smakebuf_r+0x18>
 80058a4:	f023 0303 	bic.w	r3, r3, #3
 80058a8:	f043 0302 	orr.w	r3, r3, #2
 80058ac:	81a3      	strh	r3, [r4, #12]
 80058ae:	e7e3      	b.n	8005878 <__smakebuf_r+0xc>
 80058b0:	4b0d      	ldr	r3, [pc, #52]	; (80058e8 <__smakebuf_r+0x7c>)
 80058b2:	62b3      	str	r3, [r6, #40]	; 0x28
 80058b4:	89a3      	ldrh	r3, [r4, #12]
 80058b6:	6020      	str	r0, [r4, #0]
 80058b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058bc:	81a3      	strh	r3, [r4, #12]
 80058be:	9b00      	ldr	r3, [sp, #0]
 80058c0:	6120      	str	r0, [r4, #16]
 80058c2:	6163      	str	r3, [r4, #20]
 80058c4:	9b01      	ldr	r3, [sp, #4]
 80058c6:	b15b      	cbz	r3, 80058e0 <__smakebuf_r+0x74>
 80058c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80058cc:	4630      	mov	r0, r6
 80058ce:	f000 fc09 	bl	80060e4 <_isatty_r>
 80058d2:	b128      	cbz	r0, 80058e0 <__smakebuf_r+0x74>
 80058d4:	89a3      	ldrh	r3, [r4, #12]
 80058d6:	f023 0303 	bic.w	r3, r3, #3
 80058da:	f043 0301 	orr.w	r3, r3, #1
 80058de:	81a3      	strh	r3, [r4, #12]
 80058e0:	89a3      	ldrh	r3, [r4, #12]
 80058e2:	431d      	orrs	r5, r3
 80058e4:	81a5      	strh	r5, [r4, #12]
 80058e6:	e7cd      	b.n	8005884 <__smakebuf_r+0x18>
 80058e8:	080056d9 	.word	0x080056d9

080058ec <malloc>:
 80058ec:	4b02      	ldr	r3, [pc, #8]	; (80058f8 <malloc+0xc>)
 80058ee:	4601      	mov	r1, r0
 80058f0:	6818      	ldr	r0, [r3, #0]
 80058f2:	f000 b84f 	b.w	8005994 <_malloc_r>
 80058f6:	bf00      	nop
 80058f8:	20000010 	.word	0x20000010

080058fc <_free_r>:
 80058fc:	b538      	push	{r3, r4, r5, lr}
 80058fe:	4605      	mov	r5, r0
 8005900:	2900      	cmp	r1, #0
 8005902:	d043      	beq.n	800598c <_free_r+0x90>
 8005904:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005908:	1f0c      	subs	r4, r1, #4
 800590a:	2b00      	cmp	r3, #0
 800590c:	bfb8      	it	lt
 800590e:	18e4      	addlt	r4, r4, r3
 8005910:	f000 fc18 	bl	8006144 <__malloc_lock>
 8005914:	4a1e      	ldr	r2, [pc, #120]	; (8005990 <_free_r+0x94>)
 8005916:	6813      	ldr	r3, [r2, #0]
 8005918:	4610      	mov	r0, r2
 800591a:	b933      	cbnz	r3, 800592a <_free_r+0x2e>
 800591c:	6063      	str	r3, [r4, #4]
 800591e:	6014      	str	r4, [r2, #0]
 8005920:	4628      	mov	r0, r5
 8005922:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005926:	f000 bc0e 	b.w	8006146 <__malloc_unlock>
 800592a:	42a3      	cmp	r3, r4
 800592c:	d90b      	bls.n	8005946 <_free_r+0x4a>
 800592e:	6821      	ldr	r1, [r4, #0]
 8005930:	1862      	adds	r2, r4, r1
 8005932:	4293      	cmp	r3, r2
 8005934:	bf01      	itttt	eq
 8005936:	681a      	ldreq	r2, [r3, #0]
 8005938:	685b      	ldreq	r3, [r3, #4]
 800593a:	1852      	addeq	r2, r2, r1
 800593c:	6022      	streq	r2, [r4, #0]
 800593e:	6063      	str	r3, [r4, #4]
 8005940:	6004      	str	r4, [r0, #0]
 8005942:	e7ed      	b.n	8005920 <_free_r+0x24>
 8005944:	4613      	mov	r3, r2
 8005946:	685a      	ldr	r2, [r3, #4]
 8005948:	b10a      	cbz	r2, 800594e <_free_r+0x52>
 800594a:	42a2      	cmp	r2, r4
 800594c:	d9fa      	bls.n	8005944 <_free_r+0x48>
 800594e:	6819      	ldr	r1, [r3, #0]
 8005950:	1858      	adds	r0, r3, r1
 8005952:	42a0      	cmp	r0, r4
 8005954:	d10b      	bne.n	800596e <_free_r+0x72>
 8005956:	6820      	ldr	r0, [r4, #0]
 8005958:	4401      	add	r1, r0
 800595a:	1858      	adds	r0, r3, r1
 800595c:	4282      	cmp	r2, r0
 800595e:	6019      	str	r1, [r3, #0]
 8005960:	d1de      	bne.n	8005920 <_free_r+0x24>
 8005962:	6810      	ldr	r0, [r2, #0]
 8005964:	6852      	ldr	r2, [r2, #4]
 8005966:	4401      	add	r1, r0
 8005968:	6019      	str	r1, [r3, #0]
 800596a:	605a      	str	r2, [r3, #4]
 800596c:	e7d8      	b.n	8005920 <_free_r+0x24>
 800596e:	d902      	bls.n	8005976 <_free_r+0x7a>
 8005970:	230c      	movs	r3, #12
 8005972:	602b      	str	r3, [r5, #0]
 8005974:	e7d4      	b.n	8005920 <_free_r+0x24>
 8005976:	6820      	ldr	r0, [r4, #0]
 8005978:	1821      	adds	r1, r4, r0
 800597a:	428a      	cmp	r2, r1
 800597c:	bf01      	itttt	eq
 800597e:	6811      	ldreq	r1, [r2, #0]
 8005980:	6852      	ldreq	r2, [r2, #4]
 8005982:	1809      	addeq	r1, r1, r0
 8005984:	6021      	streq	r1, [r4, #0]
 8005986:	6062      	str	r2, [r4, #4]
 8005988:	605c      	str	r4, [r3, #4]
 800598a:	e7c9      	b.n	8005920 <_free_r+0x24>
 800598c:	bd38      	pop	{r3, r4, r5, pc}
 800598e:	bf00      	nop
 8005990:	200000a8 	.word	0x200000a8

08005994 <_malloc_r>:
 8005994:	b570      	push	{r4, r5, r6, lr}
 8005996:	1ccd      	adds	r5, r1, #3
 8005998:	f025 0503 	bic.w	r5, r5, #3
 800599c:	3508      	adds	r5, #8
 800599e:	2d0c      	cmp	r5, #12
 80059a0:	bf38      	it	cc
 80059a2:	250c      	movcc	r5, #12
 80059a4:	2d00      	cmp	r5, #0
 80059a6:	4606      	mov	r6, r0
 80059a8:	db01      	blt.n	80059ae <_malloc_r+0x1a>
 80059aa:	42a9      	cmp	r1, r5
 80059ac:	d903      	bls.n	80059b6 <_malloc_r+0x22>
 80059ae:	230c      	movs	r3, #12
 80059b0:	6033      	str	r3, [r6, #0]
 80059b2:	2000      	movs	r0, #0
 80059b4:	bd70      	pop	{r4, r5, r6, pc}
 80059b6:	f000 fbc5 	bl	8006144 <__malloc_lock>
 80059ba:	4a21      	ldr	r2, [pc, #132]	; (8005a40 <_malloc_r+0xac>)
 80059bc:	6814      	ldr	r4, [r2, #0]
 80059be:	4621      	mov	r1, r4
 80059c0:	b991      	cbnz	r1, 80059e8 <_malloc_r+0x54>
 80059c2:	4c20      	ldr	r4, [pc, #128]	; (8005a44 <_malloc_r+0xb0>)
 80059c4:	6823      	ldr	r3, [r4, #0]
 80059c6:	b91b      	cbnz	r3, 80059d0 <_malloc_r+0x3c>
 80059c8:	4630      	mov	r0, r6
 80059ca:	f000 fb03 	bl	8005fd4 <_sbrk_r>
 80059ce:	6020      	str	r0, [r4, #0]
 80059d0:	4629      	mov	r1, r5
 80059d2:	4630      	mov	r0, r6
 80059d4:	f000 fafe 	bl	8005fd4 <_sbrk_r>
 80059d8:	1c43      	adds	r3, r0, #1
 80059da:	d124      	bne.n	8005a26 <_malloc_r+0x92>
 80059dc:	230c      	movs	r3, #12
 80059de:	4630      	mov	r0, r6
 80059e0:	6033      	str	r3, [r6, #0]
 80059e2:	f000 fbb0 	bl	8006146 <__malloc_unlock>
 80059e6:	e7e4      	b.n	80059b2 <_malloc_r+0x1e>
 80059e8:	680b      	ldr	r3, [r1, #0]
 80059ea:	1b5b      	subs	r3, r3, r5
 80059ec:	d418      	bmi.n	8005a20 <_malloc_r+0x8c>
 80059ee:	2b0b      	cmp	r3, #11
 80059f0:	d90f      	bls.n	8005a12 <_malloc_r+0x7e>
 80059f2:	600b      	str	r3, [r1, #0]
 80059f4:	18cc      	adds	r4, r1, r3
 80059f6:	50cd      	str	r5, [r1, r3]
 80059f8:	4630      	mov	r0, r6
 80059fa:	f000 fba4 	bl	8006146 <__malloc_unlock>
 80059fe:	f104 000b 	add.w	r0, r4, #11
 8005a02:	1d23      	adds	r3, r4, #4
 8005a04:	f020 0007 	bic.w	r0, r0, #7
 8005a08:	1ac3      	subs	r3, r0, r3
 8005a0a:	d0d3      	beq.n	80059b4 <_malloc_r+0x20>
 8005a0c:	425a      	negs	r2, r3
 8005a0e:	50e2      	str	r2, [r4, r3]
 8005a10:	e7d0      	b.n	80059b4 <_malloc_r+0x20>
 8005a12:	684b      	ldr	r3, [r1, #4]
 8005a14:	428c      	cmp	r4, r1
 8005a16:	bf16      	itet	ne
 8005a18:	6063      	strne	r3, [r4, #4]
 8005a1a:	6013      	streq	r3, [r2, #0]
 8005a1c:	460c      	movne	r4, r1
 8005a1e:	e7eb      	b.n	80059f8 <_malloc_r+0x64>
 8005a20:	460c      	mov	r4, r1
 8005a22:	6849      	ldr	r1, [r1, #4]
 8005a24:	e7cc      	b.n	80059c0 <_malloc_r+0x2c>
 8005a26:	1cc4      	adds	r4, r0, #3
 8005a28:	f024 0403 	bic.w	r4, r4, #3
 8005a2c:	42a0      	cmp	r0, r4
 8005a2e:	d005      	beq.n	8005a3c <_malloc_r+0xa8>
 8005a30:	1a21      	subs	r1, r4, r0
 8005a32:	4630      	mov	r0, r6
 8005a34:	f000 face 	bl	8005fd4 <_sbrk_r>
 8005a38:	3001      	adds	r0, #1
 8005a3a:	d0cf      	beq.n	80059dc <_malloc_r+0x48>
 8005a3c:	6025      	str	r5, [r4, #0]
 8005a3e:	e7db      	b.n	80059f8 <_malloc_r+0x64>
 8005a40:	200000a8 	.word	0x200000a8
 8005a44:	200000ac 	.word	0x200000ac

08005a48 <__sfputc_r>:
 8005a48:	6893      	ldr	r3, [r2, #8]
 8005a4a:	b410      	push	{r4}
 8005a4c:	3b01      	subs	r3, #1
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	6093      	str	r3, [r2, #8]
 8005a52:	da07      	bge.n	8005a64 <__sfputc_r+0x1c>
 8005a54:	6994      	ldr	r4, [r2, #24]
 8005a56:	42a3      	cmp	r3, r4
 8005a58:	db01      	blt.n	8005a5e <__sfputc_r+0x16>
 8005a5a:	290a      	cmp	r1, #10
 8005a5c:	d102      	bne.n	8005a64 <__sfputc_r+0x1c>
 8005a5e:	bc10      	pop	{r4}
 8005a60:	f7ff bca6 	b.w	80053b0 <__swbuf_r>
 8005a64:	6813      	ldr	r3, [r2, #0]
 8005a66:	1c58      	adds	r0, r3, #1
 8005a68:	6010      	str	r0, [r2, #0]
 8005a6a:	7019      	strb	r1, [r3, #0]
 8005a6c:	4608      	mov	r0, r1
 8005a6e:	bc10      	pop	{r4}
 8005a70:	4770      	bx	lr

08005a72 <__sfputs_r>:
 8005a72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a74:	4606      	mov	r6, r0
 8005a76:	460f      	mov	r7, r1
 8005a78:	4614      	mov	r4, r2
 8005a7a:	18d5      	adds	r5, r2, r3
 8005a7c:	42ac      	cmp	r4, r5
 8005a7e:	d101      	bne.n	8005a84 <__sfputs_r+0x12>
 8005a80:	2000      	movs	r0, #0
 8005a82:	e007      	b.n	8005a94 <__sfputs_r+0x22>
 8005a84:	463a      	mov	r2, r7
 8005a86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a8a:	4630      	mov	r0, r6
 8005a8c:	f7ff ffdc 	bl	8005a48 <__sfputc_r>
 8005a90:	1c43      	adds	r3, r0, #1
 8005a92:	d1f3      	bne.n	8005a7c <__sfputs_r+0xa>
 8005a94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005a98 <_vfiprintf_r>:
 8005a98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a9c:	460c      	mov	r4, r1
 8005a9e:	b09d      	sub	sp, #116	; 0x74
 8005aa0:	4617      	mov	r7, r2
 8005aa2:	461d      	mov	r5, r3
 8005aa4:	4606      	mov	r6, r0
 8005aa6:	b118      	cbz	r0, 8005ab0 <_vfiprintf_r+0x18>
 8005aa8:	6983      	ldr	r3, [r0, #24]
 8005aaa:	b90b      	cbnz	r3, 8005ab0 <_vfiprintf_r+0x18>
 8005aac:	f7ff fe30 	bl	8005710 <__sinit>
 8005ab0:	4b7c      	ldr	r3, [pc, #496]	; (8005ca4 <_vfiprintf_r+0x20c>)
 8005ab2:	429c      	cmp	r4, r3
 8005ab4:	d158      	bne.n	8005b68 <_vfiprintf_r+0xd0>
 8005ab6:	6874      	ldr	r4, [r6, #4]
 8005ab8:	89a3      	ldrh	r3, [r4, #12]
 8005aba:	0718      	lsls	r0, r3, #28
 8005abc:	d55e      	bpl.n	8005b7c <_vfiprintf_r+0xe4>
 8005abe:	6923      	ldr	r3, [r4, #16]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d05b      	beq.n	8005b7c <_vfiprintf_r+0xe4>
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	9309      	str	r3, [sp, #36]	; 0x24
 8005ac8:	2320      	movs	r3, #32
 8005aca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005ace:	2330      	movs	r3, #48	; 0x30
 8005ad0:	f04f 0b01 	mov.w	fp, #1
 8005ad4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005ad8:	9503      	str	r5, [sp, #12]
 8005ada:	46b8      	mov	r8, r7
 8005adc:	4645      	mov	r5, r8
 8005ade:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005ae2:	b10b      	cbz	r3, 8005ae8 <_vfiprintf_r+0x50>
 8005ae4:	2b25      	cmp	r3, #37	; 0x25
 8005ae6:	d154      	bne.n	8005b92 <_vfiprintf_r+0xfa>
 8005ae8:	ebb8 0a07 	subs.w	sl, r8, r7
 8005aec:	d00b      	beq.n	8005b06 <_vfiprintf_r+0x6e>
 8005aee:	4653      	mov	r3, sl
 8005af0:	463a      	mov	r2, r7
 8005af2:	4621      	mov	r1, r4
 8005af4:	4630      	mov	r0, r6
 8005af6:	f7ff ffbc 	bl	8005a72 <__sfputs_r>
 8005afa:	3001      	adds	r0, #1
 8005afc:	f000 80c2 	beq.w	8005c84 <_vfiprintf_r+0x1ec>
 8005b00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b02:	4453      	add	r3, sl
 8005b04:	9309      	str	r3, [sp, #36]	; 0x24
 8005b06:	f898 3000 	ldrb.w	r3, [r8]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	f000 80ba 	beq.w	8005c84 <_vfiprintf_r+0x1ec>
 8005b10:	2300      	movs	r3, #0
 8005b12:	f04f 32ff 	mov.w	r2, #4294967295
 8005b16:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005b1a:	9304      	str	r3, [sp, #16]
 8005b1c:	9307      	str	r3, [sp, #28]
 8005b1e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005b22:	931a      	str	r3, [sp, #104]	; 0x68
 8005b24:	46a8      	mov	r8, r5
 8005b26:	2205      	movs	r2, #5
 8005b28:	f818 1b01 	ldrb.w	r1, [r8], #1
 8005b2c:	485e      	ldr	r0, [pc, #376]	; (8005ca8 <_vfiprintf_r+0x210>)
 8005b2e:	f000 fafb 	bl	8006128 <memchr>
 8005b32:	9b04      	ldr	r3, [sp, #16]
 8005b34:	bb78      	cbnz	r0, 8005b96 <_vfiprintf_r+0xfe>
 8005b36:	06d9      	lsls	r1, r3, #27
 8005b38:	bf44      	itt	mi
 8005b3a:	2220      	movmi	r2, #32
 8005b3c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005b40:	071a      	lsls	r2, r3, #28
 8005b42:	bf44      	itt	mi
 8005b44:	222b      	movmi	r2, #43	; 0x2b
 8005b46:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005b4a:	782a      	ldrb	r2, [r5, #0]
 8005b4c:	2a2a      	cmp	r2, #42	; 0x2a
 8005b4e:	d02a      	beq.n	8005ba6 <_vfiprintf_r+0x10e>
 8005b50:	46a8      	mov	r8, r5
 8005b52:	2000      	movs	r0, #0
 8005b54:	250a      	movs	r5, #10
 8005b56:	9a07      	ldr	r2, [sp, #28]
 8005b58:	4641      	mov	r1, r8
 8005b5a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005b5e:	3b30      	subs	r3, #48	; 0x30
 8005b60:	2b09      	cmp	r3, #9
 8005b62:	d969      	bls.n	8005c38 <_vfiprintf_r+0x1a0>
 8005b64:	b360      	cbz	r0, 8005bc0 <_vfiprintf_r+0x128>
 8005b66:	e024      	b.n	8005bb2 <_vfiprintf_r+0x11a>
 8005b68:	4b50      	ldr	r3, [pc, #320]	; (8005cac <_vfiprintf_r+0x214>)
 8005b6a:	429c      	cmp	r4, r3
 8005b6c:	d101      	bne.n	8005b72 <_vfiprintf_r+0xda>
 8005b6e:	68b4      	ldr	r4, [r6, #8]
 8005b70:	e7a2      	b.n	8005ab8 <_vfiprintf_r+0x20>
 8005b72:	4b4f      	ldr	r3, [pc, #316]	; (8005cb0 <_vfiprintf_r+0x218>)
 8005b74:	429c      	cmp	r4, r3
 8005b76:	bf08      	it	eq
 8005b78:	68f4      	ldreq	r4, [r6, #12]
 8005b7a:	e79d      	b.n	8005ab8 <_vfiprintf_r+0x20>
 8005b7c:	4621      	mov	r1, r4
 8005b7e:	4630      	mov	r0, r6
 8005b80:	f7ff fc68 	bl	8005454 <__swsetup_r>
 8005b84:	2800      	cmp	r0, #0
 8005b86:	d09d      	beq.n	8005ac4 <_vfiprintf_r+0x2c>
 8005b88:	f04f 30ff 	mov.w	r0, #4294967295
 8005b8c:	b01d      	add	sp, #116	; 0x74
 8005b8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b92:	46a8      	mov	r8, r5
 8005b94:	e7a2      	b.n	8005adc <_vfiprintf_r+0x44>
 8005b96:	4a44      	ldr	r2, [pc, #272]	; (8005ca8 <_vfiprintf_r+0x210>)
 8005b98:	4645      	mov	r5, r8
 8005b9a:	1a80      	subs	r0, r0, r2
 8005b9c:	fa0b f000 	lsl.w	r0, fp, r0
 8005ba0:	4318      	orrs	r0, r3
 8005ba2:	9004      	str	r0, [sp, #16]
 8005ba4:	e7be      	b.n	8005b24 <_vfiprintf_r+0x8c>
 8005ba6:	9a03      	ldr	r2, [sp, #12]
 8005ba8:	1d11      	adds	r1, r2, #4
 8005baa:	6812      	ldr	r2, [r2, #0]
 8005bac:	9103      	str	r1, [sp, #12]
 8005bae:	2a00      	cmp	r2, #0
 8005bb0:	db01      	blt.n	8005bb6 <_vfiprintf_r+0x11e>
 8005bb2:	9207      	str	r2, [sp, #28]
 8005bb4:	e004      	b.n	8005bc0 <_vfiprintf_r+0x128>
 8005bb6:	4252      	negs	r2, r2
 8005bb8:	f043 0302 	orr.w	r3, r3, #2
 8005bbc:	9207      	str	r2, [sp, #28]
 8005bbe:	9304      	str	r3, [sp, #16]
 8005bc0:	f898 3000 	ldrb.w	r3, [r8]
 8005bc4:	2b2e      	cmp	r3, #46	; 0x2e
 8005bc6:	d10e      	bne.n	8005be6 <_vfiprintf_r+0x14e>
 8005bc8:	f898 3001 	ldrb.w	r3, [r8, #1]
 8005bcc:	2b2a      	cmp	r3, #42	; 0x2a
 8005bce:	d138      	bne.n	8005c42 <_vfiprintf_r+0x1aa>
 8005bd0:	9b03      	ldr	r3, [sp, #12]
 8005bd2:	f108 0802 	add.w	r8, r8, #2
 8005bd6:	1d1a      	adds	r2, r3, #4
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	9203      	str	r2, [sp, #12]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	bfb8      	it	lt
 8005be0:	f04f 33ff 	movlt.w	r3, #4294967295
 8005be4:	9305      	str	r3, [sp, #20]
 8005be6:	4d33      	ldr	r5, [pc, #204]	; (8005cb4 <_vfiprintf_r+0x21c>)
 8005be8:	2203      	movs	r2, #3
 8005bea:	f898 1000 	ldrb.w	r1, [r8]
 8005bee:	4628      	mov	r0, r5
 8005bf0:	f000 fa9a 	bl	8006128 <memchr>
 8005bf4:	b140      	cbz	r0, 8005c08 <_vfiprintf_r+0x170>
 8005bf6:	2340      	movs	r3, #64	; 0x40
 8005bf8:	1b40      	subs	r0, r0, r5
 8005bfa:	fa03 f000 	lsl.w	r0, r3, r0
 8005bfe:	9b04      	ldr	r3, [sp, #16]
 8005c00:	f108 0801 	add.w	r8, r8, #1
 8005c04:	4303      	orrs	r3, r0
 8005c06:	9304      	str	r3, [sp, #16]
 8005c08:	f898 1000 	ldrb.w	r1, [r8]
 8005c0c:	2206      	movs	r2, #6
 8005c0e:	482a      	ldr	r0, [pc, #168]	; (8005cb8 <_vfiprintf_r+0x220>)
 8005c10:	f108 0701 	add.w	r7, r8, #1
 8005c14:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005c18:	f000 fa86 	bl	8006128 <memchr>
 8005c1c:	2800      	cmp	r0, #0
 8005c1e:	d037      	beq.n	8005c90 <_vfiprintf_r+0x1f8>
 8005c20:	4b26      	ldr	r3, [pc, #152]	; (8005cbc <_vfiprintf_r+0x224>)
 8005c22:	bb1b      	cbnz	r3, 8005c6c <_vfiprintf_r+0x1d4>
 8005c24:	9b03      	ldr	r3, [sp, #12]
 8005c26:	3307      	adds	r3, #7
 8005c28:	f023 0307 	bic.w	r3, r3, #7
 8005c2c:	3308      	adds	r3, #8
 8005c2e:	9303      	str	r3, [sp, #12]
 8005c30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c32:	444b      	add	r3, r9
 8005c34:	9309      	str	r3, [sp, #36]	; 0x24
 8005c36:	e750      	b.n	8005ada <_vfiprintf_r+0x42>
 8005c38:	fb05 3202 	mla	r2, r5, r2, r3
 8005c3c:	2001      	movs	r0, #1
 8005c3e:	4688      	mov	r8, r1
 8005c40:	e78a      	b.n	8005b58 <_vfiprintf_r+0xc0>
 8005c42:	2300      	movs	r3, #0
 8005c44:	250a      	movs	r5, #10
 8005c46:	4619      	mov	r1, r3
 8005c48:	f108 0801 	add.w	r8, r8, #1
 8005c4c:	9305      	str	r3, [sp, #20]
 8005c4e:	4640      	mov	r0, r8
 8005c50:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005c54:	3a30      	subs	r2, #48	; 0x30
 8005c56:	2a09      	cmp	r2, #9
 8005c58:	d903      	bls.n	8005c62 <_vfiprintf_r+0x1ca>
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d0c3      	beq.n	8005be6 <_vfiprintf_r+0x14e>
 8005c5e:	9105      	str	r1, [sp, #20]
 8005c60:	e7c1      	b.n	8005be6 <_vfiprintf_r+0x14e>
 8005c62:	fb05 2101 	mla	r1, r5, r1, r2
 8005c66:	2301      	movs	r3, #1
 8005c68:	4680      	mov	r8, r0
 8005c6a:	e7f0      	b.n	8005c4e <_vfiprintf_r+0x1b6>
 8005c6c:	ab03      	add	r3, sp, #12
 8005c6e:	9300      	str	r3, [sp, #0]
 8005c70:	4622      	mov	r2, r4
 8005c72:	4b13      	ldr	r3, [pc, #76]	; (8005cc0 <_vfiprintf_r+0x228>)
 8005c74:	a904      	add	r1, sp, #16
 8005c76:	4630      	mov	r0, r6
 8005c78:	f3af 8000 	nop.w
 8005c7c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005c80:	4681      	mov	r9, r0
 8005c82:	d1d5      	bne.n	8005c30 <_vfiprintf_r+0x198>
 8005c84:	89a3      	ldrh	r3, [r4, #12]
 8005c86:	065b      	lsls	r3, r3, #25
 8005c88:	f53f af7e 	bmi.w	8005b88 <_vfiprintf_r+0xf0>
 8005c8c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005c8e:	e77d      	b.n	8005b8c <_vfiprintf_r+0xf4>
 8005c90:	ab03      	add	r3, sp, #12
 8005c92:	9300      	str	r3, [sp, #0]
 8005c94:	4622      	mov	r2, r4
 8005c96:	4b0a      	ldr	r3, [pc, #40]	; (8005cc0 <_vfiprintf_r+0x228>)
 8005c98:	a904      	add	r1, sp, #16
 8005c9a:	4630      	mov	r0, r6
 8005c9c:	f000 f888 	bl	8005db0 <_printf_i>
 8005ca0:	e7ec      	b.n	8005c7c <_vfiprintf_r+0x1e4>
 8005ca2:	bf00      	nop
 8005ca4:	08006358 	.word	0x08006358
 8005ca8:	08006398 	.word	0x08006398
 8005cac:	08006378 	.word	0x08006378
 8005cb0:	08006338 	.word	0x08006338
 8005cb4:	0800639e 	.word	0x0800639e
 8005cb8:	080063a2 	.word	0x080063a2
 8005cbc:	00000000 	.word	0x00000000
 8005cc0:	08005a73 	.word	0x08005a73

08005cc4 <_printf_common>:
 8005cc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005cc8:	4691      	mov	r9, r2
 8005cca:	461f      	mov	r7, r3
 8005ccc:	688a      	ldr	r2, [r1, #8]
 8005cce:	690b      	ldr	r3, [r1, #16]
 8005cd0:	4606      	mov	r6, r0
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	bfb8      	it	lt
 8005cd6:	4613      	movlt	r3, r2
 8005cd8:	f8c9 3000 	str.w	r3, [r9]
 8005cdc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005ce0:	460c      	mov	r4, r1
 8005ce2:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005ce6:	b112      	cbz	r2, 8005cee <_printf_common+0x2a>
 8005ce8:	3301      	adds	r3, #1
 8005cea:	f8c9 3000 	str.w	r3, [r9]
 8005cee:	6823      	ldr	r3, [r4, #0]
 8005cf0:	0699      	lsls	r1, r3, #26
 8005cf2:	bf42      	ittt	mi
 8005cf4:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005cf8:	3302      	addmi	r3, #2
 8005cfa:	f8c9 3000 	strmi.w	r3, [r9]
 8005cfe:	6825      	ldr	r5, [r4, #0]
 8005d00:	f015 0506 	ands.w	r5, r5, #6
 8005d04:	d107      	bne.n	8005d16 <_printf_common+0x52>
 8005d06:	f104 0a19 	add.w	sl, r4, #25
 8005d0a:	68e3      	ldr	r3, [r4, #12]
 8005d0c:	f8d9 2000 	ldr.w	r2, [r9]
 8005d10:	1a9b      	subs	r3, r3, r2
 8005d12:	42ab      	cmp	r3, r5
 8005d14:	dc29      	bgt.n	8005d6a <_printf_common+0xa6>
 8005d16:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005d1a:	6822      	ldr	r2, [r4, #0]
 8005d1c:	3300      	adds	r3, #0
 8005d1e:	bf18      	it	ne
 8005d20:	2301      	movne	r3, #1
 8005d22:	0692      	lsls	r2, r2, #26
 8005d24:	d42e      	bmi.n	8005d84 <_printf_common+0xc0>
 8005d26:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005d2a:	4639      	mov	r1, r7
 8005d2c:	4630      	mov	r0, r6
 8005d2e:	47c0      	blx	r8
 8005d30:	3001      	adds	r0, #1
 8005d32:	d021      	beq.n	8005d78 <_printf_common+0xb4>
 8005d34:	6823      	ldr	r3, [r4, #0]
 8005d36:	68e5      	ldr	r5, [r4, #12]
 8005d38:	f003 0306 	and.w	r3, r3, #6
 8005d3c:	2b04      	cmp	r3, #4
 8005d3e:	bf18      	it	ne
 8005d40:	2500      	movne	r5, #0
 8005d42:	f8d9 2000 	ldr.w	r2, [r9]
 8005d46:	f04f 0900 	mov.w	r9, #0
 8005d4a:	bf08      	it	eq
 8005d4c:	1aad      	subeq	r5, r5, r2
 8005d4e:	68a3      	ldr	r3, [r4, #8]
 8005d50:	6922      	ldr	r2, [r4, #16]
 8005d52:	bf08      	it	eq
 8005d54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	bfc4      	itt	gt
 8005d5c:	1a9b      	subgt	r3, r3, r2
 8005d5e:	18ed      	addgt	r5, r5, r3
 8005d60:	341a      	adds	r4, #26
 8005d62:	454d      	cmp	r5, r9
 8005d64:	d11a      	bne.n	8005d9c <_printf_common+0xd8>
 8005d66:	2000      	movs	r0, #0
 8005d68:	e008      	b.n	8005d7c <_printf_common+0xb8>
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	4652      	mov	r2, sl
 8005d6e:	4639      	mov	r1, r7
 8005d70:	4630      	mov	r0, r6
 8005d72:	47c0      	blx	r8
 8005d74:	3001      	adds	r0, #1
 8005d76:	d103      	bne.n	8005d80 <_printf_common+0xbc>
 8005d78:	f04f 30ff 	mov.w	r0, #4294967295
 8005d7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d80:	3501      	adds	r5, #1
 8005d82:	e7c2      	b.n	8005d0a <_printf_common+0x46>
 8005d84:	2030      	movs	r0, #48	; 0x30
 8005d86:	18e1      	adds	r1, r4, r3
 8005d88:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005d8c:	1c5a      	adds	r2, r3, #1
 8005d8e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005d92:	4422      	add	r2, r4
 8005d94:	3302      	adds	r3, #2
 8005d96:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005d9a:	e7c4      	b.n	8005d26 <_printf_common+0x62>
 8005d9c:	2301      	movs	r3, #1
 8005d9e:	4622      	mov	r2, r4
 8005da0:	4639      	mov	r1, r7
 8005da2:	4630      	mov	r0, r6
 8005da4:	47c0      	blx	r8
 8005da6:	3001      	adds	r0, #1
 8005da8:	d0e6      	beq.n	8005d78 <_printf_common+0xb4>
 8005daa:	f109 0901 	add.w	r9, r9, #1
 8005dae:	e7d8      	b.n	8005d62 <_printf_common+0x9e>

08005db0 <_printf_i>:
 8005db0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005db4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005db8:	460c      	mov	r4, r1
 8005dba:	7e09      	ldrb	r1, [r1, #24]
 8005dbc:	b085      	sub	sp, #20
 8005dbe:	296e      	cmp	r1, #110	; 0x6e
 8005dc0:	4617      	mov	r7, r2
 8005dc2:	4606      	mov	r6, r0
 8005dc4:	4698      	mov	r8, r3
 8005dc6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005dc8:	f000 80b3 	beq.w	8005f32 <_printf_i+0x182>
 8005dcc:	d822      	bhi.n	8005e14 <_printf_i+0x64>
 8005dce:	2963      	cmp	r1, #99	; 0x63
 8005dd0:	d036      	beq.n	8005e40 <_printf_i+0x90>
 8005dd2:	d80a      	bhi.n	8005dea <_printf_i+0x3a>
 8005dd4:	2900      	cmp	r1, #0
 8005dd6:	f000 80b9 	beq.w	8005f4c <_printf_i+0x19c>
 8005dda:	2958      	cmp	r1, #88	; 0x58
 8005ddc:	f000 8083 	beq.w	8005ee6 <_printf_i+0x136>
 8005de0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005de4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005de8:	e032      	b.n	8005e50 <_printf_i+0xa0>
 8005dea:	2964      	cmp	r1, #100	; 0x64
 8005dec:	d001      	beq.n	8005df2 <_printf_i+0x42>
 8005dee:	2969      	cmp	r1, #105	; 0x69
 8005df0:	d1f6      	bne.n	8005de0 <_printf_i+0x30>
 8005df2:	6820      	ldr	r0, [r4, #0]
 8005df4:	6813      	ldr	r3, [r2, #0]
 8005df6:	0605      	lsls	r5, r0, #24
 8005df8:	f103 0104 	add.w	r1, r3, #4
 8005dfc:	d52a      	bpl.n	8005e54 <_printf_i+0xa4>
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	6011      	str	r1, [r2, #0]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	da03      	bge.n	8005e0e <_printf_i+0x5e>
 8005e06:	222d      	movs	r2, #45	; 0x2d
 8005e08:	425b      	negs	r3, r3
 8005e0a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005e0e:	486f      	ldr	r0, [pc, #444]	; (8005fcc <_printf_i+0x21c>)
 8005e10:	220a      	movs	r2, #10
 8005e12:	e039      	b.n	8005e88 <_printf_i+0xd8>
 8005e14:	2973      	cmp	r1, #115	; 0x73
 8005e16:	f000 809d 	beq.w	8005f54 <_printf_i+0x1a4>
 8005e1a:	d808      	bhi.n	8005e2e <_printf_i+0x7e>
 8005e1c:	296f      	cmp	r1, #111	; 0x6f
 8005e1e:	d020      	beq.n	8005e62 <_printf_i+0xb2>
 8005e20:	2970      	cmp	r1, #112	; 0x70
 8005e22:	d1dd      	bne.n	8005de0 <_printf_i+0x30>
 8005e24:	6823      	ldr	r3, [r4, #0]
 8005e26:	f043 0320 	orr.w	r3, r3, #32
 8005e2a:	6023      	str	r3, [r4, #0]
 8005e2c:	e003      	b.n	8005e36 <_printf_i+0x86>
 8005e2e:	2975      	cmp	r1, #117	; 0x75
 8005e30:	d017      	beq.n	8005e62 <_printf_i+0xb2>
 8005e32:	2978      	cmp	r1, #120	; 0x78
 8005e34:	d1d4      	bne.n	8005de0 <_printf_i+0x30>
 8005e36:	2378      	movs	r3, #120	; 0x78
 8005e38:	4865      	ldr	r0, [pc, #404]	; (8005fd0 <_printf_i+0x220>)
 8005e3a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005e3e:	e055      	b.n	8005eec <_printf_i+0x13c>
 8005e40:	6813      	ldr	r3, [r2, #0]
 8005e42:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005e46:	1d19      	adds	r1, r3, #4
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	6011      	str	r1, [r2, #0]
 8005e4c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005e50:	2301      	movs	r3, #1
 8005e52:	e08c      	b.n	8005f6e <_printf_i+0x1be>
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005e5a:	6011      	str	r1, [r2, #0]
 8005e5c:	bf18      	it	ne
 8005e5e:	b21b      	sxthne	r3, r3
 8005e60:	e7cf      	b.n	8005e02 <_printf_i+0x52>
 8005e62:	6813      	ldr	r3, [r2, #0]
 8005e64:	6825      	ldr	r5, [r4, #0]
 8005e66:	1d18      	adds	r0, r3, #4
 8005e68:	6010      	str	r0, [r2, #0]
 8005e6a:	0628      	lsls	r0, r5, #24
 8005e6c:	d501      	bpl.n	8005e72 <_printf_i+0xc2>
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	e002      	b.n	8005e78 <_printf_i+0xc8>
 8005e72:	0668      	lsls	r0, r5, #25
 8005e74:	d5fb      	bpl.n	8005e6e <_printf_i+0xbe>
 8005e76:	881b      	ldrh	r3, [r3, #0]
 8005e78:	296f      	cmp	r1, #111	; 0x6f
 8005e7a:	bf14      	ite	ne
 8005e7c:	220a      	movne	r2, #10
 8005e7e:	2208      	moveq	r2, #8
 8005e80:	4852      	ldr	r0, [pc, #328]	; (8005fcc <_printf_i+0x21c>)
 8005e82:	2100      	movs	r1, #0
 8005e84:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005e88:	6865      	ldr	r5, [r4, #4]
 8005e8a:	2d00      	cmp	r5, #0
 8005e8c:	60a5      	str	r5, [r4, #8]
 8005e8e:	f2c0 8095 	blt.w	8005fbc <_printf_i+0x20c>
 8005e92:	6821      	ldr	r1, [r4, #0]
 8005e94:	f021 0104 	bic.w	r1, r1, #4
 8005e98:	6021      	str	r1, [r4, #0]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d13d      	bne.n	8005f1a <_printf_i+0x16a>
 8005e9e:	2d00      	cmp	r5, #0
 8005ea0:	f040 808e 	bne.w	8005fc0 <_printf_i+0x210>
 8005ea4:	4665      	mov	r5, ip
 8005ea6:	2a08      	cmp	r2, #8
 8005ea8:	d10b      	bne.n	8005ec2 <_printf_i+0x112>
 8005eaa:	6823      	ldr	r3, [r4, #0]
 8005eac:	07db      	lsls	r3, r3, #31
 8005eae:	d508      	bpl.n	8005ec2 <_printf_i+0x112>
 8005eb0:	6923      	ldr	r3, [r4, #16]
 8005eb2:	6862      	ldr	r2, [r4, #4]
 8005eb4:	429a      	cmp	r2, r3
 8005eb6:	bfde      	ittt	le
 8005eb8:	2330      	movle	r3, #48	; 0x30
 8005eba:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005ebe:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005ec2:	ebac 0305 	sub.w	r3, ip, r5
 8005ec6:	6123      	str	r3, [r4, #16]
 8005ec8:	f8cd 8000 	str.w	r8, [sp]
 8005ecc:	463b      	mov	r3, r7
 8005ece:	aa03      	add	r2, sp, #12
 8005ed0:	4621      	mov	r1, r4
 8005ed2:	4630      	mov	r0, r6
 8005ed4:	f7ff fef6 	bl	8005cc4 <_printf_common>
 8005ed8:	3001      	adds	r0, #1
 8005eda:	d14d      	bne.n	8005f78 <_printf_i+0x1c8>
 8005edc:	f04f 30ff 	mov.w	r0, #4294967295
 8005ee0:	b005      	add	sp, #20
 8005ee2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005ee6:	4839      	ldr	r0, [pc, #228]	; (8005fcc <_printf_i+0x21c>)
 8005ee8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005eec:	6813      	ldr	r3, [r2, #0]
 8005eee:	6821      	ldr	r1, [r4, #0]
 8005ef0:	1d1d      	adds	r5, r3, #4
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	6015      	str	r5, [r2, #0]
 8005ef6:	060a      	lsls	r2, r1, #24
 8005ef8:	d50b      	bpl.n	8005f12 <_printf_i+0x162>
 8005efa:	07ca      	lsls	r2, r1, #31
 8005efc:	bf44      	itt	mi
 8005efe:	f041 0120 	orrmi.w	r1, r1, #32
 8005f02:	6021      	strmi	r1, [r4, #0]
 8005f04:	b91b      	cbnz	r3, 8005f0e <_printf_i+0x15e>
 8005f06:	6822      	ldr	r2, [r4, #0]
 8005f08:	f022 0220 	bic.w	r2, r2, #32
 8005f0c:	6022      	str	r2, [r4, #0]
 8005f0e:	2210      	movs	r2, #16
 8005f10:	e7b7      	b.n	8005e82 <_printf_i+0xd2>
 8005f12:	064d      	lsls	r5, r1, #25
 8005f14:	bf48      	it	mi
 8005f16:	b29b      	uxthmi	r3, r3
 8005f18:	e7ef      	b.n	8005efa <_printf_i+0x14a>
 8005f1a:	4665      	mov	r5, ip
 8005f1c:	fbb3 f1f2 	udiv	r1, r3, r2
 8005f20:	fb02 3311 	mls	r3, r2, r1, r3
 8005f24:	5cc3      	ldrb	r3, [r0, r3]
 8005f26:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005f2a:	460b      	mov	r3, r1
 8005f2c:	2900      	cmp	r1, #0
 8005f2e:	d1f5      	bne.n	8005f1c <_printf_i+0x16c>
 8005f30:	e7b9      	b.n	8005ea6 <_printf_i+0xf6>
 8005f32:	6813      	ldr	r3, [r2, #0]
 8005f34:	6825      	ldr	r5, [r4, #0]
 8005f36:	1d18      	adds	r0, r3, #4
 8005f38:	6961      	ldr	r1, [r4, #20]
 8005f3a:	6010      	str	r0, [r2, #0]
 8005f3c:	0628      	lsls	r0, r5, #24
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	d501      	bpl.n	8005f46 <_printf_i+0x196>
 8005f42:	6019      	str	r1, [r3, #0]
 8005f44:	e002      	b.n	8005f4c <_printf_i+0x19c>
 8005f46:	066a      	lsls	r2, r5, #25
 8005f48:	d5fb      	bpl.n	8005f42 <_printf_i+0x192>
 8005f4a:	8019      	strh	r1, [r3, #0]
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	4665      	mov	r5, ip
 8005f50:	6123      	str	r3, [r4, #16]
 8005f52:	e7b9      	b.n	8005ec8 <_printf_i+0x118>
 8005f54:	6813      	ldr	r3, [r2, #0]
 8005f56:	1d19      	adds	r1, r3, #4
 8005f58:	6011      	str	r1, [r2, #0]
 8005f5a:	681d      	ldr	r5, [r3, #0]
 8005f5c:	6862      	ldr	r2, [r4, #4]
 8005f5e:	2100      	movs	r1, #0
 8005f60:	4628      	mov	r0, r5
 8005f62:	f000 f8e1 	bl	8006128 <memchr>
 8005f66:	b108      	cbz	r0, 8005f6c <_printf_i+0x1bc>
 8005f68:	1b40      	subs	r0, r0, r5
 8005f6a:	6060      	str	r0, [r4, #4]
 8005f6c:	6863      	ldr	r3, [r4, #4]
 8005f6e:	6123      	str	r3, [r4, #16]
 8005f70:	2300      	movs	r3, #0
 8005f72:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f76:	e7a7      	b.n	8005ec8 <_printf_i+0x118>
 8005f78:	6923      	ldr	r3, [r4, #16]
 8005f7a:	462a      	mov	r2, r5
 8005f7c:	4639      	mov	r1, r7
 8005f7e:	4630      	mov	r0, r6
 8005f80:	47c0      	blx	r8
 8005f82:	3001      	adds	r0, #1
 8005f84:	d0aa      	beq.n	8005edc <_printf_i+0x12c>
 8005f86:	6823      	ldr	r3, [r4, #0]
 8005f88:	079b      	lsls	r3, r3, #30
 8005f8a:	d413      	bmi.n	8005fb4 <_printf_i+0x204>
 8005f8c:	68e0      	ldr	r0, [r4, #12]
 8005f8e:	9b03      	ldr	r3, [sp, #12]
 8005f90:	4298      	cmp	r0, r3
 8005f92:	bfb8      	it	lt
 8005f94:	4618      	movlt	r0, r3
 8005f96:	e7a3      	b.n	8005ee0 <_printf_i+0x130>
 8005f98:	2301      	movs	r3, #1
 8005f9a:	464a      	mov	r2, r9
 8005f9c:	4639      	mov	r1, r7
 8005f9e:	4630      	mov	r0, r6
 8005fa0:	47c0      	blx	r8
 8005fa2:	3001      	adds	r0, #1
 8005fa4:	d09a      	beq.n	8005edc <_printf_i+0x12c>
 8005fa6:	3501      	adds	r5, #1
 8005fa8:	68e3      	ldr	r3, [r4, #12]
 8005faa:	9a03      	ldr	r2, [sp, #12]
 8005fac:	1a9b      	subs	r3, r3, r2
 8005fae:	42ab      	cmp	r3, r5
 8005fb0:	dcf2      	bgt.n	8005f98 <_printf_i+0x1e8>
 8005fb2:	e7eb      	b.n	8005f8c <_printf_i+0x1dc>
 8005fb4:	2500      	movs	r5, #0
 8005fb6:	f104 0919 	add.w	r9, r4, #25
 8005fba:	e7f5      	b.n	8005fa8 <_printf_i+0x1f8>
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d1ac      	bne.n	8005f1a <_printf_i+0x16a>
 8005fc0:	7803      	ldrb	r3, [r0, #0]
 8005fc2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005fc6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005fca:	e76c      	b.n	8005ea6 <_printf_i+0xf6>
 8005fcc:	080063a9 	.word	0x080063a9
 8005fd0:	080063ba 	.word	0x080063ba

08005fd4 <_sbrk_r>:
 8005fd4:	b538      	push	{r3, r4, r5, lr}
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	4c05      	ldr	r4, [pc, #20]	; (8005ff0 <_sbrk_r+0x1c>)
 8005fda:	4605      	mov	r5, r0
 8005fdc:	4608      	mov	r0, r1
 8005fde:	6023      	str	r3, [r4, #0]
 8005fe0:	f7fb fc24 	bl	800182c <_sbrk>
 8005fe4:	1c43      	adds	r3, r0, #1
 8005fe6:	d102      	bne.n	8005fee <_sbrk_r+0x1a>
 8005fe8:	6823      	ldr	r3, [r4, #0]
 8005fea:	b103      	cbz	r3, 8005fee <_sbrk_r+0x1a>
 8005fec:	602b      	str	r3, [r5, #0]
 8005fee:	bd38      	pop	{r3, r4, r5, pc}
 8005ff0:	20000234 	.word	0x20000234

08005ff4 <__sread>:
 8005ff4:	b510      	push	{r4, lr}
 8005ff6:	460c      	mov	r4, r1
 8005ff8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ffc:	f000 f8a4 	bl	8006148 <_read_r>
 8006000:	2800      	cmp	r0, #0
 8006002:	bfab      	itete	ge
 8006004:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006006:	89a3      	ldrhlt	r3, [r4, #12]
 8006008:	181b      	addge	r3, r3, r0
 800600a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800600e:	bfac      	ite	ge
 8006010:	6563      	strge	r3, [r4, #84]	; 0x54
 8006012:	81a3      	strhlt	r3, [r4, #12]
 8006014:	bd10      	pop	{r4, pc}

08006016 <__swrite>:
 8006016:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800601a:	461f      	mov	r7, r3
 800601c:	898b      	ldrh	r3, [r1, #12]
 800601e:	4605      	mov	r5, r0
 8006020:	05db      	lsls	r3, r3, #23
 8006022:	460c      	mov	r4, r1
 8006024:	4616      	mov	r6, r2
 8006026:	d505      	bpl.n	8006034 <__swrite+0x1e>
 8006028:	2302      	movs	r3, #2
 800602a:	2200      	movs	r2, #0
 800602c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006030:	f000 f868 	bl	8006104 <_lseek_r>
 8006034:	89a3      	ldrh	r3, [r4, #12]
 8006036:	4632      	mov	r2, r6
 8006038:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800603c:	81a3      	strh	r3, [r4, #12]
 800603e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006042:	463b      	mov	r3, r7
 8006044:	4628      	mov	r0, r5
 8006046:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800604a:	f000 b817 	b.w	800607c <_write_r>

0800604e <__sseek>:
 800604e:	b510      	push	{r4, lr}
 8006050:	460c      	mov	r4, r1
 8006052:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006056:	f000 f855 	bl	8006104 <_lseek_r>
 800605a:	1c43      	adds	r3, r0, #1
 800605c:	89a3      	ldrh	r3, [r4, #12]
 800605e:	bf15      	itete	ne
 8006060:	6560      	strne	r0, [r4, #84]	; 0x54
 8006062:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006066:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800606a:	81a3      	strheq	r3, [r4, #12]
 800606c:	bf18      	it	ne
 800606e:	81a3      	strhne	r3, [r4, #12]
 8006070:	bd10      	pop	{r4, pc}

08006072 <__sclose>:
 8006072:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006076:	f000 b813 	b.w	80060a0 <_close_r>
	...

0800607c <_write_r>:
 800607c:	b538      	push	{r3, r4, r5, lr}
 800607e:	4605      	mov	r5, r0
 8006080:	4608      	mov	r0, r1
 8006082:	4611      	mov	r1, r2
 8006084:	2200      	movs	r2, #0
 8006086:	4c05      	ldr	r4, [pc, #20]	; (800609c <_write_r+0x20>)
 8006088:	6022      	str	r2, [r4, #0]
 800608a:	461a      	mov	r2, r3
 800608c:	f7fb fa34 	bl	80014f8 <_write>
 8006090:	1c43      	adds	r3, r0, #1
 8006092:	d102      	bne.n	800609a <_write_r+0x1e>
 8006094:	6823      	ldr	r3, [r4, #0]
 8006096:	b103      	cbz	r3, 800609a <_write_r+0x1e>
 8006098:	602b      	str	r3, [r5, #0]
 800609a:	bd38      	pop	{r3, r4, r5, pc}
 800609c:	20000234 	.word	0x20000234

080060a0 <_close_r>:
 80060a0:	b538      	push	{r3, r4, r5, lr}
 80060a2:	2300      	movs	r3, #0
 80060a4:	4c05      	ldr	r4, [pc, #20]	; (80060bc <_close_r+0x1c>)
 80060a6:	4605      	mov	r5, r0
 80060a8:	4608      	mov	r0, r1
 80060aa:	6023      	str	r3, [r4, #0]
 80060ac:	f7fb fa50 	bl	8001550 <_close>
 80060b0:	1c43      	adds	r3, r0, #1
 80060b2:	d102      	bne.n	80060ba <_close_r+0x1a>
 80060b4:	6823      	ldr	r3, [r4, #0]
 80060b6:	b103      	cbz	r3, 80060ba <_close_r+0x1a>
 80060b8:	602b      	str	r3, [r5, #0]
 80060ba:	bd38      	pop	{r3, r4, r5, pc}
 80060bc:	20000234 	.word	0x20000234

080060c0 <_fstat_r>:
 80060c0:	b538      	push	{r3, r4, r5, lr}
 80060c2:	2300      	movs	r3, #0
 80060c4:	4c06      	ldr	r4, [pc, #24]	; (80060e0 <_fstat_r+0x20>)
 80060c6:	4605      	mov	r5, r0
 80060c8:	4608      	mov	r0, r1
 80060ca:	4611      	mov	r1, r2
 80060cc:	6023      	str	r3, [r4, #0]
 80060ce:	f7fb fa8f 	bl	80015f0 <_fstat>
 80060d2:	1c43      	adds	r3, r0, #1
 80060d4:	d102      	bne.n	80060dc <_fstat_r+0x1c>
 80060d6:	6823      	ldr	r3, [r4, #0]
 80060d8:	b103      	cbz	r3, 80060dc <_fstat_r+0x1c>
 80060da:	602b      	str	r3, [r5, #0]
 80060dc:	bd38      	pop	{r3, r4, r5, pc}
 80060de:	bf00      	nop
 80060e0:	20000234 	.word	0x20000234

080060e4 <_isatty_r>:
 80060e4:	b538      	push	{r3, r4, r5, lr}
 80060e6:	2300      	movs	r3, #0
 80060e8:	4c05      	ldr	r4, [pc, #20]	; (8006100 <_isatty_r+0x1c>)
 80060ea:	4605      	mov	r5, r0
 80060ec:	4608      	mov	r0, r1
 80060ee:	6023      	str	r3, [r4, #0]
 80060f0:	f7fb f9ec 	bl	80014cc <_isatty>
 80060f4:	1c43      	adds	r3, r0, #1
 80060f6:	d102      	bne.n	80060fe <_isatty_r+0x1a>
 80060f8:	6823      	ldr	r3, [r4, #0]
 80060fa:	b103      	cbz	r3, 80060fe <_isatty_r+0x1a>
 80060fc:	602b      	str	r3, [r5, #0]
 80060fe:	bd38      	pop	{r3, r4, r5, pc}
 8006100:	20000234 	.word	0x20000234

08006104 <_lseek_r>:
 8006104:	b538      	push	{r3, r4, r5, lr}
 8006106:	4605      	mov	r5, r0
 8006108:	4608      	mov	r0, r1
 800610a:	4611      	mov	r1, r2
 800610c:	2200      	movs	r2, #0
 800610e:	4c05      	ldr	r4, [pc, #20]	; (8006124 <_lseek_r+0x20>)
 8006110:	6022      	str	r2, [r4, #0]
 8006112:	461a      	mov	r2, r3
 8006114:	f7fb fa33 	bl	800157e <_lseek>
 8006118:	1c43      	adds	r3, r0, #1
 800611a:	d102      	bne.n	8006122 <_lseek_r+0x1e>
 800611c:	6823      	ldr	r3, [r4, #0]
 800611e:	b103      	cbz	r3, 8006122 <_lseek_r+0x1e>
 8006120:	602b      	str	r3, [r5, #0]
 8006122:	bd38      	pop	{r3, r4, r5, pc}
 8006124:	20000234 	.word	0x20000234

08006128 <memchr>:
 8006128:	b510      	push	{r4, lr}
 800612a:	b2c9      	uxtb	r1, r1
 800612c:	4402      	add	r2, r0
 800612e:	4290      	cmp	r0, r2
 8006130:	4603      	mov	r3, r0
 8006132:	d101      	bne.n	8006138 <memchr+0x10>
 8006134:	2300      	movs	r3, #0
 8006136:	e003      	b.n	8006140 <memchr+0x18>
 8006138:	781c      	ldrb	r4, [r3, #0]
 800613a:	3001      	adds	r0, #1
 800613c:	428c      	cmp	r4, r1
 800613e:	d1f6      	bne.n	800612e <memchr+0x6>
 8006140:	4618      	mov	r0, r3
 8006142:	bd10      	pop	{r4, pc}

08006144 <__malloc_lock>:
 8006144:	4770      	bx	lr

08006146 <__malloc_unlock>:
 8006146:	4770      	bx	lr

08006148 <_read_r>:
 8006148:	b538      	push	{r3, r4, r5, lr}
 800614a:	4605      	mov	r5, r0
 800614c:	4608      	mov	r0, r1
 800614e:	4611      	mov	r1, r2
 8006150:	2200      	movs	r2, #0
 8006152:	4c05      	ldr	r4, [pc, #20]	; (8006168 <_read_r+0x20>)
 8006154:	6022      	str	r2, [r4, #0]
 8006156:	461a      	mov	r2, r3
 8006158:	f7fb fa22 	bl	80015a0 <_read>
 800615c:	1c43      	adds	r3, r0, #1
 800615e:	d102      	bne.n	8006166 <_read_r+0x1e>
 8006160:	6823      	ldr	r3, [r4, #0]
 8006162:	b103      	cbz	r3, 8006166 <_read_r+0x1e>
 8006164:	602b      	str	r3, [r5, #0]
 8006166:	bd38      	pop	{r3, r4, r5, pc}
 8006168:	20000234 	.word	0x20000234

0800616c <_init>:
 800616c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800616e:	bf00      	nop
 8006170:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006172:	bc08      	pop	{r3}
 8006174:	469e      	mov	lr, r3
 8006176:	4770      	bx	lr

08006178 <_fini>:
 8006178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800617a:	bf00      	nop
 800617c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800617e:	bc08      	pop	{r3}
 8006180:	469e      	mov	lr, r3
 8006182:	4770      	bx	lr
